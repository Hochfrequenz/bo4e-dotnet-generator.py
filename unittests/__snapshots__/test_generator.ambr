# serializer version: 1
# name: TestGenerator.test_cli_main[cli_ZusatzAttribut.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var zusatzAttribut = ZusatzAttribut.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
      /// GP-Nummer etc.) auf.
      /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
      /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
      /// type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `ZusatzAttribut JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
      /// </summary>
      public partial class ZusatzAttribut
      {
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("name")]
          public string Name { get; set; }
  
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("wert")]
          public object Wert { get; set; }
      }
  
      public partial class ZusatzAttribut
      {
          public static ZusatzAttribut FromJson(string json) => JsonConvert.DeserializeObject<ZusatzAttribut>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this ZusatzAttribut self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  }
  
  '''
# ---
# name: TestGenerator.test_cli_main[cli_bo\Angebot.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var angebot = Angebot.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Mit diesem BO kann ein Versorgungsangebot zur Strom- oder Gasversorgung oder die
      /// Teilnahme an einer Ausschreibung
      /// übertragen werden. Es können verschiedene Varianten enthalten sein (z.B. ein- und
      /// mehrjährige Laufzeit).
      /// Innerhalb jeder Variante können Teile enthalten sein, die jeweils für eine oder mehrere
      /// Marktlokationen erstellt
      /// werden.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/bo/Angebot.svg" type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `Angebot JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/bo/Angebot.json>`_
      /// </summary>
      public partial class Angebot
      {
          /// <summary>
          /// Hier können IDs anderer Systeme hinterlegt werden (z.B. eine SAP-GP-Nummer oder eine GUID)
          /// </summary>
          [JsonProperty("_id")]
          public string Id { get; set; }
  
          /// <summary>
          /// Eindeutige Nummer des Angebotes
          /// </summary>
          [JsonProperty("_typ")]
          public Typ? Typ { get; set; }
  
          /// <summary>
          /// Version der BO-Struktur aka "fachliche Versionierung"
          /// </summary>
          [JsonProperty("_version")]
          public string Version { get; set; }
  
          /// <summary>
          /// Bis zu diesem Zeitpunkt (Tag/Uhrzeit) inklusive gilt das Angebot
          /// </summary>
          [JsonProperty("anfragereferenz")]
          public string Anfragereferenz { get; set; }
  
          /// <summary>
          /// Erstellungsdatum des Angebots
          /// </summary>
          [JsonProperty("angebotsdatum")]
          public DateTimeOffset? Angebotsdatum { get; set; }
  
          /// <summary>
          /// Ersteller des Angebots
          /// </summary>
          [JsonProperty("angebotsgeber")]
          public object Angebotsgeber { get; set; }
  
          /// <summary>
          /// Empfänger des Angebots
          /// </summary>
          [JsonProperty("angebotsnehmer")]
          public object Angebotsnehmer { get; set; }
  
          /// <summary>
          /// Eindeutige Nummer des Angebotes
          /// </summary>
          [JsonProperty("angebotsnummer")]
          public string Angebotsnummer { get; set; }
  
          /// <summary>
          /// Bis zu diesem Zeitpunkt (Tag/Uhrzeit) inklusive gilt das Angebot
          /// </summary>
          [JsonProperty("bindefrist")]
          public DateTimeOffset? Bindefrist { get; set; }
  
          /// <summary>
          /// Sparte, für die das Angebot abgegeben wird (Strom/Gas)
          /// </summary>
          [JsonProperty("sparte")]
          public object Sparte { get; set; }
  
          /// <summary>
          /// Person, die als Angebotsgeber das Angebots ausgestellt hat
          /// </summary>
          [JsonProperty("unterzeichnerAngebotsgeber")]
          public object UnterzeichnerAngebotsgeber { get; set; }
  
          /// <summary>
          /// Person, die als Angebotsnehmer das Angebot angenommen hat
          /// </summary>
          [JsonProperty("unterzeichnerAngebotsnehmer")]
          public object UnterzeichnerAngebotsnehmer { get; set; }
  
          /// <summary>
          /// Eine oder mehrere Varianten des Angebots mit den Angebotsteilen;
          /// Ein Angebot besteht mindestens aus einer Variante.
          /// </summary>
          [JsonProperty("varianten")]
          public object Varianten { get; set; }
  
          [JsonProperty("zusatzAttribute")]
          public object ZusatzAttribute { get; set; }
      }
  
  
      public partial class Angebot
      {
          public static Angebot FromJson(string json) => JsonConvert.DeserializeObject<Angebot>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this Angebot self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  TypConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class TypConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "ANGEBOT":
                      return Typ.Angebot;
                  case "AUSSCHREIBUNG":
                      return Typ.Ausschreibung;
                  case "BUENDELVERTRAG":
                      return Typ.Buendelvertrag;
                  case "ENERGIEMENGE":
                      return Typ.Energiemenge;
                  case "FREMDKOSTEN":
                      return Typ.Fremdkosten;
                  case "GERAET":
                      return Typ.Geraet;
                  case "GESCHAEFTSOBJEKT":
                      return Typ.Geschaeftsobjekt;
                  case "GESCHAEFTSPARTNER":
                      return Typ.Geschaeftspartner;
                  case "KOSTEN":
                      return Typ.Kosten;
                  case "LASTGANG":
                      return Typ.Lastgang;
                  case "MARKTLOKATION":
                      return Typ.Marktlokation;
                  case "MARKTTEILNEHMER":
                      return Typ.Marktteilnehmer;
                  case "MESSLOKATION":
                      return Typ.Messlokation;
                  case "NETZNUTZUNGSRECHNUNG":
                      return Typ.Netznutzungsrechnung;
                  case "PERSON":
                      return Typ.Person;
                  case "PREISBLATT":
                      return Typ.Preisblatt;
                  case "PREISBLATTDIENSTLEISTUNG":
                      return Typ.Preisblattdienstleistung;
                  case "PREISBLATTHARDWARE":
                      return Typ.Preisblatthardware;
                  case "PREISBLATTKONZESSIONSABGABE":
                      return Typ.Preisblattkonzessionsabgabe;
                  case "PREISBLATTMESSUNG":
                      return Typ.Preisblattmessung;
                  case "PREISBLATTNETZNUTZUNG":
                      return Typ.Preisblattnetznutzung;
                  case "PREISBLATTUMLAGEN":
                      return Typ.Preisblattumlagen;
                  case "RECHNUNG":
                      return Typ.Rechnung;
                  case "REGION":
                      return Typ.Region;
                  case "REGIONALTARIF":
                      return Typ.Regionaltarif;
                  case "STANDORTEIGENSCHAFTEN":
                      return Typ.Standorteigenschaften;
                  case "TARIF":
                      return Typ.Tarif;
                  case "TARIFINFO":
                      return Typ.Tarifinfo;
                  case "TARIFKOSTEN":
                      return Typ.Tarifkosten;
                  case "TARIFPREISBLATT":
                      return Typ.Tarifpreisblatt;
                  case "VERTRAG":
                      return Typ.Vertrag;
                  case "ZAEHLER":
                      return Typ.Zaehler;
                  case "ZEITREIHE":
                      return Typ.Zeitreihe;
              }
              throw new Exception("Cannot unmarshal type Typ");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (Typ)untypedValue;
              switch (value)
              {
                  case Typ.Angebot:
                      serializer.Serialize(writer, "ANGEBOT");
                      return;
                  case Typ.Ausschreibung:
                      serializer.Serialize(writer, "AUSSCHREIBUNG");
                      return;
                  case Typ.Buendelvertrag:
                      serializer.Serialize(writer, "BUENDELVERTRAG");
                      return;
                  case Typ.Energiemenge:
                      serializer.Serialize(writer, "ENERGIEMENGE");
                      return;
                  case Typ.Fremdkosten:
                      serializer.Serialize(writer, "FREMDKOSTEN");
                      return;
                  case Typ.Geraet:
                      serializer.Serialize(writer, "GERAET");
                      return;
                  case Typ.Geschaeftsobjekt:
                      serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                      return;
                  case Typ.Geschaeftspartner:
                      serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                      return;
                  case Typ.Kosten:
                      serializer.Serialize(writer, "KOSTEN");
                      return;
                  case Typ.Lastgang:
                      serializer.Serialize(writer, "LASTGANG");
                      return;
                  case Typ.Marktlokation:
                      serializer.Serialize(writer, "MARKTLOKATION");
                      return;
                  case Typ.Marktteilnehmer:
                      serializer.Serialize(writer, "MARKTTEILNEHMER");
                      return;
                  case Typ.Messlokation:
                      serializer.Serialize(writer, "MESSLOKATION");
                      return;
                  case Typ.Netznutzungsrechnung:
                      serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                      return;
                  case Typ.Person:
                      serializer.Serialize(writer, "PERSON");
                      return;
                  case Typ.Preisblatt:
                      serializer.Serialize(writer, "PREISBLATT");
                      return;
                  case Typ.Preisblattdienstleistung:
                      serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                      return;
                  case Typ.Preisblatthardware:
                      serializer.Serialize(writer, "PREISBLATTHARDWARE");
                      return;
                  case Typ.Preisblattkonzessionsabgabe:
                      serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                      return;
                  case Typ.Preisblattmessung:
                      serializer.Serialize(writer, "PREISBLATTMESSUNG");
                      return;
                  case Typ.Preisblattnetznutzung:
                      serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                      return;
                  case Typ.Preisblattumlagen:
                      serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                      return;
                  case Typ.Rechnung:
                      serializer.Serialize(writer, "RECHNUNG");
                      return;
                  case Typ.Region:
                      serializer.Serialize(writer, "REGION");
                      return;
                  case Typ.Regionaltarif:
                      serializer.Serialize(writer, "REGIONALTARIF");
                      return;
                  case Typ.Standorteigenschaften:
                      serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                      return;
                  case Typ.Tarif:
                      serializer.Serialize(writer, "TARIF");
                      return;
                  case Typ.Tarifinfo:
                      serializer.Serialize(writer, "TARIFINFO");
                      return;
                  case Typ.Tarifkosten:
                      serializer.Serialize(writer, "TARIFKOSTEN");
                      return;
                  case Typ.Tarifpreisblatt:
                      serializer.Serialize(writer, "TARIFPREISBLATT");
                      return;
                  case Typ.Vertrag:
                      serializer.Serialize(writer, "VERTRAG");
                      return;
                  case Typ.Zaehler:
                      serializer.Serialize(writer, "ZAEHLER");
                      return;
                  case Typ.Zeitreihe:
                      serializer.Serialize(writer, "ZEITREIHE");
                      return;
              }
              throw new Exception("Cannot marshal type Typ");
          }
  
          public static readonly TypConverter Singleton = new TypConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_cli_main[cli_com\Adresse.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var adresse = Adresse.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Contains an address that can be used for most purposes.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/Adresse.svg" type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `Adresse JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Adresse.json>`_
      /// </summary>
      public partial class Adresse
      {
          /// <summary>
          /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
          ///
          /// # pylint: disable=duplicate-code
          /// model_config = ConfigDict(
          /// alias_generator=camelize,
          /// populate_by_name=True,
          /// extra="allow",
          /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
          /// would be to create
          /// # an annotated version of Decimal, but you would have to use it everywhere in the
          /// pydantic models.
          /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
          /// json_encoders={Decimal: str},
          /// )
          /// </summary>
          [JsonProperty("_id")]
          public string Id { get; set; }
  
          /// <summary>
          /// Version der BO-Struktur aka "fachliche Versionierung"
          /// </summary>
          [JsonProperty("_version")]
          public string Version { get; set; }
  
          /// <summary>
          /// Zusatzhinweis zum Auffinden der Adresse, z.B. "3. Stock linke Wohnung"
          /// </summary>
          [JsonProperty("adresszusatz")]
          public string Adresszusatz { get; set; }
  
          /// <summary>
          /// Im Falle einer c/o-Adresse steht in diesem Attribut die Anrede. Z.B. "c/o Veronica
          /// Hauptmieterin"
          /// </summary>
          [JsonProperty("coErgaenzung")]
          public string CoErgaenzung { get; set; }
  
          /// <summary>
          /// Hausnummer inkl. Zusatz; z.B. "3", "4a"
          /// </summary>
          [JsonProperty("hausnummer")]
          public string Hausnummer { get; set; }
  
          /// <summary>
          /// Offizieller ISO-Landescode
          /// </summary>
          [JsonProperty("landescode")]
          public Landescode? Landescode { get; set; }
  
          /// <summary>
          /// Bezeichnung der Stadt; z.B. "Hückelhoven"
          /// </summary>
          [JsonProperty("ort")]
          public string Ort { get; set; }
  
          /// <summary>
          /// Bezeichnung des Ortsteils; z.B. "Mitte"
          /// </summary>
          [JsonProperty("ortsteil")]
          public string Ortsteil { get; set; }
  
          /// <summary>
          /// Im Falle einer Postfachadresse das Postfach; Damit werden Straße und Hausnummer nicht
          /// berücksichtigt
          /// </summary>
          [JsonProperty("postfach")]
          public string Postfach { get; set; }
  
          /// <summary>
          /// Die Postleitzahl; z.B: "41836"
          /// </summary>
          [JsonProperty("postleitzahl")]
          public string Postleitzahl { get; set; }
  
          /// <summary>
          /// Bezeichnung der Straße; z.B. "Weserstraße"
          /// </summary>
          [JsonProperty("strasse")]
          public string Strasse { get; set; }
  
          [JsonProperty("zusatzAttribute")]
          public ZusatzAttribut[] ZusatzAttribute { get; set; }
      }
  
      /// <summary>
      /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
      /// GP-Nummer etc.) auf.
      /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
      /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
      /// type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `ZusatzAttribut JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
      /// </summary>
      public partial class ZusatzAttribut
      {
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("name")]
          public string Name { get; set; }
  
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("wert")]
          public object Wert { get; set; }
      }
  
      public partial class Adresse
      {
          public static Adresse FromJson(string json) => JsonConvert.DeserializeObject<Adresse>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this Adresse self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  LandescodeConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class LandescodeConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(Landescode) || t == typeof(Landescode?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "AD":
                      return Landescode.Ad;
                  case "AE":
                      return Landescode.Ae;
                  case "AF":
                      return Landescode.Af;
                  case "AG":
                      return Landescode.Ag;
                  case "AI":
                      return Landescode.Ai;
                  case "AL":
                      return Landescode.Al;
                  case "AM":
                      return Landescode.Am;
                  case "AO":
                      return Landescode.Ao;
                  case "AQ":
                      return Landescode.Aq;
                  case "AR":
                      return Landescode.Ar;
                  case "AS":
                      return Landescode.As;
                  case "AT":
                      return Landescode.At;
                  case "AU":
                      return Landescode.Au;
                  case "AW":
                      return Landescode.Aw;
                  case "AX":
                      return Landescode.Ax;
                  case "AZ":
                      return Landescode.Az;
                  case "BA":
                      return Landescode.Ba;
                  case "BB":
                      return Landescode.Bb;
                  case "BD":
                      return Landescode.Bd;
                  case "BE":
                      return Landescode.Be;
                  case "BF":
                      return Landescode.Bf;
                  case "BG":
                      return Landescode.Bg;
                  case "BH":
                      return Landescode.Bh;
                  case "BI":
                      return Landescode.Bi;
                  case "BJ":
                      return Landescode.Bj;
                  case "BL":
                      return Landescode.Bl;
                  case "BM":
                      return Landescode.Bm;
                  case "BN":
                      return Landescode.Bn;
                  case "BO":
                      return Landescode.Bo;
                  case "BQ":
                      return Landescode.Bq;
                  case "BR":
                      return Landescode.Br;
                  case "BS":
                      return Landescode.Bs;
                  case "BT":
                      return Landescode.Bt;
                  case "BV":
                      return Landescode.Bv;
                  case "BW":
                      return Landescode.Bw;
                  case "BY":
                      return Landescode.By;
                  case "BZ":
                      return Landescode.Bz;
                  case "CA":
                      return Landescode.Ca;
                  case "CC":
                      return Landescode.Cc;
                  case "CD":
                      return Landescode.Cd;
                  case "CF":
                      return Landescode.Cf;
                  case "CG":
                      return Landescode.Cg;
                  case "CH":
                      return Landescode.Ch;
                  case "CI":
                      return Landescode.Ci;
                  case "CK":
                      return Landescode.Ck;
                  case "CL":
                      return Landescode.Cl;
                  case "CM":
                      return Landescode.Cm;
                  case "CN":
                      return Landescode.Cn;
                  case "CO":
                      return Landescode.Co;
                  case "CR":
                      return Landescode.Cr;
                  case "CU":
                      return Landescode.Cu;
                  case "CV":
                      return Landescode.Cv;
                  case "CW":
                      return Landescode.Cw;
                  case "CX":
                      return Landescode.Cx;
                  case "CY":
                      return Landescode.Cy;
                  case "CZ":
                      return Landescode.Cz;
                  case "DE":
                      return Landescode.De;
                  case "DJ":
                      return Landescode.Dj;
                  case "DK":
                      return Landescode.Dk;
                  case "DM":
                      return Landescode.Dm;
                  case "DO":
                      return Landescode.Do;
                  case "DZ":
                      return Landescode.Dz;
                  case "EC":
                      return Landescode.Ec;
                  case "EE":
                      return Landescode.Ee;
                  case "EG":
                      return Landescode.Eg;
                  case "EH":
                      return Landescode.Eh;
                  case "ER":
                      return Landescode.Er;
                  case "ES":
                      return Landescode.Es;
                  case "ET":
                      return Landescode.Et;
                  case "FI":
                      return Landescode.Fi;
                  case "FJ":
                      return Landescode.Fj;
                  case "FK":
                      return Landescode.Fk;
                  case "FM":
                      return Landescode.Fm;
                  case "FO":
                      return Landescode.Fo;
                  case "FR":
                      return Landescode.Fr;
                  case "GA":
                      return Landescode.Ga;
                  case "GB":
                      return Landescode.Gb;
                  case "GD":
                      return Landescode.Gd;
                  case "GE":
                      return Landescode.Ge;
                  case "GF":
                      return Landescode.Gf;
                  case "GG":
                      return Landescode.Gg;
                  case "GH":
                      return Landescode.Gh;
                  case "GI":
                      return Landescode.Gi;
                  case "GL":
                      return Landescode.Gl;
                  case "GM":
                      return Landescode.Gm;
                  case "GN":
                      return Landescode.Gn;
                  case "GP":
                      return Landescode.Gp;
                  case "GQ":
                      return Landescode.Gq;
                  case "GR":
                      return Landescode.Gr;
                  case "GS":
                      return Landescode.Gs;
                  case "GT":
                      return Landescode.Gt;
                  case "GU":
                      return Landescode.Gu;
                  case "GW":
                      return Landescode.Gw;
                  case "GY":
                      return Landescode.Gy;
                  case "HK":
                      return Landescode.Hk;
                  case "HM":
                      return Landescode.Hm;
                  case "HN":
                      return Landescode.Hn;
                  case "HR":
                      return Landescode.Hr;
                  case "HT":
                      return Landescode.Ht;
                  case "HU":
                      return Landescode.Hu;
                  case "ID":
                      return Landescode.Id;
                  case "IE":
                      return Landescode.Ie;
                  case "IL":
                      return Landescode.Il;
                  case "IM":
                      return Landescode.Im;
                  case "IN":
                      return Landescode.In;
                  case "IO":
                      return Landescode.Io;
                  case "IQ":
                      return Landescode.Iq;
                  case "IR":
                      return Landescode.Ir;
                  case "IS":
                      return Landescode.Is;
                  case "IT":
                      return Landescode.It;
                  case "JE":
                      return Landescode.Je;
                  case "JM":
                      return Landescode.Jm;
                  case "JO":
                      return Landescode.Jo;
                  case "JP":
                      return Landescode.Jp;
                  case "KE":
                      return Landescode.Ke;
                  case "KG":
                      return Landescode.Kg;
                  case "KH":
                      return Landescode.Kh;
                  case "KI":
                      return Landescode.Ki;
                  case "KM":
                      return Landescode.Km;
                  case "KN":
                      return Landescode.Kn;
                  case "KP":
                      return Landescode.Kp;
                  case "KR":
                      return Landescode.Kr;
                  case "KW":
                      return Landescode.Kw;
                  case "KY":
                      return Landescode.Ky;
                  case "KZ":
                      return Landescode.Kz;
                  case "LA":
                      return Landescode.La;
                  case "LB":
                      return Landescode.Lb;
                  case "LC":
                      return Landescode.Lc;
                  case "LI":
                      return Landescode.Li;
                  case "LK":
                      return Landescode.Lk;
                  case "LR":
                      return Landescode.Lr;
                  case "LS":
                      return Landescode.Ls;
                  case "LT":
                      return Landescode.Lt;
                  case "LU":
                      return Landescode.Lu;
                  case "LV":
                      return Landescode.Lv;
                  case "LY":
                      return Landescode.Ly;
                  case "MA":
                      return Landescode.Ma;
                  case "MC":
                      return Landescode.Mc;
                  case "MD":
                      return Landescode.Md;
                  case "ME":
                      return Landescode.Me;
                  case "MF":
                      return Landescode.Mf;
                  case "MG":
                      return Landescode.Mg;
                  case "MH":
                      return Landescode.Mh;
                  case "MK":
                      return Landescode.Mk;
                  case "ML":
                      return Landescode.Ml;
                  case "MM":
                      return Landescode.Mm;
                  case "MN":
                      return Landescode.Mn;
                  case "MO":
                      return Landescode.Mo;
                  case "MP":
                      return Landescode.Mp;
                  case "MQ":
                      return Landescode.Mq;
                  case "MR":
                      return Landescode.Mr;
                  case "MS":
                      return Landescode.Ms;
                  case "MT":
                      return Landescode.Mt;
                  case "MU":
                      return Landescode.Mu;
                  case "MV":
                      return Landescode.Mv;
                  case "MW":
                      return Landescode.Mw;
                  case "MX":
                      return Landescode.Mx;
                  case "MY":
                      return Landescode.My;
                  case "MZ":
                      return Landescode.Mz;
                  case "NA":
                      return Landescode.Na;
                  case "NC":
                      return Landescode.Nc;
                  case "NE":
                      return Landescode.Ne;
                  case "NF":
                      return Landescode.Nf;
                  case "NG":
                      return Landescode.Ng;
                  case "NI":
                      return Landescode.Ni;
                  case "NL":
                      return Landescode.Nl;
                  case "NO":
                      return Landescode.No;
                  case "NP":
                      return Landescode.Np;
                  case "NR":
                      return Landescode.Nr;
                  case "NU":
                      return Landescode.Nu;
                  case "NZ":
                      return Landescode.Nz;
                  case "OM":
                      return Landescode.Om;
                  case "PA":
                      return Landescode.Pa;
                  case "PE":
                      return Landescode.Pe;
                  case "PF":
                      return Landescode.Pf;
                  case "PG":
                      return Landescode.Pg;
                  case "PH":
                      return Landescode.Ph;
                  case "PK":
                      return Landescode.Pk;
                  case "PL":
                      return Landescode.Pl;
                  case "PM":
                      return Landescode.Pm;
                  case "PN":
                      return Landescode.Pn;
                  case "PR":
                      return Landescode.Pr;
                  case "PS":
                      return Landescode.Ps;
                  case "PT":
                      return Landescode.Pt;
                  case "PW":
                      return Landescode.Pw;
                  case "PY":
                      return Landescode.Py;
                  case "QA":
                      return Landescode.Qa;
                  case "RE":
                      return Landescode.Re;
                  case "RO":
                      return Landescode.Ro;
                  case "RS":
                      return Landescode.Rs;
                  case "RU":
                      return Landescode.Ru;
                  case "RW":
                      return Landescode.Rw;
                  case "SA":
                      return Landescode.Sa;
                  case "SB":
                      return Landescode.Sb;
                  case "SC":
                      return Landescode.Sc;
                  case "SD":
                      return Landescode.Sd;
                  case "SE":
                      return Landescode.Se;
                  case "SG":
                      return Landescode.Sg;
                  case "SH":
                      return Landescode.Sh;
                  case "SI":
                      return Landescode.Si;
                  case "SJ":
                      return Landescode.Sj;
                  case "SK":
                      return Landescode.Sk;
                  case "SL":
                      return Landescode.Sl;
                  case "SM":
                      return Landescode.Sm;
                  case "SN":
                      return Landescode.Sn;
                  case "SO":
                      return Landescode.So;
                  case "SR":
                      return Landescode.Sr;
                  case "SS":
                      return Landescode.Ss;
                  case "ST":
                      return Landescode.St;
                  case "SV":
                      return Landescode.Sv;
                  case "SX":
                      return Landescode.Sx;
                  case "SY":
                      return Landescode.Sy;
                  case "SZ":
                      return Landescode.Sz;
                  case "TC":
                      return Landescode.Tc;
                  case "TD":
                      return Landescode.Td;
                  case "TF":
                      return Landescode.Tf;
                  case "TG":
                      return Landescode.Tg;
                  case "TH":
                      return Landescode.Th;
                  case "TJ":
                      return Landescode.Tj;
                  case "TK":
                      return Landescode.Tk;
                  case "TL":
                      return Landescode.Tl;
                  case "TM":
                      return Landescode.Tm;
                  case "TN":
                      return Landescode.Tn;
                  case "TO":
                      return Landescode.To;
                  case "TR":
                      return Landescode.Tr;
                  case "TT":
                      return Landescode.Tt;
                  case "TV":
                      return Landescode.Tv;
                  case "TW":
                      return Landescode.Tw;
                  case "TZ":
                      return Landescode.Tz;
                  case "UA":
                      return Landescode.Ua;
                  case "UG":
                      return Landescode.Ug;
                  case "UM":
                      return Landescode.Um;
                  case "US":
                      return Landescode.Us;
                  case "UY":
                      return Landescode.Uy;
                  case "UZ":
                      return Landescode.Uz;
                  case "VA":
                      return Landescode.Va;
                  case "VC":
                      return Landescode.Vc;
                  case "VE":
                      return Landescode.Ve;
                  case "VG":
                      return Landescode.Vg;
                  case "VI":
                      return Landescode.Vi;
                  case "VN":
                      return Landescode.Vn;
                  case "VU":
                      return Landescode.Vu;
                  case "WF":
                      return Landescode.Wf;
                  case "WS":
                      return Landescode.Ws;
                  case "XK":
                      return Landescode.Xk;
                  case "YE":
                      return Landescode.Ye;
                  case "YT":
                      return Landescode.Yt;
                  case "ZA":
                      return Landescode.Za;
                  case "ZM":
                      return Landescode.Zm;
                  case "ZW":
                      return Landescode.Zw;
              }
              throw new Exception("Cannot unmarshal type Landescode");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (Landescode)untypedValue;
              switch (value)
              {
                  case Landescode.Ad:
                      serializer.Serialize(writer, "AD");
                      return;
                  case Landescode.Ae:
                      serializer.Serialize(writer, "AE");
                      return;
                  case Landescode.Af:
                      serializer.Serialize(writer, "AF");
                      return;
                  case Landescode.Ag:
                      serializer.Serialize(writer, "AG");
                      return;
                  case Landescode.Ai:
                      serializer.Serialize(writer, "AI");
                      return;
                  case Landescode.Al:
                      serializer.Serialize(writer, "AL");
                      return;
                  case Landescode.Am:
                      serializer.Serialize(writer, "AM");
                      return;
                  case Landescode.Ao:
                      serializer.Serialize(writer, "AO");
                      return;
                  case Landescode.Aq:
                      serializer.Serialize(writer, "AQ");
                      return;
                  case Landescode.Ar:
                      serializer.Serialize(writer, "AR");
                      return;
                  case Landescode.As:
                      serializer.Serialize(writer, "AS");
                      return;
                  case Landescode.At:
                      serializer.Serialize(writer, "AT");
                      return;
                  case Landescode.Au:
                      serializer.Serialize(writer, "AU");
                      return;
                  case Landescode.Aw:
                      serializer.Serialize(writer, "AW");
                      return;
                  case Landescode.Ax:
                      serializer.Serialize(writer, "AX");
                      return;
                  case Landescode.Az:
                      serializer.Serialize(writer, "AZ");
                      return;
                  case Landescode.Ba:
                      serializer.Serialize(writer, "BA");
                      return;
                  case Landescode.Bb:
                      serializer.Serialize(writer, "BB");
                      return;
                  case Landescode.Bd:
                      serializer.Serialize(writer, "BD");
                      return;
                  case Landescode.Be:
                      serializer.Serialize(writer, "BE");
                      return;
                  case Landescode.Bf:
                      serializer.Serialize(writer, "BF");
                      return;
                  case Landescode.Bg:
                      serializer.Serialize(writer, "BG");
                      return;
                  case Landescode.Bh:
                      serializer.Serialize(writer, "BH");
                      return;
                  case Landescode.Bi:
                      serializer.Serialize(writer, "BI");
                      return;
                  case Landescode.Bj:
                      serializer.Serialize(writer, "BJ");
                      return;
                  case Landescode.Bl:
                      serializer.Serialize(writer, "BL");
                      return;
                  case Landescode.Bm:
                      serializer.Serialize(writer, "BM");
                      return;
                  case Landescode.Bn:
                      serializer.Serialize(writer, "BN");
                      return;
                  case Landescode.Bo:
                      serializer.Serialize(writer, "BO");
                      return;
                  case Landescode.Bq:
                      serializer.Serialize(writer, "BQ");
                      return;
                  case Landescode.Br:
                      serializer.Serialize(writer, "BR");
                      return;
                  case Landescode.Bs:
                      serializer.Serialize(writer, "BS");
                      return;
                  case Landescode.Bt:
                      serializer.Serialize(writer, "BT");
                      return;
                  case Landescode.Bv:
                      serializer.Serialize(writer, "BV");
                      return;
                  case Landescode.Bw:
                      serializer.Serialize(writer, "BW");
                      return;
                  case Landescode.By:
                      serializer.Serialize(writer, "BY");
                      return;
                  case Landescode.Bz:
                      serializer.Serialize(writer, "BZ");
                      return;
                  case Landescode.Ca:
                      serializer.Serialize(writer, "CA");
                      return;
                  case Landescode.Cc:
                      serializer.Serialize(writer, "CC");
                      return;
                  case Landescode.Cd:
                      serializer.Serialize(writer, "CD");
                      return;
                  case Landescode.Cf:
                      serializer.Serialize(writer, "CF");
                      return;
                  case Landescode.Cg:
                      serializer.Serialize(writer, "CG");
                      return;
                  case Landescode.Ch:
                      serializer.Serialize(writer, "CH");
                      return;
                  case Landescode.Ci:
                      serializer.Serialize(writer, "CI");
                      return;
                  case Landescode.Ck:
                      serializer.Serialize(writer, "CK");
                      return;
                  case Landescode.Cl:
                      serializer.Serialize(writer, "CL");
                      return;
                  case Landescode.Cm:
                      serializer.Serialize(writer, "CM");
                      return;
                  case Landescode.Cn:
                      serializer.Serialize(writer, "CN");
                      return;
                  case Landescode.Co:
                      serializer.Serialize(writer, "CO");
                      return;
                  case Landescode.Cr:
                      serializer.Serialize(writer, "CR");
                      return;
                  case Landescode.Cu:
                      serializer.Serialize(writer, "CU");
                      return;
                  case Landescode.Cv:
                      serializer.Serialize(writer, "CV");
                      return;
                  case Landescode.Cw:
                      serializer.Serialize(writer, "CW");
                      return;
                  case Landescode.Cx:
                      serializer.Serialize(writer, "CX");
                      return;
                  case Landescode.Cy:
                      serializer.Serialize(writer, "CY");
                      return;
                  case Landescode.Cz:
                      serializer.Serialize(writer, "CZ");
                      return;
                  case Landescode.De:
                      serializer.Serialize(writer, "DE");
                      return;
                  case Landescode.Dj:
                      serializer.Serialize(writer, "DJ");
                      return;
                  case Landescode.Dk:
                      serializer.Serialize(writer, "DK");
                      return;
                  case Landescode.Dm:
                      serializer.Serialize(writer, "DM");
                      return;
                  case Landescode.Do:
                      serializer.Serialize(writer, "DO");
                      return;
                  case Landescode.Dz:
                      serializer.Serialize(writer, "DZ");
                      return;
                  case Landescode.Ec:
                      serializer.Serialize(writer, "EC");
                      return;
                  case Landescode.Ee:
                      serializer.Serialize(writer, "EE");
                      return;
                  case Landescode.Eg:
                      serializer.Serialize(writer, "EG");
                      return;
                  case Landescode.Eh:
                      serializer.Serialize(writer, "EH");
                      return;
                  case Landescode.Er:
                      serializer.Serialize(writer, "ER");
                      return;
                  case Landescode.Es:
                      serializer.Serialize(writer, "ES");
                      return;
                  case Landescode.Et:
                      serializer.Serialize(writer, "ET");
                      return;
                  case Landescode.Fi:
                      serializer.Serialize(writer, "FI");
                      return;
                  case Landescode.Fj:
                      serializer.Serialize(writer, "FJ");
                      return;
                  case Landescode.Fk:
                      serializer.Serialize(writer, "FK");
                      return;
                  case Landescode.Fm:
                      serializer.Serialize(writer, "FM");
                      return;
                  case Landescode.Fo:
                      serializer.Serialize(writer, "FO");
                      return;
                  case Landescode.Fr:
                      serializer.Serialize(writer, "FR");
                      return;
                  case Landescode.Ga:
                      serializer.Serialize(writer, "GA");
                      return;
                  case Landescode.Gb:
                      serializer.Serialize(writer, "GB");
                      return;
                  case Landescode.Gd:
                      serializer.Serialize(writer, "GD");
                      return;
                  case Landescode.Ge:
                      serializer.Serialize(writer, "GE");
                      return;
                  case Landescode.Gf:
                      serializer.Serialize(writer, "GF");
                      return;
                  case Landescode.Gg:
                      serializer.Serialize(writer, "GG");
                      return;
                  case Landescode.Gh:
                      serializer.Serialize(writer, "GH");
                      return;
                  case Landescode.Gi:
                      serializer.Serialize(writer, "GI");
                      return;
                  case Landescode.Gl:
                      serializer.Serialize(writer, "GL");
                      return;
                  case Landescode.Gm:
                      serializer.Serialize(writer, "GM");
                      return;
                  case Landescode.Gn:
                      serializer.Serialize(writer, "GN");
                      return;
                  case Landescode.Gp:
                      serializer.Serialize(writer, "GP");
                      return;
                  case Landescode.Gq:
                      serializer.Serialize(writer, "GQ");
                      return;
                  case Landescode.Gr:
                      serializer.Serialize(writer, "GR");
                      return;
                  case Landescode.Gs:
                      serializer.Serialize(writer, "GS");
                      return;
                  case Landescode.Gt:
                      serializer.Serialize(writer, "GT");
                      return;
                  case Landescode.Gu:
                      serializer.Serialize(writer, "GU");
                      return;
                  case Landescode.Gw:
                      serializer.Serialize(writer, "GW");
                      return;
                  case Landescode.Gy:
                      serializer.Serialize(writer, "GY");
                      return;
                  case Landescode.Hk:
                      serializer.Serialize(writer, "HK");
                      return;
                  case Landescode.Hm:
                      serializer.Serialize(writer, "HM");
                      return;
                  case Landescode.Hn:
                      serializer.Serialize(writer, "HN");
                      return;
                  case Landescode.Hr:
                      serializer.Serialize(writer, "HR");
                      return;
                  case Landescode.Ht:
                      serializer.Serialize(writer, "HT");
                      return;
                  case Landescode.Hu:
                      serializer.Serialize(writer, "HU");
                      return;
                  case Landescode.Id:
                      serializer.Serialize(writer, "ID");
                      return;
                  case Landescode.Ie:
                      serializer.Serialize(writer, "IE");
                      return;
                  case Landescode.Il:
                      serializer.Serialize(writer, "IL");
                      return;
                  case Landescode.Im:
                      serializer.Serialize(writer, "IM");
                      return;
                  case Landescode.In:
                      serializer.Serialize(writer, "IN");
                      return;
                  case Landescode.Io:
                      serializer.Serialize(writer, "IO");
                      return;
                  case Landescode.Iq:
                      serializer.Serialize(writer, "IQ");
                      return;
                  case Landescode.Ir:
                      serializer.Serialize(writer, "IR");
                      return;
                  case Landescode.Is:
                      serializer.Serialize(writer, "IS");
                      return;
                  case Landescode.It:
                      serializer.Serialize(writer, "IT");
                      return;
                  case Landescode.Je:
                      serializer.Serialize(writer, "JE");
                      return;
                  case Landescode.Jm:
                      serializer.Serialize(writer, "JM");
                      return;
                  case Landescode.Jo:
                      serializer.Serialize(writer, "JO");
                      return;
                  case Landescode.Jp:
                      serializer.Serialize(writer, "JP");
                      return;
                  case Landescode.Ke:
                      serializer.Serialize(writer, "KE");
                      return;
                  case Landescode.Kg:
                      serializer.Serialize(writer, "KG");
                      return;
                  case Landescode.Kh:
                      serializer.Serialize(writer, "KH");
                      return;
                  case Landescode.Ki:
                      serializer.Serialize(writer, "KI");
                      return;
                  case Landescode.Km:
                      serializer.Serialize(writer, "KM");
                      return;
                  case Landescode.Kn:
                      serializer.Serialize(writer, "KN");
                      return;
                  case Landescode.Kp:
                      serializer.Serialize(writer, "KP");
                      return;
                  case Landescode.Kr:
                      serializer.Serialize(writer, "KR");
                      return;
                  case Landescode.Kw:
                      serializer.Serialize(writer, "KW");
                      return;
                  case Landescode.Ky:
                      serializer.Serialize(writer, "KY");
                      return;
                  case Landescode.Kz:
                      serializer.Serialize(writer, "KZ");
                      return;
                  case Landescode.La:
                      serializer.Serialize(writer, "LA");
                      return;
                  case Landescode.Lb:
                      serializer.Serialize(writer, "LB");
                      return;
                  case Landescode.Lc:
                      serializer.Serialize(writer, "LC");
                      return;
                  case Landescode.Li:
                      serializer.Serialize(writer, "LI");
                      return;
                  case Landescode.Lk:
                      serializer.Serialize(writer, "LK");
                      return;
                  case Landescode.Lr:
                      serializer.Serialize(writer, "LR");
                      return;
                  case Landescode.Ls:
                      serializer.Serialize(writer, "LS");
                      return;
                  case Landescode.Lt:
                      serializer.Serialize(writer, "LT");
                      return;
                  case Landescode.Lu:
                      serializer.Serialize(writer, "LU");
                      return;
                  case Landescode.Lv:
                      serializer.Serialize(writer, "LV");
                      return;
                  case Landescode.Ly:
                      serializer.Serialize(writer, "LY");
                      return;
                  case Landescode.Ma:
                      serializer.Serialize(writer, "MA");
                      return;
                  case Landescode.Mc:
                      serializer.Serialize(writer, "MC");
                      return;
                  case Landescode.Md:
                      serializer.Serialize(writer, "MD");
                      return;
                  case Landescode.Me:
                      serializer.Serialize(writer, "ME");
                      return;
                  case Landescode.Mf:
                      serializer.Serialize(writer, "MF");
                      return;
                  case Landescode.Mg:
                      serializer.Serialize(writer, "MG");
                      return;
                  case Landescode.Mh:
                      serializer.Serialize(writer, "MH");
                      return;
                  case Landescode.Mk:
                      serializer.Serialize(writer, "MK");
                      return;
                  case Landescode.Ml:
                      serializer.Serialize(writer, "ML");
                      return;
                  case Landescode.Mm:
                      serializer.Serialize(writer, "MM");
                      return;
                  case Landescode.Mn:
                      serializer.Serialize(writer, "MN");
                      return;
                  case Landescode.Mo:
                      serializer.Serialize(writer, "MO");
                      return;
                  case Landescode.Mp:
                      serializer.Serialize(writer, "MP");
                      return;
                  case Landescode.Mq:
                      serializer.Serialize(writer, "MQ");
                      return;
                  case Landescode.Mr:
                      serializer.Serialize(writer, "MR");
                      return;
                  case Landescode.Ms:
                      serializer.Serialize(writer, "MS");
                      return;
                  case Landescode.Mt:
                      serializer.Serialize(writer, "MT");
                      return;
                  case Landescode.Mu:
                      serializer.Serialize(writer, "MU");
                      return;
                  case Landescode.Mv:
                      serializer.Serialize(writer, "MV");
                      return;
                  case Landescode.Mw:
                      serializer.Serialize(writer, "MW");
                      return;
                  case Landescode.Mx:
                      serializer.Serialize(writer, "MX");
                      return;
                  case Landescode.My:
                      serializer.Serialize(writer, "MY");
                      return;
                  case Landescode.Mz:
                      serializer.Serialize(writer, "MZ");
                      return;
                  case Landescode.Na:
                      serializer.Serialize(writer, "NA");
                      return;
                  case Landescode.Nc:
                      serializer.Serialize(writer, "NC");
                      return;
                  case Landescode.Ne:
                      serializer.Serialize(writer, "NE");
                      return;
                  case Landescode.Nf:
                      serializer.Serialize(writer, "NF");
                      return;
                  case Landescode.Ng:
                      serializer.Serialize(writer, "NG");
                      return;
                  case Landescode.Ni:
                      serializer.Serialize(writer, "NI");
                      return;
                  case Landescode.Nl:
                      serializer.Serialize(writer, "NL");
                      return;
                  case Landescode.No:
                      serializer.Serialize(writer, "NO");
                      return;
                  case Landescode.Np:
                      serializer.Serialize(writer, "NP");
                      return;
                  case Landescode.Nr:
                      serializer.Serialize(writer, "NR");
                      return;
                  case Landescode.Nu:
                      serializer.Serialize(writer, "NU");
                      return;
                  case Landescode.Nz:
                      serializer.Serialize(writer, "NZ");
                      return;
                  case Landescode.Om:
                      serializer.Serialize(writer, "OM");
                      return;
                  case Landescode.Pa:
                      serializer.Serialize(writer, "PA");
                      return;
                  case Landescode.Pe:
                      serializer.Serialize(writer, "PE");
                      return;
                  case Landescode.Pf:
                      serializer.Serialize(writer, "PF");
                      return;
                  case Landescode.Pg:
                      serializer.Serialize(writer, "PG");
                      return;
                  case Landescode.Ph:
                      serializer.Serialize(writer, "PH");
                      return;
                  case Landescode.Pk:
                      serializer.Serialize(writer, "PK");
                      return;
                  case Landescode.Pl:
                      serializer.Serialize(writer, "PL");
                      return;
                  case Landescode.Pm:
                      serializer.Serialize(writer, "PM");
                      return;
                  case Landescode.Pn:
                      serializer.Serialize(writer, "PN");
                      return;
                  case Landescode.Pr:
                      serializer.Serialize(writer, "PR");
                      return;
                  case Landescode.Ps:
                      serializer.Serialize(writer, "PS");
                      return;
                  case Landescode.Pt:
                      serializer.Serialize(writer, "PT");
                      return;
                  case Landescode.Pw:
                      serializer.Serialize(writer, "PW");
                      return;
                  case Landescode.Py:
                      serializer.Serialize(writer, "PY");
                      return;
                  case Landescode.Qa:
                      serializer.Serialize(writer, "QA");
                      return;
                  case Landescode.Re:
                      serializer.Serialize(writer, "RE");
                      return;
                  case Landescode.Ro:
                      serializer.Serialize(writer, "RO");
                      return;
                  case Landescode.Rs:
                      serializer.Serialize(writer, "RS");
                      return;
                  case Landescode.Ru:
                      serializer.Serialize(writer, "RU");
                      return;
                  case Landescode.Rw:
                      serializer.Serialize(writer, "RW");
                      return;
                  case Landescode.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case Landescode.Sb:
                      serializer.Serialize(writer, "SB");
                      return;
                  case Landescode.Sc:
                      serializer.Serialize(writer, "SC");
                      return;
                  case Landescode.Sd:
                      serializer.Serialize(writer, "SD");
                      return;
                  case Landescode.Se:
                      serializer.Serialize(writer, "SE");
                      return;
                  case Landescode.Sg:
                      serializer.Serialize(writer, "SG");
                      return;
                  case Landescode.Sh:
                      serializer.Serialize(writer, "SH");
                      return;
                  case Landescode.Si:
                      serializer.Serialize(writer, "SI");
                      return;
                  case Landescode.Sj:
                      serializer.Serialize(writer, "SJ");
                      return;
                  case Landescode.Sk:
                      serializer.Serialize(writer, "SK");
                      return;
                  case Landescode.Sl:
                      serializer.Serialize(writer, "SL");
                      return;
                  case Landescode.Sm:
                      serializer.Serialize(writer, "SM");
                      return;
                  case Landescode.Sn:
                      serializer.Serialize(writer, "SN");
                      return;
                  case Landescode.So:
                      serializer.Serialize(writer, "SO");
                      return;
                  case Landescode.Sr:
                      serializer.Serialize(writer, "SR");
                      return;
                  case Landescode.Ss:
                      serializer.Serialize(writer, "SS");
                      return;
                  case Landescode.St:
                      serializer.Serialize(writer, "ST");
                      return;
                  case Landescode.Sv:
                      serializer.Serialize(writer, "SV");
                      return;
                  case Landescode.Sx:
                      serializer.Serialize(writer, "SX");
                      return;
                  case Landescode.Sy:
                      serializer.Serialize(writer, "SY");
                      return;
                  case Landescode.Sz:
                      serializer.Serialize(writer, "SZ");
                      return;
                  case Landescode.Tc:
                      serializer.Serialize(writer, "TC");
                      return;
                  case Landescode.Td:
                      serializer.Serialize(writer, "TD");
                      return;
                  case Landescode.Tf:
                      serializer.Serialize(writer, "TF");
                      return;
                  case Landescode.Tg:
                      serializer.Serialize(writer, "TG");
                      return;
                  case Landescode.Th:
                      serializer.Serialize(writer, "TH");
                      return;
                  case Landescode.Tj:
                      serializer.Serialize(writer, "TJ");
                      return;
                  case Landescode.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case Landescode.Tl:
                      serializer.Serialize(writer, "TL");
                      return;
                  case Landescode.Tm:
                      serializer.Serialize(writer, "TM");
                      return;
                  case Landescode.Tn:
                      serializer.Serialize(writer, "TN");
                      return;
                  case Landescode.To:
                      serializer.Serialize(writer, "TO");
                      return;
                  case Landescode.Tr:
                      serializer.Serialize(writer, "TR");
                      return;
                  case Landescode.Tt:
                      serializer.Serialize(writer, "TT");
                      return;
                  case Landescode.Tv:
                      serializer.Serialize(writer, "TV");
                      return;
                  case Landescode.Tw:
                      serializer.Serialize(writer, "TW");
                      return;
                  case Landescode.Tz:
                      serializer.Serialize(writer, "TZ");
                      return;
                  case Landescode.Ua:
                      serializer.Serialize(writer, "UA");
                      return;
                  case Landescode.Ug:
                      serializer.Serialize(writer, "UG");
                      return;
                  case Landescode.Um:
                      serializer.Serialize(writer, "UM");
                      return;
                  case Landescode.Us:
                      serializer.Serialize(writer, "US");
                      return;
                  case Landescode.Uy:
                      serializer.Serialize(writer, "UY");
                      return;
                  case Landescode.Uz:
                      serializer.Serialize(writer, "UZ");
                      return;
                  case Landescode.Va:
                      serializer.Serialize(writer, "VA");
                      return;
                  case Landescode.Vc:
                      serializer.Serialize(writer, "VC");
                      return;
                  case Landescode.Ve:
                      serializer.Serialize(writer, "VE");
                      return;
                  case Landescode.Vg:
                      serializer.Serialize(writer, "VG");
                      return;
                  case Landescode.Vi:
                      serializer.Serialize(writer, "VI");
                      return;
                  case Landescode.Vn:
                      serializer.Serialize(writer, "VN");
                      return;
                  case Landescode.Vu:
                      serializer.Serialize(writer, "VU");
                      return;
                  case Landescode.Wf:
                      serializer.Serialize(writer, "WF");
                      return;
                  case Landescode.Ws:
                      serializer.Serialize(writer, "WS");
                      return;
                  case Landescode.Xk:
                      serializer.Serialize(writer, "XK");
                      return;
                  case Landescode.Ye:
                      serializer.Serialize(writer, "YE");
                      return;
                  case Landescode.Yt:
                      serializer.Serialize(writer, "YT");
                      return;
                  case Landescode.Za:
                      serializer.Serialize(writer, "ZA");
                      return;
                  case Landescode.Zm:
                      serializer.Serialize(writer, "ZM");
                      return;
                  case Landescode.Zw:
                      serializer.Serialize(writer, "ZW");
                      return;
              }
              throw new Exception("Cannot marshal type Landescode");
          }
  
          public static readonly LandescodeConverter Singleton = new LandescodeConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_cli_main[cli_enum\AbgabeArt.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var abgabeArt = AbgabeArt.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Art der Konzessionsabgabe
      /// </summary>
      public enum AbgabeArtEnum { Kas, Sa, Sas, Ta, Tas, Tk, Tks, Ts, Tss };
  
      public class AbgabeArt
      {
          public static AbgabeArtEnum FromJson(string json) => JsonConvert.DeserializeObject<AbgabeArtEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this AbgabeArtEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  AbgabeArtEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class AbgabeArtEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(AbgabeArtEnum) || t == typeof(AbgabeArtEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "KAS":
                      return AbgabeArtEnum.Kas;
                  case "SA":
                      return AbgabeArtEnum.Sa;
                  case "SAS":
                      return AbgabeArtEnum.Sas;
                  case "TA":
                      return AbgabeArtEnum.Ta;
                  case "TAS":
                      return AbgabeArtEnum.Tas;
                  case "TK":
                      return AbgabeArtEnum.Tk;
                  case "TKS":
                      return AbgabeArtEnum.Tks;
                  case "TS":
                      return AbgabeArtEnum.Ts;
                  case "TSS":
                      return AbgabeArtEnum.Tss;
              }
              throw new Exception("Cannot unmarshal type AbgabeArtEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (AbgabeArtEnum)untypedValue;
              switch (value)
              {
                  case AbgabeArtEnum.Kas:
                      serializer.Serialize(writer, "KAS");
                      return;
                  case AbgabeArtEnum.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case AbgabeArtEnum.Sas:
                      serializer.Serialize(writer, "SAS");
                      return;
                  case AbgabeArtEnum.Ta:
                      serializer.Serialize(writer, "TA");
                      return;
                  case AbgabeArtEnum.Tas:
                      serializer.Serialize(writer, "TAS");
                      return;
                  case AbgabeArtEnum.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case AbgabeArtEnum.Tks:
                      serializer.Serialize(writer, "TKS");
                      return;
                  case AbgabeArtEnum.Ts:
                      serializer.Serialize(writer, "TS");
                      return;
                  case AbgabeArtEnum.Tss:
                      serializer.Serialize(writer, "TSS");
                      return;
              }
              throw new Exception("Cannot marshal type AbgabeArtEnum");
          }
  
          public static readonly AbgabeArtEnumConverter Singleton = new AbgabeArtEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_cli_main[cli_enum\Landescode.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var landescode = Landescode.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      public enum LandescodeEnum { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };
  
      public class Landescode
      {
          public static LandescodeEnum FromJson(string json) => JsonConvert.DeserializeObject<LandescodeEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this LandescodeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  LandescodeEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class LandescodeEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(LandescodeEnum) || t == typeof(LandescodeEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "AD":
                      return LandescodeEnum.Ad;
                  case "AE":
                      return LandescodeEnum.Ae;
                  case "AF":
                      return LandescodeEnum.Af;
                  case "AG":
                      return LandescodeEnum.Ag;
                  case "AI":
                      return LandescodeEnum.Ai;
                  case "AL":
                      return LandescodeEnum.Al;
                  case "AM":
                      return LandescodeEnum.Am;
                  case "AO":
                      return LandescodeEnum.Ao;
                  case "AQ":
                      return LandescodeEnum.Aq;
                  case "AR":
                      return LandescodeEnum.Ar;
                  case "AS":
                      return LandescodeEnum.As;
                  case "AT":
                      return LandescodeEnum.At;
                  case "AU":
                      return LandescodeEnum.Au;
                  case "AW":
                      return LandescodeEnum.Aw;
                  case "AX":
                      return LandescodeEnum.Ax;
                  case "AZ":
                      return LandescodeEnum.Az;
                  case "BA":
                      return LandescodeEnum.Ba;
                  case "BB":
                      return LandescodeEnum.Bb;
                  case "BD":
                      return LandescodeEnum.Bd;
                  case "BE":
                      return LandescodeEnum.Be;
                  case "BF":
                      return LandescodeEnum.Bf;
                  case "BG":
                      return LandescodeEnum.Bg;
                  case "BH":
                      return LandescodeEnum.Bh;
                  case "BI":
                      return LandescodeEnum.Bi;
                  case "BJ":
                      return LandescodeEnum.Bj;
                  case "BL":
                      return LandescodeEnum.Bl;
                  case "BM":
                      return LandescodeEnum.Bm;
                  case "BN":
                      return LandescodeEnum.Bn;
                  case "BO":
                      return LandescodeEnum.Bo;
                  case "BQ":
                      return LandescodeEnum.Bq;
                  case "BR":
                      return LandescodeEnum.Br;
                  case "BS":
                      return LandescodeEnum.Bs;
                  case "BT":
                      return LandescodeEnum.Bt;
                  case "BV":
                      return LandescodeEnum.Bv;
                  case "BW":
                      return LandescodeEnum.Bw;
                  case "BY":
                      return LandescodeEnum.By;
                  case "BZ":
                      return LandescodeEnum.Bz;
                  case "CA":
                      return LandescodeEnum.Ca;
                  case "CC":
                      return LandescodeEnum.Cc;
                  case "CD":
                      return LandescodeEnum.Cd;
                  case "CF":
                      return LandescodeEnum.Cf;
                  case "CG":
                      return LandescodeEnum.Cg;
                  case "CH":
                      return LandescodeEnum.Ch;
                  case "CI":
                      return LandescodeEnum.Ci;
                  case "CK":
                      return LandescodeEnum.Ck;
                  case "CL":
                      return LandescodeEnum.Cl;
                  case "CM":
                      return LandescodeEnum.Cm;
                  case "CN":
                      return LandescodeEnum.Cn;
                  case "CO":
                      return LandescodeEnum.Co;
                  case "CR":
                      return LandescodeEnum.Cr;
                  case "CU":
                      return LandescodeEnum.Cu;
                  case "CV":
                      return LandescodeEnum.Cv;
                  case "CW":
                      return LandescodeEnum.Cw;
                  case "CX":
                      return LandescodeEnum.Cx;
                  case "CY":
                      return LandescodeEnum.Cy;
                  case "CZ":
                      return LandescodeEnum.Cz;
                  case "DE":
                      return LandescodeEnum.De;
                  case "DJ":
                      return LandescodeEnum.Dj;
                  case "DK":
                      return LandescodeEnum.Dk;
                  case "DM":
                      return LandescodeEnum.Dm;
                  case "DO":
                      return LandescodeEnum.Do;
                  case "DZ":
                      return LandescodeEnum.Dz;
                  case "EC":
                      return LandescodeEnum.Ec;
                  case "EE":
                      return LandescodeEnum.Ee;
                  case "EG":
                      return LandescodeEnum.Eg;
                  case "EH":
                      return LandescodeEnum.Eh;
                  case "ER":
                      return LandescodeEnum.Er;
                  case "ES":
                      return LandescodeEnum.Es;
                  case "ET":
                      return LandescodeEnum.Et;
                  case "FI":
                      return LandescodeEnum.Fi;
                  case "FJ":
                      return LandescodeEnum.Fj;
                  case "FK":
                      return LandescodeEnum.Fk;
                  case "FM":
                      return LandescodeEnum.Fm;
                  case "FO":
                      return LandescodeEnum.Fo;
                  case "FR":
                      return LandescodeEnum.Fr;
                  case "GA":
                      return LandescodeEnum.Ga;
                  case "GB":
                      return LandescodeEnum.Gb;
                  case "GD":
                      return LandescodeEnum.Gd;
                  case "GE":
                      return LandescodeEnum.Ge;
                  case "GF":
                      return LandescodeEnum.Gf;
                  case "GG":
                      return LandescodeEnum.Gg;
                  case "GH":
                      return LandescodeEnum.Gh;
                  case "GI":
                      return LandescodeEnum.Gi;
                  case "GL":
                      return LandescodeEnum.Gl;
                  case "GM":
                      return LandescodeEnum.Gm;
                  case "GN":
                      return LandescodeEnum.Gn;
                  case "GP":
                      return LandescodeEnum.Gp;
                  case "GQ":
                      return LandescodeEnum.Gq;
                  case "GR":
                      return LandescodeEnum.Gr;
                  case "GS":
                      return LandescodeEnum.Gs;
                  case "GT":
                      return LandescodeEnum.Gt;
                  case "GU":
                      return LandescodeEnum.Gu;
                  case "GW":
                      return LandescodeEnum.Gw;
                  case "GY":
                      return LandescodeEnum.Gy;
                  case "HK":
                      return LandescodeEnum.Hk;
                  case "HM":
                      return LandescodeEnum.Hm;
                  case "HN":
                      return LandescodeEnum.Hn;
                  case "HR":
                      return LandescodeEnum.Hr;
                  case "HT":
                      return LandescodeEnum.Ht;
                  case "HU":
                      return LandescodeEnum.Hu;
                  case "ID":
                      return LandescodeEnum.Id;
                  case "IE":
                      return LandescodeEnum.Ie;
                  case "IL":
                      return LandescodeEnum.Il;
                  case "IM":
                      return LandescodeEnum.Im;
                  case "IN":
                      return LandescodeEnum.In;
                  case "IO":
                      return LandescodeEnum.Io;
                  case "IQ":
                      return LandescodeEnum.Iq;
                  case "IR":
                      return LandescodeEnum.Ir;
                  case "IS":
                      return LandescodeEnum.Is;
                  case "IT":
                      return LandescodeEnum.It;
                  case "JE":
                      return LandescodeEnum.Je;
                  case "JM":
                      return LandescodeEnum.Jm;
                  case "JO":
                      return LandescodeEnum.Jo;
                  case "JP":
                      return LandescodeEnum.Jp;
                  case "KE":
                      return LandescodeEnum.Ke;
                  case "KG":
                      return LandescodeEnum.Kg;
                  case "KH":
                      return LandescodeEnum.Kh;
                  case "KI":
                      return LandescodeEnum.Ki;
                  case "KM":
                      return LandescodeEnum.Km;
                  case "KN":
                      return LandescodeEnum.Kn;
                  case "KP":
                      return LandescodeEnum.Kp;
                  case "KR":
                      return LandescodeEnum.Kr;
                  case "KW":
                      return LandescodeEnum.Kw;
                  case "KY":
                      return LandescodeEnum.Ky;
                  case "KZ":
                      return LandescodeEnum.Kz;
                  case "LA":
                      return LandescodeEnum.La;
                  case "LB":
                      return LandescodeEnum.Lb;
                  case "LC":
                      return LandescodeEnum.Lc;
                  case "LI":
                      return LandescodeEnum.Li;
                  case "LK":
                      return LandescodeEnum.Lk;
                  case "LR":
                      return LandescodeEnum.Lr;
                  case "LS":
                      return LandescodeEnum.Ls;
                  case "LT":
                      return LandescodeEnum.Lt;
                  case "LU":
                      return LandescodeEnum.Lu;
                  case "LV":
                      return LandescodeEnum.Lv;
                  case "LY":
                      return LandescodeEnum.Ly;
                  case "MA":
                      return LandescodeEnum.Ma;
                  case "MC":
                      return LandescodeEnum.Mc;
                  case "MD":
                      return LandescodeEnum.Md;
                  case "ME":
                      return LandescodeEnum.Me;
                  case "MF":
                      return LandescodeEnum.Mf;
                  case "MG":
                      return LandescodeEnum.Mg;
                  case "MH":
                      return LandescodeEnum.Mh;
                  case "MK":
                      return LandescodeEnum.Mk;
                  case "ML":
                      return LandescodeEnum.Ml;
                  case "MM":
                      return LandescodeEnum.Mm;
                  case "MN":
                      return LandescodeEnum.Mn;
                  case "MO":
                      return LandescodeEnum.Mo;
                  case "MP":
                      return LandescodeEnum.Mp;
                  case "MQ":
                      return LandescodeEnum.Mq;
                  case "MR":
                      return LandescodeEnum.Mr;
                  case "MS":
                      return LandescodeEnum.Ms;
                  case "MT":
                      return LandescodeEnum.Mt;
                  case "MU":
                      return LandescodeEnum.Mu;
                  case "MV":
                      return LandescodeEnum.Mv;
                  case "MW":
                      return LandescodeEnum.Mw;
                  case "MX":
                      return LandescodeEnum.Mx;
                  case "MY":
                      return LandescodeEnum.My;
                  case "MZ":
                      return LandescodeEnum.Mz;
                  case "NA":
                      return LandescodeEnum.Na;
                  case "NC":
                      return LandescodeEnum.Nc;
                  case "NE":
                      return LandescodeEnum.Ne;
                  case "NF":
                      return LandescodeEnum.Nf;
                  case "NG":
                      return LandescodeEnum.Ng;
                  case "NI":
                      return LandescodeEnum.Ni;
                  case "NL":
                      return LandescodeEnum.Nl;
                  case "NO":
                      return LandescodeEnum.No;
                  case "NP":
                      return LandescodeEnum.Np;
                  case "NR":
                      return LandescodeEnum.Nr;
                  case "NU":
                      return LandescodeEnum.Nu;
                  case "NZ":
                      return LandescodeEnum.Nz;
                  case "OM":
                      return LandescodeEnum.Om;
                  case "PA":
                      return LandescodeEnum.Pa;
                  case "PE":
                      return LandescodeEnum.Pe;
                  case "PF":
                      return LandescodeEnum.Pf;
                  case "PG":
                      return LandescodeEnum.Pg;
                  case "PH":
                      return LandescodeEnum.Ph;
                  case "PK":
                      return LandescodeEnum.Pk;
                  case "PL":
                      return LandescodeEnum.Pl;
                  case "PM":
                      return LandescodeEnum.Pm;
                  case "PN":
                      return LandescodeEnum.Pn;
                  case "PR":
                      return LandescodeEnum.Pr;
                  case "PS":
                      return LandescodeEnum.Ps;
                  case "PT":
                      return LandescodeEnum.Pt;
                  case "PW":
                      return LandescodeEnum.Pw;
                  case "PY":
                      return LandescodeEnum.Py;
                  case "QA":
                      return LandescodeEnum.Qa;
                  case "RE":
                      return LandescodeEnum.Re;
                  case "RO":
                      return LandescodeEnum.Ro;
                  case "RS":
                      return LandescodeEnum.Rs;
                  case "RU":
                      return LandescodeEnum.Ru;
                  case "RW":
                      return LandescodeEnum.Rw;
                  case "SA":
                      return LandescodeEnum.Sa;
                  case "SB":
                      return LandescodeEnum.Sb;
                  case "SC":
                      return LandescodeEnum.Sc;
                  case "SD":
                      return LandescodeEnum.Sd;
                  case "SE":
                      return LandescodeEnum.Se;
                  case "SG":
                      return LandescodeEnum.Sg;
                  case "SH":
                      return LandescodeEnum.Sh;
                  case "SI":
                      return LandescodeEnum.Si;
                  case "SJ":
                      return LandescodeEnum.Sj;
                  case "SK":
                      return LandescodeEnum.Sk;
                  case "SL":
                      return LandescodeEnum.Sl;
                  case "SM":
                      return LandescodeEnum.Sm;
                  case "SN":
                      return LandescodeEnum.Sn;
                  case "SO":
                      return LandescodeEnum.So;
                  case "SR":
                      return LandescodeEnum.Sr;
                  case "SS":
                      return LandescodeEnum.Ss;
                  case "ST":
                      return LandescodeEnum.St;
                  case "SV":
                      return LandescodeEnum.Sv;
                  case "SX":
                      return LandescodeEnum.Sx;
                  case "SY":
                      return LandescodeEnum.Sy;
                  case "SZ":
                      return LandescodeEnum.Sz;
                  case "TC":
                      return LandescodeEnum.Tc;
                  case "TD":
                      return LandescodeEnum.Td;
                  case "TF":
                      return LandescodeEnum.Tf;
                  case "TG":
                      return LandescodeEnum.Tg;
                  case "TH":
                      return LandescodeEnum.Th;
                  case "TJ":
                      return LandescodeEnum.Tj;
                  case "TK":
                      return LandescodeEnum.Tk;
                  case "TL":
                      return LandescodeEnum.Tl;
                  case "TM":
                      return LandescodeEnum.Tm;
                  case "TN":
                      return LandescodeEnum.Tn;
                  case "TO":
                      return LandescodeEnum.To;
                  case "TR":
                      return LandescodeEnum.Tr;
                  case "TT":
                      return LandescodeEnum.Tt;
                  case "TV":
                      return LandescodeEnum.Tv;
                  case "TW":
                      return LandescodeEnum.Tw;
                  case "TZ":
                      return LandescodeEnum.Tz;
                  case "UA":
                      return LandescodeEnum.Ua;
                  case "UG":
                      return LandescodeEnum.Ug;
                  case "UM":
                      return LandescodeEnum.Um;
                  case "US":
                      return LandescodeEnum.Us;
                  case "UY":
                      return LandescodeEnum.Uy;
                  case "UZ":
                      return LandescodeEnum.Uz;
                  case "VA":
                      return LandescodeEnum.Va;
                  case "VC":
                      return LandescodeEnum.Vc;
                  case "VE":
                      return LandescodeEnum.Ve;
                  case "VG":
                      return LandescodeEnum.Vg;
                  case "VI":
                      return LandescodeEnum.Vi;
                  case "VN":
                      return LandescodeEnum.Vn;
                  case "VU":
                      return LandescodeEnum.Vu;
                  case "WF":
                      return LandescodeEnum.Wf;
                  case "WS":
                      return LandescodeEnum.Ws;
                  case "XK":
                      return LandescodeEnum.Xk;
                  case "YE":
                      return LandescodeEnum.Ye;
                  case "YT":
                      return LandescodeEnum.Yt;
                  case "ZA":
                      return LandescodeEnum.Za;
                  case "ZM":
                      return LandescodeEnum.Zm;
                  case "ZW":
                      return LandescodeEnum.Zw;
              }
              throw new Exception("Cannot unmarshal type LandescodeEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (LandescodeEnum)untypedValue;
              switch (value)
              {
                  case LandescodeEnum.Ad:
                      serializer.Serialize(writer, "AD");
                      return;
                  case LandescodeEnum.Ae:
                      serializer.Serialize(writer, "AE");
                      return;
                  case LandescodeEnum.Af:
                      serializer.Serialize(writer, "AF");
                      return;
                  case LandescodeEnum.Ag:
                      serializer.Serialize(writer, "AG");
                      return;
                  case LandescodeEnum.Ai:
                      serializer.Serialize(writer, "AI");
                      return;
                  case LandescodeEnum.Al:
                      serializer.Serialize(writer, "AL");
                      return;
                  case LandescodeEnum.Am:
                      serializer.Serialize(writer, "AM");
                      return;
                  case LandescodeEnum.Ao:
                      serializer.Serialize(writer, "AO");
                      return;
                  case LandescodeEnum.Aq:
                      serializer.Serialize(writer, "AQ");
                      return;
                  case LandescodeEnum.Ar:
                      serializer.Serialize(writer, "AR");
                      return;
                  case LandescodeEnum.As:
                      serializer.Serialize(writer, "AS");
                      return;
                  case LandescodeEnum.At:
                      serializer.Serialize(writer, "AT");
                      return;
                  case LandescodeEnum.Au:
                      serializer.Serialize(writer, "AU");
                      return;
                  case LandescodeEnum.Aw:
                      serializer.Serialize(writer, "AW");
                      return;
                  case LandescodeEnum.Ax:
                      serializer.Serialize(writer, "AX");
                      return;
                  case LandescodeEnum.Az:
                      serializer.Serialize(writer, "AZ");
                      return;
                  case LandescodeEnum.Ba:
                      serializer.Serialize(writer, "BA");
                      return;
                  case LandescodeEnum.Bb:
                      serializer.Serialize(writer, "BB");
                      return;
                  case LandescodeEnum.Bd:
                      serializer.Serialize(writer, "BD");
                      return;
                  case LandescodeEnum.Be:
                      serializer.Serialize(writer, "BE");
                      return;
                  case LandescodeEnum.Bf:
                      serializer.Serialize(writer, "BF");
                      return;
                  case LandescodeEnum.Bg:
                      serializer.Serialize(writer, "BG");
                      return;
                  case LandescodeEnum.Bh:
                      serializer.Serialize(writer, "BH");
                      return;
                  case LandescodeEnum.Bi:
                      serializer.Serialize(writer, "BI");
                      return;
                  case LandescodeEnum.Bj:
                      serializer.Serialize(writer, "BJ");
                      return;
                  case LandescodeEnum.Bl:
                      serializer.Serialize(writer, "BL");
                      return;
                  case LandescodeEnum.Bm:
                      serializer.Serialize(writer, "BM");
                      return;
                  case LandescodeEnum.Bn:
                      serializer.Serialize(writer, "BN");
                      return;
                  case LandescodeEnum.Bo:
                      serializer.Serialize(writer, "BO");
                      return;
                  case LandescodeEnum.Bq:
                      serializer.Serialize(writer, "BQ");
                      return;
                  case LandescodeEnum.Br:
                      serializer.Serialize(writer, "BR");
                      return;
                  case LandescodeEnum.Bs:
                      serializer.Serialize(writer, "BS");
                      return;
                  case LandescodeEnum.Bt:
                      serializer.Serialize(writer, "BT");
                      return;
                  case LandescodeEnum.Bv:
                      serializer.Serialize(writer, "BV");
                      return;
                  case LandescodeEnum.Bw:
                      serializer.Serialize(writer, "BW");
                      return;
                  case LandescodeEnum.By:
                      serializer.Serialize(writer, "BY");
                      return;
                  case LandescodeEnum.Bz:
                      serializer.Serialize(writer, "BZ");
                      return;
                  case LandescodeEnum.Ca:
                      serializer.Serialize(writer, "CA");
                      return;
                  case LandescodeEnum.Cc:
                      serializer.Serialize(writer, "CC");
                      return;
                  case LandescodeEnum.Cd:
                      serializer.Serialize(writer, "CD");
                      return;
                  case LandescodeEnum.Cf:
                      serializer.Serialize(writer, "CF");
                      return;
                  case LandescodeEnum.Cg:
                      serializer.Serialize(writer, "CG");
                      return;
                  case LandescodeEnum.Ch:
                      serializer.Serialize(writer, "CH");
                      return;
                  case LandescodeEnum.Ci:
                      serializer.Serialize(writer, "CI");
                      return;
                  case LandescodeEnum.Ck:
                      serializer.Serialize(writer, "CK");
                      return;
                  case LandescodeEnum.Cl:
                      serializer.Serialize(writer, "CL");
                      return;
                  case LandescodeEnum.Cm:
                      serializer.Serialize(writer, "CM");
                      return;
                  case LandescodeEnum.Cn:
                      serializer.Serialize(writer, "CN");
                      return;
                  case LandescodeEnum.Co:
                      serializer.Serialize(writer, "CO");
                      return;
                  case LandescodeEnum.Cr:
                      serializer.Serialize(writer, "CR");
                      return;
                  case LandescodeEnum.Cu:
                      serializer.Serialize(writer, "CU");
                      return;
                  case LandescodeEnum.Cv:
                      serializer.Serialize(writer, "CV");
                      return;
                  case LandescodeEnum.Cw:
                      serializer.Serialize(writer, "CW");
                      return;
                  case LandescodeEnum.Cx:
                      serializer.Serialize(writer, "CX");
                      return;
                  case LandescodeEnum.Cy:
                      serializer.Serialize(writer, "CY");
                      return;
                  case LandescodeEnum.Cz:
                      serializer.Serialize(writer, "CZ");
                      return;
                  case LandescodeEnum.De:
                      serializer.Serialize(writer, "DE");
                      return;
                  case LandescodeEnum.Dj:
                      serializer.Serialize(writer, "DJ");
                      return;
                  case LandescodeEnum.Dk:
                      serializer.Serialize(writer, "DK");
                      return;
                  case LandescodeEnum.Dm:
                      serializer.Serialize(writer, "DM");
                      return;
                  case LandescodeEnum.Do:
                      serializer.Serialize(writer, "DO");
                      return;
                  case LandescodeEnum.Dz:
                      serializer.Serialize(writer, "DZ");
                      return;
                  case LandescodeEnum.Ec:
                      serializer.Serialize(writer, "EC");
                      return;
                  case LandescodeEnum.Ee:
                      serializer.Serialize(writer, "EE");
                      return;
                  case LandescodeEnum.Eg:
                      serializer.Serialize(writer, "EG");
                      return;
                  case LandescodeEnum.Eh:
                      serializer.Serialize(writer, "EH");
                      return;
                  case LandescodeEnum.Er:
                      serializer.Serialize(writer, "ER");
                      return;
                  case LandescodeEnum.Es:
                      serializer.Serialize(writer, "ES");
                      return;
                  case LandescodeEnum.Et:
                      serializer.Serialize(writer, "ET");
                      return;
                  case LandescodeEnum.Fi:
                      serializer.Serialize(writer, "FI");
                      return;
                  case LandescodeEnum.Fj:
                      serializer.Serialize(writer, "FJ");
                      return;
                  case LandescodeEnum.Fk:
                      serializer.Serialize(writer, "FK");
                      return;
                  case LandescodeEnum.Fm:
                      serializer.Serialize(writer, "FM");
                      return;
                  case LandescodeEnum.Fo:
                      serializer.Serialize(writer, "FO");
                      return;
                  case LandescodeEnum.Fr:
                      serializer.Serialize(writer, "FR");
                      return;
                  case LandescodeEnum.Ga:
                      serializer.Serialize(writer, "GA");
                      return;
                  case LandescodeEnum.Gb:
                      serializer.Serialize(writer, "GB");
                      return;
                  case LandescodeEnum.Gd:
                      serializer.Serialize(writer, "GD");
                      return;
                  case LandescodeEnum.Ge:
                      serializer.Serialize(writer, "GE");
                      return;
                  case LandescodeEnum.Gf:
                      serializer.Serialize(writer, "GF");
                      return;
                  case LandescodeEnum.Gg:
                      serializer.Serialize(writer, "GG");
                      return;
                  case LandescodeEnum.Gh:
                      serializer.Serialize(writer, "GH");
                      return;
                  case LandescodeEnum.Gi:
                      serializer.Serialize(writer, "GI");
                      return;
                  case LandescodeEnum.Gl:
                      serializer.Serialize(writer, "GL");
                      return;
                  case LandescodeEnum.Gm:
                      serializer.Serialize(writer, "GM");
                      return;
                  case LandescodeEnum.Gn:
                      serializer.Serialize(writer, "GN");
                      return;
                  case LandescodeEnum.Gp:
                      serializer.Serialize(writer, "GP");
                      return;
                  case LandescodeEnum.Gq:
                      serializer.Serialize(writer, "GQ");
                      return;
                  case LandescodeEnum.Gr:
                      serializer.Serialize(writer, "GR");
                      return;
                  case LandescodeEnum.Gs:
                      serializer.Serialize(writer, "GS");
                      return;
                  case LandescodeEnum.Gt:
                      serializer.Serialize(writer, "GT");
                      return;
                  case LandescodeEnum.Gu:
                      serializer.Serialize(writer, "GU");
                      return;
                  case LandescodeEnum.Gw:
                      serializer.Serialize(writer, "GW");
                      return;
                  case LandescodeEnum.Gy:
                      serializer.Serialize(writer, "GY");
                      return;
                  case LandescodeEnum.Hk:
                      serializer.Serialize(writer, "HK");
                      return;
                  case LandescodeEnum.Hm:
                      serializer.Serialize(writer, "HM");
                      return;
                  case LandescodeEnum.Hn:
                      serializer.Serialize(writer, "HN");
                      return;
                  case LandescodeEnum.Hr:
                      serializer.Serialize(writer, "HR");
                      return;
                  case LandescodeEnum.Ht:
                      serializer.Serialize(writer, "HT");
                      return;
                  case LandescodeEnum.Hu:
                      serializer.Serialize(writer, "HU");
                      return;
                  case LandescodeEnum.Id:
                      serializer.Serialize(writer, "ID");
                      return;
                  case LandescodeEnum.Ie:
                      serializer.Serialize(writer, "IE");
                      return;
                  case LandescodeEnum.Il:
                      serializer.Serialize(writer, "IL");
                      return;
                  case LandescodeEnum.Im:
                      serializer.Serialize(writer, "IM");
                      return;
                  case LandescodeEnum.In:
                      serializer.Serialize(writer, "IN");
                      return;
                  case LandescodeEnum.Io:
                      serializer.Serialize(writer, "IO");
                      return;
                  case LandescodeEnum.Iq:
                      serializer.Serialize(writer, "IQ");
                      return;
                  case LandescodeEnum.Ir:
                      serializer.Serialize(writer, "IR");
                      return;
                  case LandescodeEnum.Is:
                      serializer.Serialize(writer, "IS");
                      return;
                  case LandescodeEnum.It:
                      serializer.Serialize(writer, "IT");
                      return;
                  case LandescodeEnum.Je:
                      serializer.Serialize(writer, "JE");
                      return;
                  case LandescodeEnum.Jm:
                      serializer.Serialize(writer, "JM");
                      return;
                  case LandescodeEnum.Jo:
                      serializer.Serialize(writer, "JO");
                      return;
                  case LandescodeEnum.Jp:
                      serializer.Serialize(writer, "JP");
                      return;
                  case LandescodeEnum.Ke:
                      serializer.Serialize(writer, "KE");
                      return;
                  case LandescodeEnum.Kg:
                      serializer.Serialize(writer, "KG");
                      return;
                  case LandescodeEnum.Kh:
                      serializer.Serialize(writer, "KH");
                      return;
                  case LandescodeEnum.Ki:
                      serializer.Serialize(writer, "KI");
                      return;
                  case LandescodeEnum.Km:
                      serializer.Serialize(writer, "KM");
                      return;
                  case LandescodeEnum.Kn:
                      serializer.Serialize(writer, "KN");
                      return;
                  case LandescodeEnum.Kp:
                      serializer.Serialize(writer, "KP");
                      return;
                  case LandescodeEnum.Kr:
                      serializer.Serialize(writer, "KR");
                      return;
                  case LandescodeEnum.Kw:
                      serializer.Serialize(writer, "KW");
                      return;
                  case LandescodeEnum.Ky:
                      serializer.Serialize(writer, "KY");
                      return;
                  case LandescodeEnum.Kz:
                      serializer.Serialize(writer, "KZ");
                      return;
                  case LandescodeEnum.La:
                      serializer.Serialize(writer, "LA");
                      return;
                  case LandescodeEnum.Lb:
                      serializer.Serialize(writer, "LB");
                      return;
                  case LandescodeEnum.Lc:
                      serializer.Serialize(writer, "LC");
                      return;
                  case LandescodeEnum.Li:
                      serializer.Serialize(writer, "LI");
                      return;
                  case LandescodeEnum.Lk:
                      serializer.Serialize(writer, "LK");
                      return;
                  case LandescodeEnum.Lr:
                      serializer.Serialize(writer, "LR");
                      return;
                  case LandescodeEnum.Ls:
                      serializer.Serialize(writer, "LS");
                      return;
                  case LandescodeEnum.Lt:
                      serializer.Serialize(writer, "LT");
                      return;
                  case LandescodeEnum.Lu:
                      serializer.Serialize(writer, "LU");
                      return;
                  case LandescodeEnum.Lv:
                      serializer.Serialize(writer, "LV");
                      return;
                  case LandescodeEnum.Ly:
                      serializer.Serialize(writer, "LY");
                      return;
                  case LandescodeEnum.Ma:
                      serializer.Serialize(writer, "MA");
                      return;
                  case LandescodeEnum.Mc:
                      serializer.Serialize(writer, "MC");
                      return;
                  case LandescodeEnum.Md:
                      serializer.Serialize(writer, "MD");
                      return;
                  case LandescodeEnum.Me:
                      serializer.Serialize(writer, "ME");
                      return;
                  case LandescodeEnum.Mf:
                      serializer.Serialize(writer, "MF");
                      return;
                  case LandescodeEnum.Mg:
                      serializer.Serialize(writer, "MG");
                      return;
                  case LandescodeEnum.Mh:
                      serializer.Serialize(writer, "MH");
                      return;
                  case LandescodeEnum.Mk:
                      serializer.Serialize(writer, "MK");
                      return;
                  case LandescodeEnum.Ml:
                      serializer.Serialize(writer, "ML");
                      return;
                  case LandescodeEnum.Mm:
                      serializer.Serialize(writer, "MM");
                      return;
                  case LandescodeEnum.Mn:
                      serializer.Serialize(writer, "MN");
                      return;
                  case LandescodeEnum.Mo:
                      serializer.Serialize(writer, "MO");
                      return;
                  case LandescodeEnum.Mp:
                      serializer.Serialize(writer, "MP");
                      return;
                  case LandescodeEnum.Mq:
                      serializer.Serialize(writer, "MQ");
                      return;
                  case LandescodeEnum.Mr:
                      serializer.Serialize(writer, "MR");
                      return;
                  case LandescodeEnum.Ms:
                      serializer.Serialize(writer, "MS");
                      return;
                  case LandescodeEnum.Mt:
                      serializer.Serialize(writer, "MT");
                      return;
                  case LandescodeEnum.Mu:
                      serializer.Serialize(writer, "MU");
                      return;
                  case LandescodeEnum.Mv:
                      serializer.Serialize(writer, "MV");
                      return;
                  case LandescodeEnum.Mw:
                      serializer.Serialize(writer, "MW");
                      return;
                  case LandescodeEnum.Mx:
                      serializer.Serialize(writer, "MX");
                      return;
                  case LandescodeEnum.My:
                      serializer.Serialize(writer, "MY");
                      return;
                  case LandescodeEnum.Mz:
                      serializer.Serialize(writer, "MZ");
                      return;
                  case LandescodeEnum.Na:
                      serializer.Serialize(writer, "NA");
                      return;
                  case LandescodeEnum.Nc:
                      serializer.Serialize(writer, "NC");
                      return;
                  case LandescodeEnum.Ne:
                      serializer.Serialize(writer, "NE");
                      return;
                  case LandescodeEnum.Nf:
                      serializer.Serialize(writer, "NF");
                      return;
                  case LandescodeEnum.Ng:
                      serializer.Serialize(writer, "NG");
                      return;
                  case LandescodeEnum.Ni:
                      serializer.Serialize(writer, "NI");
                      return;
                  case LandescodeEnum.Nl:
                      serializer.Serialize(writer, "NL");
                      return;
                  case LandescodeEnum.No:
                      serializer.Serialize(writer, "NO");
                      return;
                  case LandescodeEnum.Np:
                      serializer.Serialize(writer, "NP");
                      return;
                  case LandescodeEnum.Nr:
                      serializer.Serialize(writer, "NR");
                      return;
                  case LandescodeEnum.Nu:
                      serializer.Serialize(writer, "NU");
                      return;
                  case LandescodeEnum.Nz:
                      serializer.Serialize(writer, "NZ");
                      return;
                  case LandescodeEnum.Om:
                      serializer.Serialize(writer, "OM");
                      return;
                  case LandescodeEnum.Pa:
                      serializer.Serialize(writer, "PA");
                      return;
                  case LandescodeEnum.Pe:
                      serializer.Serialize(writer, "PE");
                      return;
                  case LandescodeEnum.Pf:
                      serializer.Serialize(writer, "PF");
                      return;
                  case LandescodeEnum.Pg:
                      serializer.Serialize(writer, "PG");
                      return;
                  case LandescodeEnum.Ph:
                      serializer.Serialize(writer, "PH");
                      return;
                  case LandescodeEnum.Pk:
                      serializer.Serialize(writer, "PK");
                      return;
                  case LandescodeEnum.Pl:
                      serializer.Serialize(writer, "PL");
                      return;
                  case LandescodeEnum.Pm:
                      serializer.Serialize(writer, "PM");
                      return;
                  case LandescodeEnum.Pn:
                      serializer.Serialize(writer, "PN");
                      return;
                  case LandescodeEnum.Pr:
                      serializer.Serialize(writer, "PR");
                      return;
                  case LandescodeEnum.Ps:
                      serializer.Serialize(writer, "PS");
                      return;
                  case LandescodeEnum.Pt:
                      serializer.Serialize(writer, "PT");
                      return;
                  case LandescodeEnum.Pw:
                      serializer.Serialize(writer, "PW");
                      return;
                  case LandescodeEnum.Py:
                      serializer.Serialize(writer, "PY");
                      return;
                  case LandescodeEnum.Qa:
                      serializer.Serialize(writer, "QA");
                      return;
                  case LandescodeEnum.Re:
                      serializer.Serialize(writer, "RE");
                      return;
                  case LandescodeEnum.Ro:
                      serializer.Serialize(writer, "RO");
                      return;
                  case LandescodeEnum.Rs:
                      serializer.Serialize(writer, "RS");
                      return;
                  case LandescodeEnum.Ru:
                      serializer.Serialize(writer, "RU");
                      return;
                  case LandescodeEnum.Rw:
                      serializer.Serialize(writer, "RW");
                      return;
                  case LandescodeEnum.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case LandescodeEnum.Sb:
                      serializer.Serialize(writer, "SB");
                      return;
                  case LandescodeEnum.Sc:
                      serializer.Serialize(writer, "SC");
                      return;
                  case LandescodeEnum.Sd:
                      serializer.Serialize(writer, "SD");
                      return;
                  case LandescodeEnum.Se:
                      serializer.Serialize(writer, "SE");
                      return;
                  case LandescodeEnum.Sg:
                      serializer.Serialize(writer, "SG");
                      return;
                  case LandescodeEnum.Sh:
                      serializer.Serialize(writer, "SH");
                      return;
                  case LandescodeEnum.Si:
                      serializer.Serialize(writer, "SI");
                      return;
                  case LandescodeEnum.Sj:
                      serializer.Serialize(writer, "SJ");
                      return;
                  case LandescodeEnum.Sk:
                      serializer.Serialize(writer, "SK");
                      return;
                  case LandescodeEnum.Sl:
                      serializer.Serialize(writer, "SL");
                      return;
                  case LandescodeEnum.Sm:
                      serializer.Serialize(writer, "SM");
                      return;
                  case LandescodeEnum.Sn:
                      serializer.Serialize(writer, "SN");
                      return;
                  case LandescodeEnum.So:
                      serializer.Serialize(writer, "SO");
                      return;
                  case LandescodeEnum.Sr:
                      serializer.Serialize(writer, "SR");
                      return;
                  case LandescodeEnum.Ss:
                      serializer.Serialize(writer, "SS");
                      return;
                  case LandescodeEnum.St:
                      serializer.Serialize(writer, "ST");
                      return;
                  case LandescodeEnum.Sv:
                      serializer.Serialize(writer, "SV");
                      return;
                  case LandescodeEnum.Sx:
                      serializer.Serialize(writer, "SX");
                      return;
                  case LandescodeEnum.Sy:
                      serializer.Serialize(writer, "SY");
                      return;
                  case LandescodeEnum.Sz:
                      serializer.Serialize(writer, "SZ");
                      return;
                  case LandescodeEnum.Tc:
                      serializer.Serialize(writer, "TC");
                      return;
                  case LandescodeEnum.Td:
                      serializer.Serialize(writer, "TD");
                      return;
                  case LandescodeEnum.Tf:
                      serializer.Serialize(writer, "TF");
                      return;
                  case LandescodeEnum.Tg:
                      serializer.Serialize(writer, "TG");
                      return;
                  case LandescodeEnum.Th:
                      serializer.Serialize(writer, "TH");
                      return;
                  case LandescodeEnum.Tj:
                      serializer.Serialize(writer, "TJ");
                      return;
                  case LandescodeEnum.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case LandescodeEnum.Tl:
                      serializer.Serialize(writer, "TL");
                      return;
                  case LandescodeEnum.Tm:
                      serializer.Serialize(writer, "TM");
                      return;
                  case LandescodeEnum.Tn:
                      serializer.Serialize(writer, "TN");
                      return;
                  case LandescodeEnum.To:
                      serializer.Serialize(writer, "TO");
                      return;
                  case LandescodeEnum.Tr:
                      serializer.Serialize(writer, "TR");
                      return;
                  case LandescodeEnum.Tt:
                      serializer.Serialize(writer, "TT");
                      return;
                  case LandescodeEnum.Tv:
                      serializer.Serialize(writer, "TV");
                      return;
                  case LandescodeEnum.Tw:
                      serializer.Serialize(writer, "TW");
                      return;
                  case LandescodeEnum.Tz:
                      serializer.Serialize(writer, "TZ");
                      return;
                  case LandescodeEnum.Ua:
                      serializer.Serialize(writer, "UA");
                      return;
                  case LandescodeEnum.Ug:
                      serializer.Serialize(writer, "UG");
                      return;
                  case LandescodeEnum.Um:
                      serializer.Serialize(writer, "UM");
                      return;
                  case LandescodeEnum.Us:
                      serializer.Serialize(writer, "US");
                      return;
                  case LandescodeEnum.Uy:
                      serializer.Serialize(writer, "UY");
                      return;
                  case LandescodeEnum.Uz:
                      serializer.Serialize(writer, "UZ");
                      return;
                  case LandescodeEnum.Va:
                      serializer.Serialize(writer, "VA");
                      return;
                  case LandescodeEnum.Vc:
                      serializer.Serialize(writer, "VC");
                      return;
                  case LandescodeEnum.Ve:
                      serializer.Serialize(writer, "VE");
                      return;
                  case LandescodeEnum.Vg:
                      serializer.Serialize(writer, "VG");
                      return;
                  case LandescodeEnum.Vi:
                      serializer.Serialize(writer, "VI");
                      return;
                  case LandescodeEnum.Vn:
                      serializer.Serialize(writer, "VN");
                      return;
                  case LandescodeEnum.Vu:
                      serializer.Serialize(writer, "VU");
                      return;
                  case LandescodeEnum.Wf:
                      serializer.Serialize(writer, "WF");
                      return;
                  case LandescodeEnum.Ws:
                      serializer.Serialize(writer, "WS");
                      return;
                  case LandescodeEnum.Xk:
                      serializer.Serialize(writer, "XK");
                      return;
                  case LandescodeEnum.Ye:
                      serializer.Serialize(writer, "YE");
                      return;
                  case LandescodeEnum.Yt:
                      serializer.Serialize(writer, "YT");
                      return;
                  case LandescodeEnum.Za:
                      serializer.Serialize(writer, "ZA");
                      return;
                  case LandescodeEnum.Zm:
                      serializer.Serialize(writer, "ZM");
                      return;
                  case LandescodeEnum.Zw:
                      serializer.Serialize(writer, "ZW");
                      return;
              }
              throw new Exception("Cannot marshal type LandescodeEnum");
          }
  
          public static readonly LandescodeEnumConverter Singleton = new LandescodeEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_cli_main[cli_enum\Typ.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var typ = Typ.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Auflistung sämtlicher existierender Geschäftsobjekte.
      /// </summary>
      public enum TypEnum { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };
  
      public class Typ
      {
          public static TypEnum FromJson(string json) => JsonConvert.DeserializeObject<TypEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this TypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  TypEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class TypEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(TypEnum) || t == typeof(TypEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "ANGEBOT":
                      return TypEnum.Angebot;
                  case "AUSSCHREIBUNG":
                      return TypEnum.Ausschreibung;
                  case "BUENDELVERTRAG":
                      return TypEnum.Buendelvertrag;
                  case "ENERGIEMENGE":
                      return TypEnum.Energiemenge;
                  case "FREMDKOSTEN":
                      return TypEnum.Fremdkosten;
                  case "GERAET":
                      return TypEnum.Geraet;
                  case "GESCHAEFTSOBJEKT":
                      return TypEnum.Geschaeftsobjekt;
                  case "GESCHAEFTSPARTNER":
                      return TypEnum.Geschaeftspartner;
                  case "KOSTEN":
                      return TypEnum.Kosten;
                  case "LASTGANG":
                      return TypEnum.Lastgang;
                  case "MARKTLOKATION":
                      return TypEnum.Marktlokation;
                  case "MARKTTEILNEHMER":
                      return TypEnum.Marktteilnehmer;
                  case "MESSLOKATION":
                      return TypEnum.Messlokation;
                  case "NETZNUTZUNGSRECHNUNG":
                      return TypEnum.Netznutzungsrechnung;
                  case "PERSON":
                      return TypEnum.Person;
                  case "PREISBLATT":
                      return TypEnum.Preisblatt;
                  case "PREISBLATTDIENSTLEISTUNG":
                      return TypEnum.Preisblattdienstleistung;
                  case "PREISBLATTHARDWARE":
                      return TypEnum.Preisblatthardware;
                  case "PREISBLATTKONZESSIONSABGABE":
                      return TypEnum.Preisblattkonzessionsabgabe;
                  case "PREISBLATTMESSUNG":
                      return TypEnum.Preisblattmessung;
                  case "PREISBLATTNETZNUTZUNG":
                      return TypEnum.Preisblattnetznutzung;
                  case "PREISBLATTUMLAGEN":
                      return TypEnum.Preisblattumlagen;
                  case "RECHNUNG":
                      return TypEnum.Rechnung;
                  case "REGION":
                      return TypEnum.Region;
                  case "REGIONALTARIF":
                      return TypEnum.Regionaltarif;
                  case "STANDORTEIGENSCHAFTEN":
                      return TypEnum.Standorteigenschaften;
                  case "TARIF":
                      return TypEnum.Tarif;
                  case "TARIFINFO":
                      return TypEnum.Tarifinfo;
                  case "TARIFKOSTEN":
                      return TypEnum.Tarifkosten;
                  case "TARIFPREISBLATT":
                      return TypEnum.Tarifpreisblatt;
                  case "VERTRAG":
                      return TypEnum.Vertrag;
                  case "ZAEHLER":
                      return TypEnum.Zaehler;
                  case "ZEITREIHE":
                      return TypEnum.Zeitreihe;
              }
              throw new Exception("Cannot unmarshal type TypEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (TypEnum)untypedValue;
              switch (value)
              {
                  case TypEnum.Angebot:
                      serializer.Serialize(writer, "ANGEBOT");
                      return;
                  case TypEnum.Ausschreibung:
                      serializer.Serialize(writer, "AUSSCHREIBUNG");
                      return;
                  case TypEnum.Buendelvertrag:
                      serializer.Serialize(writer, "BUENDELVERTRAG");
                      return;
                  case TypEnum.Energiemenge:
                      serializer.Serialize(writer, "ENERGIEMENGE");
                      return;
                  case TypEnum.Fremdkosten:
                      serializer.Serialize(writer, "FREMDKOSTEN");
                      return;
                  case TypEnum.Geraet:
                      serializer.Serialize(writer, "GERAET");
                      return;
                  case TypEnum.Geschaeftsobjekt:
                      serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                      return;
                  case TypEnum.Geschaeftspartner:
                      serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                      return;
                  case TypEnum.Kosten:
                      serializer.Serialize(writer, "KOSTEN");
                      return;
                  case TypEnum.Lastgang:
                      serializer.Serialize(writer, "LASTGANG");
                      return;
                  case TypEnum.Marktlokation:
                      serializer.Serialize(writer, "MARKTLOKATION");
                      return;
                  case TypEnum.Marktteilnehmer:
                      serializer.Serialize(writer, "MARKTTEILNEHMER");
                      return;
                  case TypEnum.Messlokation:
                      serializer.Serialize(writer, "MESSLOKATION");
                      return;
                  case TypEnum.Netznutzungsrechnung:
                      serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                      return;
                  case TypEnum.Person:
                      serializer.Serialize(writer, "PERSON");
                      return;
                  case TypEnum.Preisblatt:
                      serializer.Serialize(writer, "PREISBLATT");
                      return;
                  case TypEnum.Preisblattdienstleistung:
                      serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                      return;
                  case TypEnum.Preisblatthardware:
                      serializer.Serialize(writer, "PREISBLATTHARDWARE");
                      return;
                  case TypEnum.Preisblattkonzessionsabgabe:
                      serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                      return;
                  case TypEnum.Preisblattmessung:
                      serializer.Serialize(writer, "PREISBLATTMESSUNG");
                      return;
                  case TypEnum.Preisblattnetznutzung:
                      serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                      return;
                  case TypEnum.Preisblattumlagen:
                      serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                      return;
                  case TypEnum.Rechnung:
                      serializer.Serialize(writer, "RECHNUNG");
                      return;
                  case TypEnum.Region:
                      serializer.Serialize(writer, "REGION");
                      return;
                  case TypEnum.Regionaltarif:
                      serializer.Serialize(writer, "REGIONALTARIF");
                      return;
                  case TypEnum.Standorteigenschaften:
                      serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                      return;
                  case TypEnum.Tarif:
                      serializer.Serialize(writer, "TARIF");
                      return;
                  case TypEnum.Tarifinfo:
                      serializer.Serialize(writer, "TARIFINFO");
                      return;
                  case TypEnum.Tarifkosten:
                      serializer.Serialize(writer, "TARIFKOSTEN");
                      return;
                  case TypEnum.Tarifpreisblatt:
                      serializer.Serialize(writer, "TARIFPREISBLATT");
                      return;
                  case TypEnum.Vertrag:
                      serializer.Serialize(writer, "VERTRAG");
                      return;
                  case TypEnum.Zaehler:
                      serializer.Serialize(writer, "ZAEHLER");
                      return;
                  case TypEnum.Zeitreihe:
                      serializer.Serialize(writer, "ZEITREIHE");
                      return;
              }
              throw new Exception("Cannot marshal type TypEnum");
          }
  
          public static readonly TypEnumConverter Singleton = new TypEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[ZusatzAttribut.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var zusatzAttribut = ZusatzAttribut.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
      /// GP-Nummer etc.) auf.
      /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
      /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
      /// type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `ZusatzAttribut JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
      /// </summary>
      public partial class ZusatzAttribut
      {
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("name")]
          public string Name { get; set; }
  
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("wert")]
          public object Wert { get; set; }
      }
  
      public partial class ZusatzAttribut
      {
          public static ZusatzAttribut FromJson(string json) => JsonConvert.DeserializeObject<ZusatzAttribut>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this ZusatzAttribut self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[bo\Angebot.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var angebot = Angebot.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Mit diesem BO kann ein Versorgungsangebot zur Strom- oder Gasversorgung oder die
      /// Teilnahme an einer Ausschreibung
      /// übertragen werden. Es können verschiedene Varianten enthalten sein (z.B. ein- und
      /// mehrjährige Laufzeit).
      /// Innerhalb jeder Variante können Teile enthalten sein, die jeweils für eine oder mehrere
      /// Marktlokationen erstellt
      /// werden.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/bo/Angebot.svg" type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `Angebot JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/bo/Angebot.json>`_
      /// </summary>
      public partial class Angebot
      {
          /// <summary>
          /// Hier können IDs anderer Systeme hinterlegt werden (z.B. eine SAP-GP-Nummer oder eine GUID)
          /// </summary>
          [JsonProperty("_id")]
          public string Id { get; set; }
  
          /// <summary>
          /// Eindeutige Nummer des Angebotes
          /// </summary>
          [JsonProperty("_typ")]
          public Typ? Typ { get; set; }
  
          /// <summary>
          /// Version der BO-Struktur aka "fachliche Versionierung"
          /// </summary>
          [JsonProperty("_version")]
          public string Version { get; set; }
  
          /// <summary>
          /// Bis zu diesem Zeitpunkt (Tag/Uhrzeit) inklusive gilt das Angebot
          /// </summary>
          [JsonProperty("anfragereferenz")]
          public string Anfragereferenz { get; set; }
  
          /// <summary>
          /// Erstellungsdatum des Angebots
          /// </summary>
          [JsonProperty("angebotsdatum")]
          public DateTimeOffset? Angebotsdatum { get; set; }
  
          /// <summary>
          /// Ersteller des Angebots
          /// </summary>
          [JsonProperty("angebotsgeber")]
          public object Angebotsgeber { get; set; }
  
          /// <summary>
          /// Empfänger des Angebots
          /// </summary>
          [JsonProperty("angebotsnehmer")]
          public object Angebotsnehmer { get; set; }
  
          /// <summary>
          /// Eindeutige Nummer des Angebotes
          /// </summary>
          [JsonProperty("angebotsnummer")]
          public string Angebotsnummer { get; set; }
  
          /// <summary>
          /// Bis zu diesem Zeitpunkt (Tag/Uhrzeit) inklusive gilt das Angebot
          /// </summary>
          [JsonProperty("bindefrist")]
          public DateTimeOffset? Bindefrist { get; set; }
  
          /// <summary>
          /// Sparte, für die das Angebot abgegeben wird (Strom/Gas)
          /// </summary>
          [JsonProperty("sparte")]
          public object Sparte { get; set; }
  
          /// <summary>
          /// Person, die als Angebotsgeber das Angebots ausgestellt hat
          /// </summary>
          [JsonProperty("unterzeichnerAngebotsgeber")]
          public object UnterzeichnerAngebotsgeber { get; set; }
  
          /// <summary>
          /// Person, die als Angebotsnehmer das Angebot angenommen hat
          /// </summary>
          [JsonProperty("unterzeichnerAngebotsnehmer")]
          public object UnterzeichnerAngebotsnehmer { get; set; }
  
          /// <summary>
          /// Eine oder mehrere Varianten des Angebots mit den Angebotsteilen;
          /// Ein Angebot besteht mindestens aus einer Variante.
          /// </summary>
          [JsonProperty("varianten")]
          public object Varianten { get; set; }
  
          [JsonProperty("zusatzAttribute")]
          public object ZusatzAttribute { get; set; }
      }
  
      /// <summary>
      /// Auflistung sämtlicher existierender Geschäftsobjekte.
      /// </summary>
      public enum Typ { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };
  
      public partial class Angebot
      {
          public static Angebot FromJson(string json) => JsonConvert.DeserializeObject<Angebot>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this Angebot self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  TypConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class TypConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "ANGEBOT":
                      return Typ.Angebot;
                  case "AUSSCHREIBUNG":
                      return Typ.Ausschreibung;
                  case "BUENDELVERTRAG":
                      return Typ.Buendelvertrag;
                  case "ENERGIEMENGE":
                      return Typ.Energiemenge;
                  case "FREMDKOSTEN":
                      return Typ.Fremdkosten;
                  case "GERAET":
                      return Typ.Geraet;
                  case "GESCHAEFTSOBJEKT":
                      return Typ.Geschaeftsobjekt;
                  case "GESCHAEFTSPARTNER":
                      return Typ.Geschaeftspartner;
                  case "KOSTEN":
                      return Typ.Kosten;
                  case "LASTGANG":
                      return Typ.Lastgang;
                  case "MARKTLOKATION":
                      return Typ.Marktlokation;
                  case "MARKTTEILNEHMER":
                      return Typ.Marktteilnehmer;
                  case "MESSLOKATION":
                      return Typ.Messlokation;
                  case "NETZNUTZUNGSRECHNUNG":
                      return Typ.Netznutzungsrechnung;
                  case "PERSON":
                      return Typ.Person;
                  case "PREISBLATT":
                      return Typ.Preisblatt;
                  case "PREISBLATTDIENSTLEISTUNG":
                      return Typ.Preisblattdienstleistung;
                  case "PREISBLATTHARDWARE":
                      return Typ.Preisblatthardware;
                  case "PREISBLATTKONZESSIONSABGABE":
                      return Typ.Preisblattkonzessionsabgabe;
                  case "PREISBLATTMESSUNG":
                      return Typ.Preisblattmessung;
                  case "PREISBLATTNETZNUTZUNG":
                      return Typ.Preisblattnetznutzung;
                  case "PREISBLATTUMLAGEN":
                      return Typ.Preisblattumlagen;
                  case "RECHNUNG":
                      return Typ.Rechnung;
                  case "REGION":
                      return Typ.Region;
                  case "REGIONALTARIF":
                      return Typ.Regionaltarif;
                  case "STANDORTEIGENSCHAFTEN":
                      return Typ.Standorteigenschaften;
                  case "TARIF":
                      return Typ.Tarif;
                  case "TARIFINFO":
                      return Typ.Tarifinfo;
                  case "TARIFKOSTEN":
                      return Typ.Tarifkosten;
                  case "TARIFPREISBLATT":
                      return Typ.Tarifpreisblatt;
                  case "VERTRAG":
                      return Typ.Vertrag;
                  case "ZAEHLER":
                      return Typ.Zaehler;
                  case "ZEITREIHE":
                      return Typ.Zeitreihe;
              }
              throw new Exception("Cannot unmarshal type Typ");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (Typ)untypedValue;
              switch (value)
              {
                  case Typ.Angebot:
                      serializer.Serialize(writer, "ANGEBOT");
                      return;
                  case Typ.Ausschreibung:
                      serializer.Serialize(writer, "AUSSCHREIBUNG");
                      return;
                  case Typ.Buendelvertrag:
                      serializer.Serialize(writer, "BUENDELVERTRAG");
                      return;
                  case Typ.Energiemenge:
                      serializer.Serialize(writer, "ENERGIEMENGE");
                      return;
                  case Typ.Fremdkosten:
                      serializer.Serialize(writer, "FREMDKOSTEN");
                      return;
                  case Typ.Geraet:
                      serializer.Serialize(writer, "GERAET");
                      return;
                  case Typ.Geschaeftsobjekt:
                      serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                      return;
                  case Typ.Geschaeftspartner:
                      serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                      return;
                  case Typ.Kosten:
                      serializer.Serialize(writer, "KOSTEN");
                      return;
                  case Typ.Lastgang:
                      serializer.Serialize(writer, "LASTGANG");
                      return;
                  case Typ.Marktlokation:
                      serializer.Serialize(writer, "MARKTLOKATION");
                      return;
                  case Typ.Marktteilnehmer:
                      serializer.Serialize(writer, "MARKTTEILNEHMER");
                      return;
                  case Typ.Messlokation:
                      serializer.Serialize(writer, "MESSLOKATION");
                      return;
                  case Typ.Netznutzungsrechnung:
                      serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                      return;
                  case Typ.Person:
                      serializer.Serialize(writer, "PERSON");
                      return;
                  case Typ.Preisblatt:
                      serializer.Serialize(writer, "PREISBLATT");
                      return;
                  case Typ.Preisblattdienstleistung:
                      serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                      return;
                  case Typ.Preisblatthardware:
                      serializer.Serialize(writer, "PREISBLATTHARDWARE");
                      return;
                  case Typ.Preisblattkonzessionsabgabe:
                      serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                      return;
                  case Typ.Preisblattmessung:
                      serializer.Serialize(writer, "PREISBLATTMESSUNG");
                      return;
                  case Typ.Preisblattnetznutzung:
                      serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                      return;
                  case Typ.Preisblattumlagen:
                      serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                      return;
                  case Typ.Rechnung:
                      serializer.Serialize(writer, "RECHNUNG");
                      return;
                  case Typ.Region:
                      serializer.Serialize(writer, "REGION");
                      return;
                  case Typ.Regionaltarif:
                      serializer.Serialize(writer, "REGIONALTARIF");
                      return;
                  case Typ.Standorteigenschaften:
                      serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                      return;
                  case Typ.Tarif:
                      serializer.Serialize(writer, "TARIF");
                      return;
                  case Typ.Tarifinfo:
                      serializer.Serialize(writer, "TARIFINFO");
                      return;
                  case Typ.Tarifkosten:
                      serializer.Serialize(writer, "TARIFKOSTEN");
                      return;
                  case Typ.Tarifpreisblatt:
                      serializer.Serialize(writer, "TARIFPREISBLATT");
                      return;
                  case Typ.Vertrag:
                      serializer.Serialize(writer, "VERTRAG");
                      return;
                  case Typ.Zaehler:
                      serializer.Serialize(writer, "ZAEHLER");
                      return;
                  case Typ.Zeitreihe:
                      serializer.Serialize(writer, "ZEITREIHE");
                      return;
              }
              throw new Exception("Cannot marshal type Typ");
          }
  
          public static readonly TypConverter Singleton = new TypConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[bo\TestDuplicates.cs]
  '''
  
  namespace BO4EDotNet
  {
      public partial class TestClass
      {
          // Original content
      }
  
      public partial class TestClass
      {
          // Duplicate content
      }
  
      public enum TestEnum
      {
          Value1,
          Value2
      }
  
      public enum TestEnum
      {
          Value1,
          Value2,
          Value3
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[com\Adresse.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var adresse = Adresse.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Contains an address that can be used for most purposes.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/Adresse.svg" type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `Adresse JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Adresse.json>`_
      /// </summary>
      public partial class Adresse
      {
          /// <summary>
          /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
          ///
          /// # pylint: disable=duplicate-code
          /// model_config = ConfigDict(
          /// alias_generator=camelize,
          /// populate_by_name=True,
          /// extra="allow",
          /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
          /// would be to create
          /// # an annotated version of Decimal, but you would have to use it everywhere in the
          /// pydantic models.
          /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
          /// json_encoders={Decimal: str},
          /// )
          /// </summary>
          [JsonProperty("_id")]
          public string Id { get; set; }
  
          /// <summary>
          /// Version der BO-Struktur aka "fachliche Versionierung"
          /// </summary>
          [JsonProperty("_version")]
          public string Version { get; set; }
  
          /// <summary>
          /// Zusatzhinweis zum Auffinden der Adresse, z.B. "3. Stock linke Wohnung"
          /// </summary>
          [JsonProperty("adresszusatz")]
          public string Adresszusatz { get; set; }
  
          /// <summary>
          /// Im Falle einer c/o-Adresse steht in diesem Attribut die Anrede. Z.B. "c/o Veronica
          /// Hauptmieterin"
          /// </summary>
          [JsonProperty("coErgaenzung")]
          public string CoErgaenzung { get; set; }
  
          /// <summary>
          /// Hausnummer inkl. Zusatz; z.B. "3", "4a"
          /// </summary>
          [JsonProperty("hausnummer")]
          public string Hausnummer { get; set; }
  
          /// <summary>
          /// Offizieller ISO-Landescode
          /// </summary>
          [JsonProperty("landescode")]
          public Landescode? Landescode { get; set; }
  
          /// <summary>
          /// Bezeichnung der Stadt; z.B. "Hückelhoven"
          /// </summary>
          [JsonProperty("ort")]
          public string Ort { get; set; }
  
          /// <summary>
          /// Bezeichnung des Ortsteils; z.B. "Mitte"
          /// </summary>
          [JsonProperty("ortsteil")]
          public string Ortsteil { get; set; }
  
          /// <summary>
          /// Im Falle einer Postfachadresse das Postfach; Damit werden Straße und Hausnummer nicht
          /// berücksichtigt
          /// </summary>
          [JsonProperty("postfach")]
          public string Postfach { get; set; }
  
          /// <summary>
          /// Die Postleitzahl; z.B: "41836"
          /// </summary>
          [JsonProperty("postleitzahl")]
          public string Postleitzahl { get; set; }
  
          /// <summary>
          /// Bezeichnung der Straße; z.B. "Weserstraße"
          /// </summary>
          [JsonProperty("strasse")]
          public string Strasse { get; set; }
  
          [JsonProperty("zusatzAttribute")]
          public ZusatzAttribut[] ZusatzAttribute { get; set; }
      }
  
      /// <summary>
      /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
      /// GP-Nummer etc.) auf.
      /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
      /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
      /// type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `ZusatzAttribut JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
      /// </summary>
      public partial class ZusatzAttribut
      {
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("name")]
          public string Name { get; set; }
  
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("wert")]
          public object Wert { get; set; }
      }
  
      public enum Landescode { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };
  
      public partial class Adresse
      {
          public static Adresse FromJson(string json) => JsonConvert.DeserializeObject<Adresse>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this Adresse self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  LandescodeConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class LandescodeConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(Landescode) || t == typeof(Landescode?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "AD":
                      return Landescode.Ad;
                  case "AE":
                      return Landescode.Ae;
                  case "AF":
                      return Landescode.Af;
                  case "AG":
                      return Landescode.Ag;
                  case "AI":
                      return Landescode.Ai;
                  case "AL":
                      return Landescode.Al;
                  case "AM":
                      return Landescode.Am;
                  case "AO":
                      return Landescode.Ao;
                  case "AQ":
                      return Landescode.Aq;
                  case "AR":
                      return Landescode.Ar;
                  case "AS":
                      return Landescode.As;
                  case "AT":
                      return Landescode.At;
                  case "AU":
                      return Landescode.Au;
                  case "AW":
                      return Landescode.Aw;
                  case "AX":
                      return Landescode.Ax;
                  case "AZ":
                      return Landescode.Az;
                  case "BA":
                      return Landescode.Ba;
                  case "BB":
                      return Landescode.Bb;
                  case "BD":
                      return Landescode.Bd;
                  case "BE":
                      return Landescode.Be;
                  case "BF":
                      return Landescode.Bf;
                  case "BG":
                      return Landescode.Bg;
                  case "BH":
                      return Landescode.Bh;
                  case "BI":
                      return Landescode.Bi;
                  case "BJ":
                      return Landescode.Bj;
                  case "BL":
                      return Landescode.Bl;
                  case "BM":
                      return Landescode.Bm;
                  case "BN":
                      return Landescode.Bn;
                  case "BO":
                      return Landescode.Bo;
                  case "BQ":
                      return Landescode.Bq;
                  case "BR":
                      return Landescode.Br;
                  case "BS":
                      return Landescode.Bs;
                  case "BT":
                      return Landescode.Bt;
                  case "BV":
                      return Landescode.Bv;
                  case "BW":
                      return Landescode.Bw;
                  case "BY":
                      return Landescode.By;
                  case "BZ":
                      return Landescode.Bz;
                  case "CA":
                      return Landescode.Ca;
                  case "CC":
                      return Landescode.Cc;
                  case "CD":
                      return Landescode.Cd;
                  case "CF":
                      return Landescode.Cf;
                  case "CG":
                      return Landescode.Cg;
                  case "CH":
                      return Landescode.Ch;
                  case "CI":
                      return Landescode.Ci;
                  case "CK":
                      return Landescode.Ck;
                  case "CL":
                      return Landescode.Cl;
                  case "CM":
                      return Landescode.Cm;
                  case "CN":
                      return Landescode.Cn;
                  case "CO":
                      return Landescode.Co;
                  case "CR":
                      return Landescode.Cr;
                  case "CU":
                      return Landescode.Cu;
                  case "CV":
                      return Landescode.Cv;
                  case "CW":
                      return Landescode.Cw;
                  case "CX":
                      return Landescode.Cx;
                  case "CY":
                      return Landescode.Cy;
                  case "CZ":
                      return Landescode.Cz;
                  case "DE":
                      return Landescode.De;
                  case "DJ":
                      return Landescode.Dj;
                  case "DK":
                      return Landescode.Dk;
                  case "DM":
                      return Landescode.Dm;
                  case "DO":
                      return Landescode.Do;
                  case "DZ":
                      return Landescode.Dz;
                  case "EC":
                      return Landescode.Ec;
                  case "EE":
                      return Landescode.Ee;
                  case "EG":
                      return Landescode.Eg;
                  case "EH":
                      return Landescode.Eh;
                  case "ER":
                      return Landescode.Er;
                  case "ES":
                      return Landescode.Es;
                  case "ET":
                      return Landescode.Et;
                  case "FI":
                      return Landescode.Fi;
                  case "FJ":
                      return Landescode.Fj;
                  case "FK":
                      return Landescode.Fk;
                  case "FM":
                      return Landescode.Fm;
                  case "FO":
                      return Landescode.Fo;
                  case "FR":
                      return Landescode.Fr;
                  case "GA":
                      return Landescode.Ga;
                  case "GB":
                      return Landescode.Gb;
                  case "GD":
                      return Landescode.Gd;
                  case "GE":
                      return Landescode.Ge;
                  case "GF":
                      return Landescode.Gf;
                  case "GG":
                      return Landescode.Gg;
                  case "GH":
                      return Landescode.Gh;
                  case "GI":
                      return Landescode.Gi;
                  case "GL":
                      return Landescode.Gl;
                  case "GM":
                      return Landescode.Gm;
                  case "GN":
                      return Landescode.Gn;
                  case "GP":
                      return Landescode.Gp;
                  case "GQ":
                      return Landescode.Gq;
                  case "GR":
                      return Landescode.Gr;
                  case "GS":
                      return Landescode.Gs;
                  case "GT":
                      return Landescode.Gt;
                  case "GU":
                      return Landescode.Gu;
                  case "GW":
                      return Landescode.Gw;
                  case "GY":
                      return Landescode.Gy;
                  case "HK":
                      return Landescode.Hk;
                  case "HM":
                      return Landescode.Hm;
                  case "HN":
                      return Landescode.Hn;
                  case "HR":
                      return Landescode.Hr;
                  case "HT":
                      return Landescode.Ht;
                  case "HU":
                      return Landescode.Hu;
                  case "ID":
                      return Landescode.Id;
                  case "IE":
                      return Landescode.Ie;
                  case "IL":
                      return Landescode.Il;
                  case "IM":
                      return Landescode.Im;
                  case "IN":
                      return Landescode.In;
                  case "IO":
                      return Landescode.Io;
                  case "IQ":
                      return Landescode.Iq;
                  case "IR":
                      return Landescode.Ir;
                  case "IS":
                      return Landescode.Is;
                  case "IT":
                      return Landescode.It;
                  case "JE":
                      return Landescode.Je;
                  case "JM":
                      return Landescode.Jm;
                  case "JO":
                      return Landescode.Jo;
                  case "JP":
                      return Landescode.Jp;
                  case "KE":
                      return Landescode.Ke;
                  case "KG":
                      return Landescode.Kg;
                  case "KH":
                      return Landescode.Kh;
                  case "KI":
                      return Landescode.Ki;
                  case "KM":
                      return Landescode.Km;
                  case "KN":
                      return Landescode.Kn;
                  case "KP":
                      return Landescode.Kp;
                  case "KR":
                      return Landescode.Kr;
                  case "KW":
                      return Landescode.Kw;
                  case "KY":
                      return Landescode.Ky;
                  case "KZ":
                      return Landescode.Kz;
                  case "LA":
                      return Landescode.La;
                  case "LB":
                      return Landescode.Lb;
                  case "LC":
                      return Landescode.Lc;
                  case "LI":
                      return Landescode.Li;
                  case "LK":
                      return Landescode.Lk;
                  case "LR":
                      return Landescode.Lr;
                  case "LS":
                      return Landescode.Ls;
                  case "LT":
                      return Landescode.Lt;
                  case "LU":
                      return Landescode.Lu;
                  case "LV":
                      return Landescode.Lv;
                  case "LY":
                      return Landescode.Ly;
                  case "MA":
                      return Landescode.Ma;
                  case "MC":
                      return Landescode.Mc;
                  case "MD":
                      return Landescode.Md;
                  case "ME":
                      return Landescode.Me;
                  case "MF":
                      return Landescode.Mf;
                  case "MG":
                      return Landescode.Mg;
                  case "MH":
                      return Landescode.Mh;
                  case "MK":
                      return Landescode.Mk;
                  case "ML":
                      return Landescode.Ml;
                  case "MM":
                      return Landescode.Mm;
                  case "MN":
                      return Landescode.Mn;
                  case "MO":
                      return Landescode.Mo;
                  case "MP":
                      return Landescode.Mp;
                  case "MQ":
                      return Landescode.Mq;
                  case "MR":
                      return Landescode.Mr;
                  case "MS":
                      return Landescode.Ms;
                  case "MT":
                      return Landescode.Mt;
                  case "MU":
                      return Landescode.Mu;
                  case "MV":
                      return Landescode.Mv;
                  case "MW":
                      return Landescode.Mw;
                  case "MX":
                      return Landescode.Mx;
                  case "MY":
                      return Landescode.My;
                  case "MZ":
                      return Landescode.Mz;
                  case "NA":
                      return Landescode.Na;
                  case "NC":
                      return Landescode.Nc;
                  case "NE":
                      return Landescode.Ne;
                  case "NF":
                      return Landescode.Nf;
                  case "NG":
                      return Landescode.Ng;
                  case "NI":
                      return Landescode.Ni;
                  case "NL":
                      return Landescode.Nl;
                  case "NO":
                      return Landescode.No;
                  case "NP":
                      return Landescode.Np;
                  case "NR":
                      return Landescode.Nr;
                  case "NU":
                      return Landescode.Nu;
                  case "NZ":
                      return Landescode.Nz;
                  case "OM":
                      return Landescode.Om;
                  case "PA":
                      return Landescode.Pa;
                  case "PE":
                      return Landescode.Pe;
                  case "PF":
                      return Landescode.Pf;
                  case "PG":
                      return Landescode.Pg;
                  case "PH":
                      return Landescode.Ph;
                  case "PK":
                      return Landescode.Pk;
                  case "PL":
                      return Landescode.Pl;
                  case "PM":
                      return Landescode.Pm;
                  case "PN":
                      return Landescode.Pn;
                  case "PR":
                      return Landescode.Pr;
                  case "PS":
                      return Landescode.Ps;
                  case "PT":
                      return Landescode.Pt;
                  case "PW":
                      return Landescode.Pw;
                  case "PY":
                      return Landescode.Py;
                  case "QA":
                      return Landescode.Qa;
                  case "RE":
                      return Landescode.Re;
                  case "RO":
                      return Landescode.Ro;
                  case "RS":
                      return Landescode.Rs;
                  case "RU":
                      return Landescode.Ru;
                  case "RW":
                      return Landescode.Rw;
                  case "SA":
                      return Landescode.Sa;
                  case "SB":
                      return Landescode.Sb;
                  case "SC":
                      return Landescode.Sc;
                  case "SD":
                      return Landescode.Sd;
                  case "SE":
                      return Landescode.Se;
                  case "SG":
                      return Landescode.Sg;
                  case "SH":
                      return Landescode.Sh;
                  case "SI":
                      return Landescode.Si;
                  case "SJ":
                      return Landescode.Sj;
                  case "SK":
                      return Landescode.Sk;
                  case "SL":
                      return Landescode.Sl;
                  case "SM":
                      return Landescode.Sm;
                  case "SN":
                      return Landescode.Sn;
                  case "SO":
                      return Landescode.So;
                  case "SR":
                      return Landescode.Sr;
                  case "SS":
                      return Landescode.Ss;
                  case "ST":
                      return Landescode.St;
                  case "SV":
                      return Landescode.Sv;
                  case "SX":
                      return Landescode.Sx;
                  case "SY":
                      return Landescode.Sy;
                  case "SZ":
                      return Landescode.Sz;
                  case "TC":
                      return Landescode.Tc;
                  case "TD":
                      return Landescode.Td;
                  case "TF":
                      return Landescode.Tf;
                  case "TG":
                      return Landescode.Tg;
                  case "TH":
                      return Landescode.Th;
                  case "TJ":
                      return Landescode.Tj;
                  case "TK":
                      return Landescode.Tk;
                  case "TL":
                      return Landescode.Tl;
                  case "TM":
                      return Landescode.Tm;
                  case "TN":
                      return Landescode.Tn;
                  case "TO":
                      return Landescode.To;
                  case "TR":
                      return Landescode.Tr;
                  case "TT":
                      return Landescode.Tt;
                  case "TV":
                      return Landescode.Tv;
                  case "TW":
                      return Landescode.Tw;
                  case "TZ":
                      return Landescode.Tz;
                  case "UA":
                      return Landescode.Ua;
                  case "UG":
                      return Landescode.Ug;
                  case "UM":
                      return Landescode.Um;
                  case "US":
                      return Landescode.Us;
                  case "UY":
                      return Landescode.Uy;
                  case "UZ":
                      return Landescode.Uz;
                  case "VA":
                      return Landescode.Va;
                  case "VC":
                      return Landescode.Vc;
                  case "VE":
                      return Landescode.Ve;
                  case "VG":
                      return Landescode.Vg;
                  case "VI":
                      return Landescode.Vi;
                  case "VN":
                      return Landescode.Vn;
                  case "VU":
                      return Landescode.Vu;
                  case "WF":
                      return Landescode.Wf;
                  case "WS":
                      return Landescode.Ws;
                  case "XK":
                      return Landescode.Xk;
                  case "YE":
                      return Landescode.Ye;
                  case "YT":
                      return Landescode.Yt;
                  case "ZA":
                      return Landescode.Za;
                  case "ZM":
                      return Landescode.Zm;
                  case "ZW":
                      return Landescode.Zw;
              }
              throw new Exception("Cannot unmarshal type Landescode");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (Landescode)untypedValue;
              switch (value)
              {
                  case Landescode.Ad:
                      serializer.Serialize(writer, "AD");
                      return;
                  case Landescode.Ae:
                      serializer.Serialize(writer, "AE");
                      return;
                  case Landescode.Af:
                      serializer.Serialize(writer, "AF");
                      return;
                  case Landescode.Ag:
                      serializer.Serialize(writer, "AG");
                      return;
                  case Landescode.Ai:
                      serializer.Serialize(writer, "AI");
                      return;
                  case Landescode.Al:
                      serializer.Serialize(writer, "AL");
                      return;
                  case Landescode.Am:
                      serializer.Serialize(writer, "AM");
                      return;
                  case Landescode.Ao:
                      serializer.Serialize(writer, "AO");
                      return;
                  case Landescode.Aq:
                      serializer.Serialize(writer, "AQ");
                      return;
                  case Landescode.Ar:
                      serializer.Serialize(writer, "AR");
                      return;
                  case Landescode.As:
                      serializer.Serialize(writer, "AS");
                      return;
                  case Landescode.At:
                      serializer.Serialize(writer, "AT");
                      return;
                  case Landescode.Au:
                      serializer.Serialize(writer, "AU");
                      return;
                  case Landescode.Aw:
                      serializer.Serialize(writer, "AW");
                      return;
                  case Landescode.Ax:
                      serializer.Serialize(writer, "AX");
                      return;
                  case Landescode.Az:
                      serializer.Serialize(writer, "AZ");
                      return;
                  case Landescode.Ba:
                      serializer.Serialize(writer, "BA");
                      return;
                  case Landescode.Bb:
                      serializer.Serialize(writer, "BB");
                      return;
                  case Landescode.Bd:
                      serializer.Serialize(writer, "BD");
                      return;
                  case Landescode.Be:
                      serializer.Serialize(writer, "BE");
                      return;
                  case Landescode.Bf:
                      serializer.Serialize(writer, "BF");
                      return;
                  case Landescode.Bg:
                      serializer.Serialize(writer, "BG");
                      return;
                  case Landescode.Bh:
                      serializer.Serialize(writer, "BH");
                      return;
                  case Landescode.Bi:
                      serializer.Serialize(writer, "BI");
                      return;
                  case Landescode.Bj:
                      serializer.Serialize(writer, "BJ");
                      return;
                  case Landescode.Bl:
                      serializer.Serialize(writer, "BL");
                      return;
                  case Landescode.Bm:
                      serializer.Serialize(writer, "BM");
                      return;
                  case Landescode.Bn:
                      serializer.Serialize(writer, "BN");
                      return;
                  case Landescode.Bo:
                      serializer.Serialize(writer, "BO");
                      return;
                  case Landescode.Bq:
                      serializer.Serialize(writer, "BQ");
                      return;
                  case Landescode.Br:
                      serializer.Serialize(writer, "BR");
                      return;
                  case Landescode.Bs:
                      serializer.Serialize(writer, "BS");
                      return;
                  case Landescode.Bt:
                      serializer.Serialize(writer, "BT");
                      return;
                  case Landescode.Bv:
                      serializer.Serialize(writer, "BV");
                      return;
                  case Landescode.Bw:
                      serializer.Serialize(writer, "BW");
                      return;
                  case Landescode.By:
                      serializer.Serialize(writer, "BY");
                      return;
                  case Landescode.Bz:
                      serializer.Serialize(writer, "BZ");
                      return;
                  case Landescode.Ca:
                      serializer.Serialize(writer, "CA");
                      return;
                  case Landescode.Cc:
                      serializer.Serialize(writer, "CC");
                      return;
                  case Landescode.Cd:
                      serializer.Serialize(writer, "CD");
                      return;
                  case Landescode.Cf:
                      serializer.Serialize(writer, "CF");
                      return;
                  case Landescode.Cg:
                      serializer.Serialize(writer, "CG");
                      return;
                  case Landescode.Ch:
                      serializer.Serialize(writer, "CH");
                      return;
                  case Landescode.Ci:
                      serializer.Serialize(writer, "CI");
                      return;
                  case Landescode.Ck:
                      serializer.Serialize(writer, "CK");
                      return;
                  case Landescode.Cl:
                      serializer.Serialize(writer, "CL");
                      return;
                  case Landescode.Cm:
                      serializer.Serialize(writer, "CM");
                      return;
                  case Landescode.Cn:
                      serializer.Serialize(writer, "CN");
                      return;
                  case Landescode.Co:
                      serializer.Serialize(writer, "CO");
                      return;
                  case Landescode.Cr:
                      serializer.Serialize(writer, "CR");
                      return;
                  case Landescode.Cu:
                      serializer.Serialize(writer, "CU");
                      return;
                  case Landescode.Cv:
                      serializer.Serialize(writer, "CV");
                      return;
                  case Landescode.Cw:
                      serializer.Serialize(writer, "CW");
                      return;
                  case Landescode.Cx:
                      serializer.Serialize(writer, "CX");
                      return;
                  case Landescode.Cy:
                      serializer.Serialize(writer, "CY");
                      return;
                  case Landescode.Cz:
                      serializer.Serialize(writer, "CZ");
                      return;
                  case Landescode.De:
                      serializer.Serialize(writer, "DE");
                      return;
                  case Landescode.Dj:
                      serializer.Serialize(writer, "DJ");
                      return;
                  case Landescode.Dk:
                      serializer.Serialize(writer, "DK");
                      return;
                  case Landescode.Dm:
                      serializer.Serialize(writer, "DM");
                      return;
                  case Landescode.Do:
                      serializer.Serialize(writer, "DO");
                      return;
                  case Landescode.Dz:
                      serializer.Serialize(writer, "DZ");
                      return;
                  case Landescode.Ec:
                      serializer.Serialize(writer, "EC");
                      return;
                  case Landescode.Ee:
                      serializer.Serialize(writer, "EE");
                      return;
                  case Landescode.Eg:
                      serializer.Serialize(writer, "EG");
                      return;
                  case Landescode.Eh:
                      serializer.Serialize(writer, "EH");
                      return;
                  case Landescode.Er:
                      serializer.Serialize(writer, "ER");
                      return;
                  case Landescode.Es:
                      serializer.Serialize(writer, "ES");
                      return;
                  case Landescode.Et:
                      serializer.Serialize(writer, "ET");
                      return;
                  case Landescode.Fi:
                      serializer.Serialize(writer, "FI");
                      return;
                  case Landescode.Fj:
                      serializer.Serialize(writer, "FJ");
                      return;
                  case Landescode.Fk:
                      serializer.Serialize(writer, "FK");
                      return;
                  case Landescode.Fm:
                      serializer.Serialize(writer, "FM");
                      return;
                  case Landescode.Fo:
                      serializer.Serialize(writer, "FO");
                      return;
                  case Landescode.Fr:
                      serializer.Serialize(writer, "FR");
                      return;
                  case Landescode.Ga:
                      serializer.Serialize(writer, "GA");
                      return;
                  case Landescode.Gb:
                      serializer.Serialize(writer, "GB");
                      return;
                  case Landescode.Gd:
                      serializer.Serialize(writer, "GD");
                      return;
                  case Landescode.Ge:
                      serializer.Serialize(writer, "GE");
                      return;
                  case Landescode.Gf:
                      serializer.Serialize(writer, "GF");
                      return;
                  case Landescode.Gg:
                      serializer.Serialize(writer, "GG");
                      return;
                  case Landescode.Gh:
                      serializer.Serialize(writer, "GH");
                      return;
                  case Landescode.Gi:
                      serializer.Serialize(writer, "GI");
                      return;
                  case Landescode.Gl:
                      serializer.Serialize(writer, "GL");
                      return;
                  case Landescode.Gm:
                      serializer.Serialize(writer, "GM");
                      return;
                  case Landescode.Gn:
                      serializer.Serialize(writer, "GN");
                      return;
                  case Landescode.Gp:
                      serializer.Serialize(writer, "GP");
                      return;
                  case Landescode.Gq:
                      serializer.Serialize(writer, "GQ");
                      return;
                  case Landescode.Gr:
                      serializer.Serialize(writer, "GR");
                      return;
                  case Landescode.Gs:
                      serializer.Serialize(writer, "GS");
                      return;
                  case Landescode.Gt:
                      serializer.Serialize(writer, "GT");
                      return;
                  case Landescode.Gu:
                      serializer.Serialize(writer, "GU");
                      return;
                  case Landescode.Gw:
                      serializer.Serialize(writer, "GW");
                      return;
                  case Landescode.Gy:
                      serializer.Serialize(writer, "GY");
                      return;
                  case Landescode.Hk:
                      serializer.Serialize(writer, "HK");
                      return;
                  case Landescode.Hm:
                      serializer.Serialize(writer, "HM");
                      return;
                  case Landescode.Hn:
                      serializer.Serialize(writer, "HN");
                      return;
                  case Landescode.Hr:
                      serializer.Serialize(writer, "HR");
                      return;
                  case Landescode.Ht:
                      serializer.Serialize(writer, "HT");
                      return;
                  case Landescode.Hu:
                      serializer.Serialize(writer, "HU");
                      return;
                  case Landescode.Id:
                      serializer.Serialize(writer, "ID");
                      return;
                  case Landescode.Ie:
                      serializer.Serialize(writer, "IE");
                      return;
                  case Landescode.Il:
                      serializer.Serialize(writer, "IL");
                      return;
                  case Landescode.Im:
                      serializer.Serialize(writer, "IM");
                      return;
                  case Landescode.In:
                      serializer.Serialize(writer, "IN");
                      return;
                  case Landescode.Io:
                      serializer.Serialize(writer, "IO");
                      return;
                  case Landescode.Iq:
                      serializer.Serialize(writer, "IQ");
                      return;
                  case Landescode.Ir:
                      serializer.Serialize(writer, "IR");
                      return;
                  case Landescode.Is:
                      serializer.Serialize(writer, "IS");
                      return;
                  case Landescode.It:
                      serializer.Serialize(writer, "IT");
                      return;
                  case Landescode.Je:
                      serializer.Serialize(writer, "JE");
                      return;
                  case Landescode.Jm:
                      serializer.Serialize(writer, "JM");
                      return;
                  case Landescode.Jo:
                      serializer.Serialize(writer, "JO");
                      return;
                  case Landescode.Jp:
                      serializer.Serialize(writer, "JP");
                      return;
                  case Landescode.Ke:
                      serializer.Serialize(writer, "KE");
                      return;
                  case Landescode.Kg:
                      serializer.Serialize(writer, "KG");
                      return;
                  case Landescode.Kh:
                      serializer.Serialize(writer, "KH");
                      return;
                  case Landescode.Ki:
                      serializer.Serialize(writer, "KI");
                      return;
                  case Landescode.Km:
                      serializer.Serialize(writer, "KM");
                      return;
                  case Landescode.Kn:
                      serializer.Serialize(writer, "KN");
                      return;
                  case Landescode.Kp:
                      serializer.Serialize(writer, "KP");
                      return;
                  case Landescode.Kr:
                      serializer.Serialize(writer, "KR");
                      return;
                  case Landescode.Kw:
                      serializer.Serialize(writer, "KW");
                      return;
                  case Landescode.Ky:
                      serializer.Serialize(writer, "KY");
                      return;
                  case Landescode.Kz:
                      serializer.Serialize(writer, "KZ");
                      return;
                  case Landescode.La:
                      serializer.Serialize(writer, "LA");
                      return;
                  case Landescode.Lb:
                      serializer.Serialize(writer, "LB");
                      return;
                  case Landescode.Lc:
                      serializer.Serialize(writer, "LC");
                      return;
                  case Landescode.Li:
                      serializer.Serialize(writer, "LI");
                      return;
                  case Landescode.Lk:
                      serializer.Serialize(writer, "LK");
                      return;
                  case Landescode.Lr:
                      serializer.Serialize(writer, "LR");
                      return;
                  case Landescode.Ls:
                      serializer.Serialize(writer, "LS");
                      return;
                  case Landescode.Lt:
                      serializer.Serialize(writer, "LT");
                      return;
                  case Landescode.Lu:
                      serializer.Serialize(writer, "LU");
                      return;
                  case Landescode.Lv:
                      serializer.Serialize(writer, "LV");
                      return;
                  case Landescode.Ly:
                      serializer.Serialize(writer, "LY");
                      return;
                  case Landescode.Ma:
                      serializer.Serialize(writer, "MA");
                      return;
                  case Landescode.Mc:
                      serializer.Serialize(writer, "MC");
                      return;
                  case Landescode.Md:
                      serializer.Serialize(writer, "MD");
                      return;
                  case Landescode.Me:
                      serializer.Serialize(writer, "ME");
                      return;
                  case Landescode.Mf:
                      serializer.Serialize(writer, "MF");
                      return;
                  case Landescode.Mg:
                      serializer.Serialize(writer, "MG");
                      return;
                  case Landescode.Mh:
                      serializer.Serialize(writer, "MH");
                      return;
                  case Landescode.Mk:
                      serializer.Serialize(writer, "MK");
                      return;
                  case Landescode.Ml:
                      serializer.Serialize(writer, "ML");
                      return;
                  case Landescode.Mm:
                      serializer.Serialize(writer, "MM");
                      return;
                  case Landescode.Mn:
                      serializer.Serialize(writer, "MN");
                      return;
                  case Landescode.Mo:
                      serializer.Serialize(writer, "MO");
                      return;
                  case Landescode.Mp:
                      serializer.Serialize(writer, "MP");
                      return;
                  case Landescode.Mq:
                      serializer.Serialize(writer, "MQ");
                      return;
                  case Landescode.Mr:
                      serializer.Serialize(writer, "MR");
                      return;
                  case Landescode.Ms:
                      serializer.Serialize(writer, "MS");
                      return;
                  case Landescode.Mt:
                      serializer.Serialize(writer, "MT");
                      return;
                  case Landescode.Mu:
                      serializer.Serialize(writer, "MU");
                      return;
                  case Landescode.Mv:
                      serializer.Serialize(writer, "MV");
                      return;
                  case Landescode.Mw:
                      serializer.Serialize(writer, "MW");
                      return;
                  case Landescode.Mx:
                      serializer.Serialize(writer, "MX");
                      return;
                  case Landescode.My:
                      serializer.Serialize(writer, "MY");
                      return;
                  case Landescode.Mz:
                      serializer.Serialize(writer, "MZ");
                      return;
                  case Landescode.Na:
                      serializer.Serialize(writer, "NA");
                      return;
                  case Landescode.Nc:
                      serializer.Serialize(writer, "NC");
                      return;
                  case Landescode.Ne:
                      serializer.Serialize(writer, "NE");
                      return;
                  case Landescode.Nf:
                      serializer.Serialize(writer, "NF");
                      return;
                  case Landescode.Ng:
                      serializer.Serialize(writer, "NG");
                      return;
                  case Landescode.Ni:
                      serializer.Serialize(writer, "NI");
                      return;
                  case Landescode.Nl:
                      serializer.Serialize(writer, "NL");
                      return;
                  case Landescode.No:
                      serializer.Serialize(writer, "NO");
                      return;
                  case Landescode.Np:
                      serializer.Serialize(writer, "NP");
                      return;
                  case Landescode.Nr:
                      serializer.Serialize(writer, "NR");
                      return;
                  case Landescode.Nu:
                      serializer.Serialize(writer, "NU");
                      return;
                  case Landescode.Nz:
                      serializer.Serialize(writer, "NZ");
                      return;
                  case Landescode.Om:
                      serializer.Serialize(writer, "OM");
                      return;
                  case Landescode.Pa:
                      serializer.Serialize(writer, "PA");
                      return;
                  case Landescode.Pe:
                      serializer.Serialize(writer, "PE");
                      return;
                  case Landescode.Pf:
                      serializer.Serialize(writer, "PF");
                      return;
                  case Landescode.Pg:
                      serializer.Serialize(writer, "PG");
                      return;
                  case Landescode.Ph:
                      serializer.Serialize(writer, "PH");
                      return;
                  case Landescode.Pk:
                      serializer.Serialize(writer, "PK");
                      return;
                  case Landescode.Pl:
                      serializer.Serialize(writer, "PL");
                      return;
                  case Landescode.Pm:
                      serializer.Serialize(writer, "PM");
                      return;
                  case Landescode.Pn:
                      serializer.Serialize(writer, "PN");
                      return;
                  case Landescode.Pr:
                      serializer.Serialize(writer, "PR");
                      return;
                  case Landescode.Ps:
                      serializer.Serialize(writer, "PS");
                      return;
                  case Landescode.Pt:
                      serializer.Serialize(writer, "PT");
                      return;
                  case Landescode.Pw:
                      serializer.Serialize(writer, "PW");
                      return;
                  case Landescode.Py:
                      serializer.Serialize(writer, "PY");
                      return;
                  case Landescode.Qa:
                      serializer.Serialize(writer, "QA");
                      return;
                  case Landescode.Re:
                      serializer.Serialize(writer, "RE");
                      return;
                  case Landescode.Ro:
                      serializer.Serialize(writer, "RO");
                      return;
                  case Landescode.Rs:
                      serializer.Serialize(writer, "RS");
                      return;
                  case Landescode.Ru:
                      serializer.Serialize(writer, "RU");
                      return;
                  case Landescode.Rw:
                      serializer.Serialize(writer, "RW");
                      return;
                  case Landescode.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case Landescode.Sb:
                      serializer.Serialize(writer, "SB");
                      return;
                  case Landescode.Sc:
                      serializer.Serialize(writer, "SC");
                      return;
                  case Landescode.Sd:
                      serializer.Serialize(writer, "SD");
                      return;
                  case Landescode.Se:
                      serializer.Serialize(writer, "SE");
                      return;
                  case Landescode.Sg:
                      serializer.Serialize(writer, "SG");
                      return;
                  case Landescode.Sh:
                      serializer.Serialize(writer, "SH");
                      return;
                  case Landescode.Si:
                      serializer.Serialize(writer, "SI");
                      return;
                  case Landescode.Sj:
                      serializer.Serialize(writer, "SJ");
                      return;
                  case Landescode.Sk:
                      serializer.Serialize(writer, "SK");
                      return;
                  case Landescode.Sl:
                      serializer.Serialize(writer, "SL");
                      return;
                  case Landescode.Sm:
                      serializer.Serialize(writer, "SM");
                      return;
                  case Landescode.Sn:
                      serializer.Serialize(writer, "SN");
                      return;
                  case Landescode.So:
                      serializer.Serialize(writer, "SO");
                      return;
                  case Landescode.Sr:
                      serializer.Serialize(writer, "SR");
                      return;
                  case Landescode.Ss:
                      serializer.Serialize(writer, "SS");
                      return;
                  case Landescode.St:
                      serializer.Serialize(writer, "ST");
                      return;
                  case Landescode.Sv:
                      serializer.Serialize(writer, "SV");
                      return;
                  case Landescode.Sx:
                      serializer.Serialize(writer, "SX");
                      return;
                  case Landescode.Sy:
                      serializer.Serialize(writer, "SY");
                      return;
                  case Landescode.Sz:
                      serializer.Serialize(writer, "SZ");
                      return;
                  case Landescode.Tc:
                      serializer.Serialize(writer, "TC");
                      return;
                  case Landescode.Td:
                      serializer.Serialize(writer, "TD");
                      return;
                  case Landescode.Tf:
                      serializer.Serialize(writer, "TF");
                      return;
                  case Landescode.Tg:
                      serializer.Serialize(writer, "TG");
                      return;
                  case Landescode.Th:
                      serializer.Serialize(writer, "TH");
                      return;
                  case Landescode.Tj:
                      serializer.Serialize(writer, "TJ");
                      return;
                  case Landescode.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case Landescode.Tl:
                      serializer.Serialize(writer, "TL");
                      return;
                  case Landescode.Tm:
                      serializer.Serialize(writer, "TM");
                      return;
                  case Landescode.Tn:
                      serializer.Serialize(writer, "TN");
                      return;
                  case Landescode.To:
                      serializer.Serialize(writer, "TO");
                      return;
                  case Landescode.Tr:
                      serializer.Serialize(writer, "TR");
                      return;
                  case Landescode.Tt:
                      serializer.Serialize(writer, "TT");
                      return;
                  case Landescode.Tv:
                      serializer.Serialize(writer, "TV");
                      return;
                  case Landescode.Tw:
                      serializer.Serialize(writer, "TW");
                      return;
                  case Landescode.Tz:
                      serializer.Serialize(writer, "TZ");
                      return;
                  case Landescode.Ua:
                      serializer.Serialize(writer, "UA");
                      return;
                  case Landescode.Ug:
                      serializer.Serialize(writer, "UG");
                      return;
                  case Landescode.Um:
                      serializer.Serialize(writer, "UM");
                      return;
                  case Landescode.Us:
                      serializer.Serialize(writer, "US");
                      return;
                  case Landescode.Uy:
                      serializer.Serialize(writer, "UY");
                      return;
                  case Landescode.Uz:
                      serializer.Serialize(writer, "UZ");
                      return;
                  case Landescode.Va:
                      serializer.Serialize(writer, "VA");
                      return;
                  case Landescode.Vc:
                      serializer.Serialize(writer, "VC");
                      return;
                  case Landescode.Ve:
                      serializer.Serialize(writer, "VE");
                      return;
                  case Landescode.Vg:
                      serializer.Serialize(writer, "VG");
                      return;
                  case Landescode.Vi:
                      serializer.Serialize(writer, "VI");
                      return;
                  case Landescode.Vn:
                      serializer.Serialize(writer, "VN");
                      return;
                  case Landescode.Vu:
                      serializer.Serialize(writer, "VU");
                      return;
                  case Landescode.Wf:
                      serializer.Serialize(writer, "WF");
                      return;
                  case Landescode.Ws:
                      serializer.Serialize(writer, "WS");
                      return;
                  case Landescode.Xk:
                      serializer.Serialize(writer, "XK");
                      return;
                  case Landescode.Ye:
                      serializer.Serialize(writer, "YE");
                      return;
                  case Landescode.Yt:
                      serializer.Serialize(writer, "YT");
                      return;
                  case Landescode.Za:
                      serializer.Serialize(writer, "ZA");
                      return;
                  case Landescode.Zm:
                      serializer.Serialize(writer, "ZM");
                      return;
                  case Landescode.Zw:
                      serializer.Serialize(writer, "ZW");
                      return;
              }
              throw new Exception("Cannot marshal type Landescode");
          }
  
          public static readonly LandescodeConverter Singleton = new LandescodeConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[enum\AbgabeArt.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var abgabeArt = AbgabeArt.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Art der Konzessionsabgabe
      /// </summary>
      public enum AbgabeArtEnum { Kas, Sa, Sas, Ta, Tas, Tk, Tks, Ts, Tss };
  
      public class AbgabeArt
      {
          public static AbgabeArtEnum FromJson(string json) => JsonConvert.DeserializeObject<AbgabeArtEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this AbgabeArtEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  AbgabeArtEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class AbgabeArtEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(AbgabeArtEnum) || t == typeof(AbgabeArtEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "KAS":
                      return AbgabeArtEnum.Kas;
                  case "SA":
                      return AbgabeArtEnum.Sa;
                  case "SAS":
                      return AbgabeArtEnum.Sas;
                  case "TA":
                      return AbgabeArtEnum.Ta;
                  case "TAS":
                      return AbgabeArtEnum.Tas;
                  case "TK":
                      return AbgabeArtEnum.Tk;
                  case "TKS":
                      return AbgabeArtEnum.Tks;
                  case "TS":
                      return AbgabeArtEnum.Ts;
                  case "TSS":
                      return AbgabeArtEnum.Tss;
              }
              throw new Exception("Cannot unmarshal type AbgabeArtEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (AbgabeArtEnum)untypedValue;
              switch (value)
              {
                  case AbgabeArtEnum.Kas:
                      serializer.Serialize(writer, "KAS");
                      return;
                  case AbgabeArtEnum.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case AbgabeArtEnum.Sas:
                      serializer.Serialize(writer, "SAS");
                      return;
                  case AbgabeArtEnum.Ta:
                      serializer.Serialize(writer, "TA");
                      return;
                  case AbgabeArtEnum.Tas:
                      serializer.Serialize(writer, "TAS");
                      return;
                  case AbgabeArtEnum.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case AbgabeArtEnum.Tks:
                      serializer.Serialize(writer, "TKS");
                      return;
                  case AbgabeArtEnum.Ts:
                      serializer.Serialize(writer, "TS");
                      return;
                  case AbgabeArtEnum.Tss:
                      serializer.Serialize(writer, "TSS");
                      return;
              }
              throw new Exception("Cannot marshal type AbgabeArtEnum");
          }
  
          public static readonly AbgabeArtEnumConverter Singleton = new AbgabeArtEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[enum\Landescode.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var landescode = Landescode.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      public enum LandescodeEnum { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };
  
      public class Landescode
      {
          public static LandescodeEnum FromJson(string json) => JsonConvert.DeserializeObject<LandescodeEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this LandescodeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  LandescodeEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class LandescodeEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(LandescodeEnum) || t == typeof(LandescodeEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "AD":
                      return LandescodeEnum.Ad;
                  case "AE":
                      return LandescodeEnum.Ae;
                  case "AF":
                      return LandescodeEnum.Af;
                  case "AG":
                      return LandescodeEnum.Ag;
                  case "AI":
                      return LandescodeEnum.Ai;
                  case "AL":
                      return LandescodeEnum.Al;
                  case "AM":
                      return LandescodeEnum.Am;
                  case "AO":
                      return LandescodeEnum.Ao;
                  case "AQ":
                      return LandescodeEnum.Aq;
                  case "AR":
                      return LandescodeEnum.Ar;
                  case "AS":
                      return LandescodeEnum.As;
                  case "AT":
                      return LandescodeEnum.At;
                  case "AU":
                      return LandescodeEnum.Au;
                  case "AW":
                      return LandescodeEnum.Aw;
                  case "AX":
                      return LandescodeEnum.Ax;
                  case "AZ":
                      return LandescodeEnum.Az;
                  case "BA":
                      return LandescodeEnum.Ba;
                  case "BB":
                      return LandescodeEnum.Bb;
                  case "BD":
                      return LandescodeEnum.Bd;
                  case "BE":
                      return LandescodeEnum.Be;
                  case "BF":
                      return LandescodeEnum.Bf;
                  case "BG":
                      return LandescodeEnum.Bg;
                  case "BH":
                      return LandescodeEnum.Bh;
                  case "BI":
                      return LandescodeEnum.Bi;
                  case "BJ":
                      return LandescodeEnum.Bj;
                  case "BL":
                      return LandescodeEnum.Bl;
                  case "BM":
                      return LandescodeEnum.Bm;
                  case "BN":
                      return LandescodeEnum.Bn;
                  case "BO":
                      return LandescodeEnum.Bo;
                  case "BQ":
                      return LandescodeEnum.Bq;
                  case "BR":
                      return LandescodeEnum.Br;
                  case "BS":
                      return LandescodeEnum.Bs;
                  case "BT":
                      return LandescodeEnum.Bt;
                  case "BV":
                      return LandescodeEnum.Bv;
                  case "BW":
                      return LandescodeEnum.Bw;
                  case "BY":
                      return LandescodeEnum.By;
                  case "BZ":
                      return LandescodeEnum.Bz;
                  case "CA":
                      return LandescodeEnum.Ca;
                  case "CC":
                      return LandescodeEnum.Cc;
                  case "CD":
                      return LandescodeEnum.Cd;
                  case "CF":
                      return LandescodeEnum.Cf;
                  case "CG":
                      return LandescodeEnum.Cg;
                  case "CH":
                      return LandescodeEnum.Ch;
                  case "CI":
                      return LandescodeEnum.Ci;
                  case "CK":
                      return LandescodeEnum.Ck;
                  case "CL":
                      return LandescodeEnum.Cl;
                  case "CM":
                      return LandescodeEnum.Cm;
                  case "CN":
                      return LandescodeEnum.Cn;
                  case "CO":
                      return LandescodeEnum.Co;
                  case "CR":
                      return LandescodeEnum.Cr;
                  case "CU":
                      return LandescodeEnum.Cu;
                  case "CV":
                      return LandescodeEnum.Cv;
                  case "CW":
                      return LandescodeEnum.Cw;
                  case "CX":
                      return LandescodeEnum.Cx;
                  case "CY":
                      return LandescodeEnum.Cy;
                  case "CZ":
                      return LandescodeEnum.Cz;
                  case "DE":
                      return LandescodeEnum.De;
                  case "DJ":
                      return LandescodeEnum.Dj;
                  case "DK":
                      return LandescodeEnum.Dk;
                  case "DM":
                      return LandescodeEnum.Dm;
                  case "DO":
                      return LandescodeEnum.Do;
                  case "DZ":
                      return LandescodeEnum.Dz;
                  case "EC":
                      return LandescodeEnum.Ec;
                  case "EE":
                      return LandescodeEnum.Ee;
                  case "EG":
                      return LandescodeEnum.Eg;
                  case "EH":
                      return LandescodeEnum.Eh;
                  case "ER":
                      return LandescodeEnum.Er;
                  case "ES":
                      return LandescodeEnum.Es;
                  case "ET":
                      return LandescodeEnum.Et;
                  case "FI":
                      return LandescodeEnum.Fi;
                  case "FJ":
                      return LandescodeEnum.Fj;
                  case "FK":
                      return LandescodeEnum.Fk;
                  case "FM":
                      return LandescodeEnum.Fm;
                  case "FO":
                      return LandescodeEnum.Fo;
                  case "FR":
                      return LandescodeEnum.Fr;
                  case "GA":
                      return LandescodeEnum.Ga;
                  case "GB":
                      return LandescodeEnum.Gb;
                  case "GD":
                      return LandescodeEnum.Gd;
                  case "GE":
                      return LandescodeEnum.Ge;
                  case "GF":
                      return LandescodeEnum.Gf;
                  case "GG":
                      return LandescodeEnum.Gg;
                  case "GH":
                      return LandescodeEnum.Gh;
                  case "GI":
                      return LandescodeEnum.Gi;
                  case "GL":
                      return LandescodeEnum.Gl;
                  case "GM":
                      return LandescodeEnum.Gm;
                  case "GN":
                      return LandescodeEnum.Gn;
                  case "GP":
                      return LandescodeEnum.Gp;
                  case "GQ":
                      return LandescodeEnum.Gq;
                  case "GR":
                      return LandescodeEnum.Gr;
                  case "GS":
                      return LandescodeEnum.Gs;
                  case "GT":
                      return LandescodeEnum.Gt;
                  case "GU":
                      return LandescodeEnum.Gu;
                  case "GW":
                      return LandescodeEnum.Gw;
                  case "GY":
                      return LandescodeEnum.Gy;
                  case "HK":
                      return LandescodeEnum.Hk;
                  case "HM":
                      return LandescodeEnum.Hm;
                  case "HN":
                      return LandescodeEnum.Hn;
                  case "HR":
                      return LandescodeEnum.Hr;
                  case "HT":
                      return LandescodeEnum.Ht;
                  case "HU":
                      return LandescodeEnum.Hu;
                  case "ID":
                      return LandescodeEnum.Id;
                  case "IE":
                      return LandescodeEnum.Ie;
                  case "IL":
                      return LandescodeEnum.Il;
                  case "IM":
                      return LandescodeEnum.Im;
                  case "IN":
                      return LandescodeEnum.In;
                  case "IO":
                      return LandescodeEnum.Io;
                  case "IQ":
                      return LandescodeEnum.Iq;
                  case "IR":
                      return LandescodeEnum.Ir;
                  case "IS":
                      return LandescodeEnum.Is;
                  case "IT":
                      return LandescodeEnum.It;
                  case "JE":
                      return LandescodeEnum.Je;
                  case "JM":
                      return LandescodeEnum.Jm;
                  case "JO":
                      return LandescodeEnum.Jo;
                  case "JP":
                      return LandescodeEnum.Jp;
                  case "KE":
                      return LandescodeEnum.Ke;
                  case "KG":
                      return LandescodeEnum.Kg;
                  case "KH":
                      return LandescodeEnum.Kh;
                  case "KI":
                      return LandescodeEnum.Ki;
                  case "KM":
                      return LandescodeEnum.Km;
                  case "KN":
                      return LandescodeEnum.Kn;
                  case "KP":
                      return LandescodeEnum.Kp;
                  case "KR":
                      return LandescodeEnum.Kr;
                  case "KW":
                      return LandescodeEnum.Kw;
                  case "KY":
                      return LandescodeEnum.Ky;
                  case "KZ":
                      return LandescodeEnum.Kz;
                  case "LA":
                      return LandescodeEnum.La;
                  case "LB":
                      return LandescodeEnum.Lb;
                  case "LC":
                      return LandescodeEnum.Lc;
                  case "LI":
                      return LandescodeEnum.Li;
                  case "LK":
                      return LandescodeEnum.Lk;
                  case "LR":
                      return LandescodeEnum.Lr;
                  case "LS":
                      return LandescodeEnum.Ls;
                  case "LT":
                      return LandescodeEnum.Lt;
                  case "LU":
                      return LandescodeEnum.Lu;
                  case "LV":
                      return LandescodeEnum.Lv;
                  case "LY":
                      return LandescodeEnum.Ly;
                  case "MA":
                      return LandescodeEnum.Ma;
                  case "MC":
                      return LandescodeEnum.Mc;
                  case "MD":
                      return LandescodeEnum.Md;
                  case "ME":
                      return LandescodeEnum.Me;
                  case "MF":
                      return LandescodeEnum.Mf;
                  case "MG":
                      return LandescodeEnum.Mg;
                  case "MH":
                      return LandescodeEnum.Mh;
                  case "MK":
                      return LandescodeEnum.Mk;
                  case "ML":
                      return LandescodeEnum.Ml;
                  case "MM":
                      return LandescodeEnum.Mm;
                  case "MN":
                      return LandescodeEnum.Mn;
                  case "MO":
                      return LandescodeEnum.Mo;
                  case "MP":
                      return LandescodeEnum.Mp;
                  case "MQ":
                      return LandescodeEnum.Mq;
                  case "MR":
                      return LandescodeEnum.Mr;
                  case "MS":
                      return LandescodeEnum.Ms;
                  case "MT":
                      return LandescodeEnum.Mt;
                  case "MU":
                      return LandescodeEnum.Mu;
                  case "MV":
                      return LandescodeEnum.Mv;
                  case "MW":
                      return LandescodeEnum.Mw;
                  case "MX":
                      return LandescodeEnum.Mx;
                  case "MY":
                      return LandescodeEnum.My;
                  case "MZ":
                      return LandescodeEnum.Mz;
                  case "NA":
                      return LandescodeEnum.Na;
                  case "NC":
                      return LandescodeEnum.Nc;
                  case "NE":
                      return LandescodeEnum.Ne;
                  case "NF":
                      return LandescodeEnum.Nf;
                  case "NG":
                      return LandescodeEnum.Ng;
                  case "NI":
                      return LandescodeEnum.Ni;
                  case "NL":
                      return LandescodeEnum.Nl;
                  case "NO":
                      return LandescodeEnum.No;
                  case "NP":
                      return LandescodeEnum.Np;
                  case "NR":
                      return LandescodeEnum.Nr;
                  case "NU":
                      return LandescodeEnum.Nu;
                  case "NZ":
                      return LandescodeEnum.Nz;
                  case "OM":
                      return LandescodeEnum.Om;
                  case "PA":
                      return LandescodeEnum.Pa;
                  case "PE":
                      return LandescodeEnum.Pe;
                  case "PF":
                      return LandescodeEnum.Pf;
                  case "PG":
                      return LandescodeEnum.Pg;
                  case "PH":
                      return LandescodeEnum.Ph;
                  case "PK":
                      return LandescodeEnum.Pk;
                  case "PL":
                      return LandescodeEnum.Pl;
                  case "PM":
                      return LandescodeEnum.Pm;
                  case "PN":
                      return LandescodeEnum.Pn;
                  case "PR":
                      return LandescodeEnum.Pr;
                  case "PS":
                      return LandescodeEnum.Ps;
                  case "PT":
                      return LandescodeEnum.Pt;
                  case "PW":
                      return LandescodeEnum.Pw;
                  case "PY":
                      return LandescodeEnum.Py;
                  case "QA":
                      return LandescodeEnum.Qa;
                  case "RE":
                      return LandescodeEnum.Re;
                  case "RO":
                      return LandescodeEnum.Ro;
                  case "RS":
                      return LandescodeEnum.Rs;
                  case "RU":
                      return LandescodeEnum.Ru;
                  case "RW":
                      return LandescodeEnum.Rw;
                  case "SA":
                      return LandescodeEnum.Sa;
                  case "SB":
                      return LandescodeEnum.Sb;
                  case "SC":
                      return LandescodeEnum.Sc;
                  case "SD":
                      return LandescodeEnum.Sd;
                  case "SE":
                      return LandescodeEnum.Se;
                  case "SG":
                      return LandescodeEnum.Sg;
                  case "SH":
                      return LandescodeEnum.Sh;
                  case "SI":
                      return LandescodeEnum.Si;
                  case "SJ":
                      return LandescodeEnum.Sj;
                  case "SK":
                      return LandescodeEnum.Sk;
                  case "SL":
                      return LandescodeEnum.Sl;
                  case "SM":
                      return LandescodeEnum.Sm;
                  case "SN":
                      return LandescodeEnum.Sn;
                  case "SO":
                      return LandescodeEnum.So;
                  case "SR":
                      return LandescodeEnum.Sr;
                  case "SS":
                      return LandescodeEnum.Ss;
                  case "ST":
                      return LandescodeEnum.St;
                  case "SV":
                      return LandescodeEnum.Sv;
                  case "SX":
                      return LandescodeEnum.Sx;
                  case "SY":
                      return LandescodeEnum.Sy;
                  case "SZ":
                      return LandescodeEnum.Sz;
                  case "TC":
                      return LandescodeEnum.Tc;
                  case "TD":
                      return LandescodeEnum.Td;
                  case "TF":
                      return LandescodeEnum.Tf;
                  case "TG":
                      return LandescodeEnum.Tg;
                  case "TH":
                      return LandescodeEnum.Th;
                  case "TJ":
                      return LandescodeEnum.Tj;
                  case "TK":
                      return LandescodeEnum.Tk;
                  case "TL":
                      return LandescodeEnum.Tl;
                  case "TM":
                      return LandescodeEnum.Tm;
                  case "TN":
                      return LandescodeEnum.Tn;
                  case "TO":
                      return LandescodeEnum.To;
                  case "TR":
                      return LandescodeEnum.Tr;
                  case "TT":
                      return LandescodeEnum.Tt;
                  case "TV":
                      return LandescodeEnum.Tv;
                  case "TW":
                      return LandescodeEnum.Tw;
                  case "TZ":
                      return LandescodeEnum.Tz;
                  case "UA":
                      return LandescodeEnum.Ua;
                  case "UG":
                      return LandescodeEnum.Ug;
                  case "UM":
                      return LandescodeEnum.Um;
                  case "US":
                      return LandescodeEnum.Us;
                  case "UY":
                      return LandescodeEnum.Uy;
                  case "UZ":
                      return LandescodeEnum.Uz;
                  case "VA":
                      return LandescodeEnum.Va;
                  case "VC":
                      return LandescodeEnum.Vc;
                  case "VE":
                      return LandescodeEnum.Ve;
                  case "VG":
                      return LandescodeEnum.Vg;
                  case "VI":
                      return LandescodeEnum.Vi;
                  case "VN":
                      return LandescodeEnum.Vn;
                  case "VU":
                      return LandescodeEnum.Vu;
                  case "WF":
                      return LandescodeEnum.Wf;
                  case "WS":
                      return LandescodeEnum.Ws;
                  case "XK":
                      return LandescodeEnum.Xk;
                  case "YE":
                      return LandescodeEnum.Ye;
                  case "YT":
                      return LandescodeEnum.Yt;
                  case "ZA":
                      return LandescodeEnum.Za;
                  case "ZM":
                      return LandescodeEnum.Zm;
                  case "ZW":
                      return LandescodeEnum.Zw;
              }
              throw new Exception("Cannot unmarshal type LandescodeEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (LandescodeEnum)untypedValue;
              switch (value)
              {
                  case LandescodeEnum.Ad:
                      serializer.Serialize(writer, "AD");
                      return;
                  case LandescodeEnum.Ae:
                      serializer.Serialize(writer, "AE");
                      return;
                  case LandescodeEnum.Af:
                      serializer.Serialize(writer, "AF");
                      return;
                  case LandescodeEnum.Ag:
                      serializer.Serialize(writer, "AG");
                      return;
                  case LandescodeEnum.Ai:
                      serializer.Serialize(writer, "AI");
                      return;
                  case LandescodeEnum.Al:
                      serializer.Serialize(writer, "AL");
                      return;
                  case LandescodeEnum.Am:
                      serializer.Serialize(writer, "AM");
                      return;
                  case LandescodeEnum.Ao:
                      serializer.Serialize(writer, "AO");
                      return;
                  case LandescodeEnum.Aq:
                      serializer.Serialize(writer, "AQ");
                      return;
                  case LandescodeEnum.Ar:
                      serializer.Serialize(writer, "AR");
                      return;
                  case LandescodeEnum.As:
                      serializer.Serialize(writer, "AS");
                      return;
                  case LandescodeEnum.At:
                      serializer.Serialize(writer, "AT");
                      return;
                  case LandescodeEnum.Au:
                      serializer.Serialize(writer, "AU");
                      return;
                  case LandescodeEnum.Aw:
                      serializer.Serialize(writer, "AW");
                      return;
                  case LandescodeEnum.Ax:
                      serializer.Serialize(writer, "AX");
                      return;
                  case LandescodeEnum.Az:
                      serializer.Serialize(writer, "AZ");
                      return;
                  case LandescodeEnum.Ba:
                      serializer.Serialize(writer, "BA");
                      return;
                  case LandescodeEnum.Bb:
                      serializer.Serialize(writer, "BB");
                      return;
                  case LandescodeEnum.Bd:
                      serializer.Serialize(writer, "BD");
                      return;
                  case LandescodeEnum.Be:
                      serializer.Serialize(writer, "BE");
                      return;
                  case LandescodeEnum.Bf:
                      serializer.Serialize(writer, "BF");
                      return;
                  case LandescodeEnum.Bg:
                      serializer.Serialize(writer, "BG");
                      return;
                  case LandescodeEnum.Bh:
                      serializer.Serialize(writer, "BH");
                      return;
                  case LandescodeEnum.Bi:
                      serializer.Serialize(writer, "BI");
                      return;
                  case LandescodeEnum.Bj:
                      serializer.Serialize(writer, "BJ");
                      return;
                  case LandescodeEnum.Bl:
                      serializer.Serialize(writer, "BL");
                      return;
                  case LandescodeEnum.Bm:
                      serializer.Serialize(writer, "BM");
                      return;
                  case LandescodeEnum.Bn:
                      serializer.Serialize(writer, "BN");
                      return;
                  case LandescodeEnum.Bo:
                      serializer.Serialize(writer, "BO");
                      return;
                  case LandescodeEnum.Bq:
                      serializer.Serialize(writer, "BQ");
                      return;
                  case LandescodeEnum.Br:
                      serializer.Serialize(writer, "BR");
                      return;
                  case LandescodeEnum.Bs:
                      serializer.Serialize(writer, "BS");
                      return;
                  case LandescodeEnum.Bt:
                      serializer.Serialize(writer, "BT");
                      return;
                  case LandescodeEnum.Bv:
                      serializer.Serialize(writer, "BV");
                      return;
                  case LandescodeEnum.Bw:
                      serializer.Serialize(writer, "BW");
                      return;
                  case LandescodeEnum.By:
                      serializer.Serialize(writer, "BY");
                      return;
                  case LandescodeEnum.Bz:
                      serializer.Serialize(writer, "BZ");
                      return;
                  case LandescodeEnum.Ca:
                      serializer.Serialize(writer, "CA");
                      return;
                  case LandescodeEnum.Cc:
                      serializer.Serialize(writer, "CC");
                      return;
                  case LandescodeEnum.Cd:
                      serializer.Serialize(writer, "CD");
                      return;
                  case LandescodeEnum.Cf:
                      serializer.Serialize(writer, "CF");
                      return;
                  case LandescodeEnum.Cg:
                      serializer.Serialize(writer, "CG");
                      return;
                  case LandescodeEnum.Ch:
                      serializer.Serialize(writer, "CH");
                      return;
                  case LandescodeEnum.Ci:
                      serializer.Serialize(writer, "CI");
                      return;
                  case LandescodeEnum.Ck:
                      serializer.Serialize(writer, "CK");
                      return;
                  case LandescodeEnum.Cl:
                      serializer.Serialize(writer, "CL");
                      return;
                  case LandescodeEnum.Cm:
                      serializer.Serialize(writer, "CM");
                      return;
                  case LandescodeEnum.Cn:
                      serializer.Serialize(writer, "CN");
                      return;
                  case LandescodeEnum.Co:
                      serializer.Serialize(writer, "CO");
                      return;
                  case LandescodeEnum.Cr:
                      serializer.Serialize(writer, "CR");
                      return;
                  case LandescodeEnum.Cu:
                      serializer.Serialize(writer, "CU");
                      return;
                  case LandescodeEnum.Cv:
                      serializer.Serialize(writer, "CV");
                      return;
                  case LandescodeEnum.Cw:
                      serializer.Serialize(writer, "CW");
                      return;
                  case LandescodeEnum.Cx:
                      serializer.Serialize(writer, "CX");
                      return;
                  case LandescodeEnum.Cy:
                      serializer.Serialize(writer, "CY");
                      return;
                  case LandescodeEnum.Cz:
                      serializer.Serialize(writer, "CZ");
                      return;
                  case LandescodeEnum.De:
                      serializer.Serialize(writer, "DE");
                      return;
                  case LandescodeEnum.Dj:
                      serializer.Serialize(writer, "DJ");
                      return;
                  case LandescodeEnum.Dk:
                      serializer.Serialize(writer, "DK");
                      return;
                  case LandescodeEnum.Dm:
                      serializer.Serialize(writer, "DM");
                      return;
                  case LandescodeEnum.Do:
                      serializer.Serialize(writer, "DO");
                      return;
                  case LandescodeEnum.Dz:
                      serializer.Serialize(writer, "DZ");
                      return;
                  case LandescodeEnum.Ec:
                      serializer.Serialize(writer, "EC");
                      return;
                  case LandescodeEnum.Ee:
                      serializer.Serialize(writer, "EE");
                      return;
                  case LandescodeEnum.Eg:
                      serializer.Serialize(writer, "EG");
                      return;
                  case LandescodeEnum.Eh:
                      serializer.Serialize(writer, "EH");
                      return;
                  case LandescodeEnum.Er:
                      serializer.Serialize(writer, "ER");
                      return;
                  case LandescodeEnum.Es:
                      serializer.Serialize(writer, "ES");
                      return;
                  case LandescodeEnum.Et:
                      serializer.Serialize(writer, "ET");
                      return;
                  case LandescodeEnum.Fi:
                      serializer.Serialize(writer, "FI");
                      return;
                  case LandescodeEnum.Fj:
                      serializer.Serialize(writer, "FJ");
                      return;
                  case LandescodeEnum.Fk:
                      serializer.Serialize(writer, "FK");
                      return;
                  case LandescodeEnum.Fm:
                      serializer.Serialize(writer, "FM");
                      return;
                  case LandescodeEnum.Fo:
                      serializer.Serialize(writer, "FO");
                      return;
                  case LandescodeEnum.Fr:
                      serializer.Serialize(writer, "FR");
                      return;
                  case LandescodeEnum.Ga:
                      serializer.Serialize(writer, "GA");
                      return;
                  case LandescodeEnum.Gb:
                      serializer.Serialize(writer, "GB");
                      return;
                  case LandescodeEnum.Gd:
                      serializer.Serialize(writer, "GD");
                      return;
                  case LandescodeEnum.Ge:
                      serializer.Serialize(writer, "GE");
                      return;
                  case LandescodeEnum.Gf:
                      serializer.Serialize(writer, "GF");
                      return;
                  case LandescodeEnum.Gg:
                      serializer.Serialize(writer, "GG");
                      return;
                  case LandescodeEnum.Gh:
                      serializer.Serialize(writer, "GH");
                      return;
                  case LandescodeEnum.Gi:
                      serializer.Serialize(writer, "GI");
                      return;
                  case LandescodeEnum.Gl:
                      serializer.Serialize(writer, "GL");
                      return;
                  case LandescodeEnum.Gm:
                      serializer.Serialize(writer, "GM");
                      return;
                  case LandescodeEnum.Gn:
                      serializer.Serialize(writer, "GN");
                      return;
                  case LandescodeEnum.Gp:
                      serializer.Serialize(writer, "GP");
                      return;
                  case LandescodeEnum.Gq:
                      serializer.Serialize(writer, "GQ");
                      return;
                  case LandescodeEnum.Gr:
                      serializer.Serialize(writer, "GR");
                      return;
                  case LandescodeEnum.Gs:
                      serializer.Serialize(writer, "GS");
                      return;
                  case LandescodeEnum.Gt:
                      serializer.Serialize(writer, "GT");
                      return;
                  case LandescodeEnum.Gu:
                      serializer.Serialize(writer, "GU");
                      return;
                  case LandescodeEnum.Gw:
                      serializer.Serialize(writer, "GW");
                      return;
                  case LandescodeEnum.Gy:
                      serializer.Serialize(writer, "GY");
                      return;
                  case LandescodeEnum.Hk:
                      serializer.Serialize(writer, "HK");
                      return;
                  case LandescodeEnum.Hm:
                      serializer.Serialize(writer, "HM");
                      return;
                  case LandescodeEnum.Hn:
                      serializer.Serialize(writer, "HN");
                      return;
                  case LandescodeEnum.Hr:
                      serializer.Serialize(writer, "HR");
                      return;
                  case LandescodeEnum.Ht:
                      serializer.Serialize(writer, "HT");
                      return;
                  case LandescodeEnum.Hu:
                      serializer.Serialize(writer, "HU");
                      return;
                  case LandescodeEnum.Id:
                      serializer.Serialize(writer, "ID");
                      return;
                  case LandescodeEnum.Ie:
                      serializer.Serialize(writer, "IE");
                      return;
                  case LandescodeEnum.Il:
                      serializer.Serialize(writer, "IL");
                      return;
                  case LandescodeEnum.Im:
                      serializer.Serialize(writer, "IM");
                      return;
                  case LandescodeEnum.In:
                      serializer.Serialize(writer, "IN");
                      return;
                  case LandescodeEnum.Io:
                      serializer.Serialize(writer, "IO");
                      return;
                  case LandescodeEnum.Iq:
                      serializer.Serialize(writer, "IQ");
                      return;
                  case LandescodeEnum.Ir:
                      serializer.Serialize(writer, "IR");
                      return;
                  case LandescodeEnum.Is:
                      serializer.Serialize(writer, "IS");
                      return;
                  case LandescodeEnum.It:
                      serializer.Serialize(writer, "IT");
                      return;
                  case LandescodeEnum.Je:
                      serializer.Serialize(writer, "JE");
                      return;
                  case LandescodeEnum.Jm:
                      serializer.Serialize(writer, "JM");
                      return;
                  case LandescodeEnum.Jo:
                      serializer.Serialize(writer, "JO");
                      return;
                  case LandescodeEnum.Jp:
                      serializer.Serialize(writer, "JP");
                      return;
                  case LandescodeEnum.Ke:
                      serializer.Serialize(writer, "KE");
                      return;
                  case LandescodeEnum.Kg:
                      serializer.Serialize(writer, "KG");
                      return;
                  case LandescodeEnum.Kh:
                      serializer.Serialize(writer, "KH");
                      return;
                  case LandescodeEnum.Ki:
                      serializer.Serialize(writer, "KI");
                      return;
                  case LandescodeEnum.Km:
                      serializer.Serialize(writer, "KM");
                      return;
                  case LandescodeEnum.Kn:
                      serializer.Serialize(writer, "KN");
                      return;
                  case LandescodeEnum.Kp:
                      serializer.Serialize(writer, "KP");
                      return;
                  case LandescodeEnum.Kr:
                      serializer.Serialize(writer, "KR");
                      return;
                  case LandescodeEnum.Kw:
                      serializer.Serialize(writer, "KW");
                      return;
                  case LandescodeEnum.Ky:
                      serializer.Serialize(writer, "KY");
                      return;
                  case LandescodeEnum.Kz:
                      serializer.Serialize(writer, "KZ");
                      return;
                  case LandescodeEnum.La:
                      serializer.Serialize(writer, "LA");
                      return;
                  case LandescodeEnum.Lb:
                      serializer.Serialize(writer, "LB");
                      return;
                  case LandescodeEnum.Lc:
                      serializer.Serialize(writer, "LC");
                      return;
                  case LandescodeEnum.Li:
                      serializer.Serialize(writer, "LI");
                      return;
                  case LandescodeEnum.Lk:
                      serializer.Serialize(writer, "LK");
                      return;
                  case LandescodeEnum.Lr:
                      serializer.Serialize(writer, "LR");
                      return;
                  case LandescodeEnum.Ls:
                      serializer.Serialize(writer, "LS");
                      return;
                  case LandescodeEnum.Lt:
                      serializer.Serialize(writer, "LT");
                      return;
                  case LandescodeEnum.Lu:
                      serializer.Serialize(writer, "LU");
                      return;
                  case LandescodeEnum.Lv:
                      serializer.Serialize(writer, "LV");
                      return;
                  case LandescodeEnum.Ly:
                      serializer.Serialize(writer, "LY");
                      return;
                  case LandescodeEnum.Ma:
                      serializer.Serialize(writer, "MA");
                      return;
                  case LandescodeEnum.Mc:
                      serializer.Serialize(writer, "MC");
                      return;
                  case LandescodeEnum.Md:
                      serializer.Serialize(writer, "MD");
                      return;
                  case LandescodeEnum.Me:
                      serializer.Serialize(writer, "ME");
                      return;
                  case LandescodeEnum.Mf:
                      serializer.Serialize(writer, "MF");
                      return;
                  case LandescodeEnum.Mg:
                      serializer.Serialize(writer, "MG");
                      return;
                  case LandescodeEnum.Mh:
                      serializer.Serialize(writer, "MH");
                      return;
                  case LandescodeEnum.Mk:
                      serializer.Serialize(writer, "MK");
                      return;
                  case LandescodeEnum.Ml:
                      serializer.Serialize(writer, "ML");
                      return;
                  case LandescodeEnum.Mm:
                      serializer.Serialize(writer, "MM");
                      return;
                  case LandescodeEnum.Mn:
                      serializer.Serialize(writer, "MN");
                      return;
                  case LandescodeEnum.Mo:
                      serializer.Serialize(writer, "MO");
                      return;
                  case LandescodeEnum.Mp:
                      serializer.Serialize(writer, "MP");
                      return;
                  case LandescodeEnum.Mq:
                      serializer.Serialize(writer, "MQ");
                      return;
                  case LandescodeEnum.Mr:
                      serializer.Serialize(writer, "MR");
                      return;
                  case LandescodeEnum.Ms:
                      serializer.Serialize(writer, "MS");
                      return;
                  case LandescodeEnum.Mt:
                      serializer.Serialize(writer, "MT");
                      return;
                  case LandescodeEnum.Mu:
                      serializer.Serialize(writer, "MU");
                      return;
                  case LandescodeEnum.Mv:
                      serializer.Serialize(writer, "MV");
                      return;
                  case LandescodeEnum.Mw:
                      serializer.Serialize(writer, "MW");
                      return;
                  case LandescodeEnum.Mx:
                      serializer.Serialize(writer, "MX");
                      return;
                  case LandescodeEnum.My:
                      serializer.Serialize(writer, "MY");
                      return;
                  case LandescodeEnum.Mz:
                      serializer.Serialize(writer, "MZ");
                      return;
                  case LandescodeEnum.Na:
                      serializer.Serialize(writer, "NA");
                      return;
                  case LandescodeEnum.Nc:
                      serializer.Serialize(writer, "NC");
                      return;
                  case LandescodeEnum.Ne:
                      serializer.Serialize(writer, "NE");
                      return;
                  case LandescodeEnum.Nf:
                      serializer.Serialize(writer, "NF");
                      return;
                  case LandescodeEnum.Ng:
                      serializer.Serialize(writer, "NG");
                      return;
                  case LandescodeEnum.Ni:
                      serializer.Serialize(writer, "NI");
                      return;
                  case LandescodeEnum.Nl:
                      serializer.Serialize(writer, "NL");
                      return;
                  case LandescodeEnum.No:
                      serializer.Serialize(writer, "NO");
                      return;
                  case LandescodeEnum.Np:
                      serializer.Serialize(writer, "NP");
                      return;
                  case LandescodeEnum.Nr:
                      serializer.Serialize(writer, "NR");
                      return;
                  case LandescodeEnum.Nu:
                      serializer.Serialize(writer, "NU");
                      return;
                  case LandescodeEnum.Nz:
                      serializer.Serialize(writer, "NZ");
                      return;
                  case LandescodeEnum.Om:
                      serializer.Serialize(writer, "OM");
                      return;
                  case LandescodeEnum.Pa:
                      serializer.Serialize(writer, "PA");
                      return;
                  case LandescodeEnum.Pe:
                      serializer.Serialize(writer, "PE");
                      return;
                  case LandescodeEnum.Pf:
                      serializer.Serialize(writer, "PF");
                      return;
                  case LandescodeEnum.Pg:
                      serializer.Serialize(writer, "PG");
                      return;
                  case LandescodeEnum.Ph:
                      serializer.Serialize(writer, "PH");
                      return;
                  case LandescodeEnum.Pk:
                      serializer.Serialize(writer, "PK");
                      return;
                  case LandescodeEnum.Pl:
                      serializer.Serialize(writer, "PL");
                      return;
                  case LandescodeEnum.Pm:
                      serializer.Serialize(writer, "PM");
                      return;
                  case LandescodeEnum.Pn:
                      serializer.Serialize(writer, "PN");
                      return;
                  case LandescodeEnum.Pr:
                      serializer.Serialize(writer, "PR");
                      return;
                  case LandescodeEnum.Ps:
                      serializer.Serialize(writer, "PS");
                      return;
                  case LandescodeEnum.Pt:
                      serializer.Serialize(writer, "PT");
                      return;
                  case LandescodeEnum.Pw:
                      serializer.Serialize(writer, "PW");
                      return;
                  case LandescodeEnum.Py:
                      serializer.Serialize(writer, "PY");
                      return;
                  case LandescodeEnum.Qa:
                      serializer.Serialize(writer, "QA");
                      return;
                  case LandescodeEnum.Re:
                      serializer.Serialize(writer, "RE");
                      return;
                  case LandescodeEnum.Ro:
                      serializer.Serialize(writer, "RO");
                      return;
                  case LandescodeEnum.Rs:
                      serializer.Serialize(writer, "RS");
                      return;
                  case LandescodeEnum.Ru:
                      serializer.Serialize(writer, "RU");
                      return;
                  case LandescodeEnum.Rw:
                      serializer.Serialize(writer, "RW");
                      return;
                  case LandescodeEnum.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case LandescodeEnum.Sb:
                      serializer.Serialize(writer, "SB");
                      return;
                  case LandescodeEnum.Sc:
                      serializer.Serialize(writer, "SC");
                      return;
                  case LandescodeEnum.Sd:
                      serializer.Serialize(writer, "SD");
                      return;
                  case LandescodeEnum.Se:
                      serializer.Serialize(writer, "SE");
                      return;
                  case LandescodeEnum.Sg:
                      serializer.Serialize(writer, "SG");
                      return;
                  case LandescodeEnum.Sh:
                      serializer.Serialize(writer, "SH");
                      return;
                  case LandescodeEnum.Si:
                      serializer.Serialize(writer, "SI");
                      return;
                  case LandescodeEnum.Sj:
                      serializer.Serialize(writer, "SJ");
                      return;
                  case LandescodeEnum.Sk:
                      serializer.Serialize(writer, "SK");
                      return;
                  case LandescodeEnum.Sl:
                      serializer.Serialize(writer, "SL");
                      return;
                  case LandescodeEnum.Sm:
                      serializer.Serialize(writer, "SM");
                      return;
                  case LandescodeEnum.Sn:
                      serializer.Serialize(writer, "SN");
                      return;
                  case LandescodeEnum.So:
                      serializer.Serialize(writer, "SO");
                      return;
                  case LandescodeEnum.Sr:
                      serializer.Serialize(writer, "SR");
                      return;
                  case LandescodeEnum.Ss:
                      serializer.Serialize(writer, "SS");
                      return;
                  case LandescodeEnum.St:
                      serializer.Serialize(writer, "ST");
                      return;
                  case LandescodeEnum.Sv:
                      serializer.Serialize(writer, "SV");
                      return;
                  case LandescodeEnum.Sx:
                      serializer.Serialize(writer, "SX");
                      return;
                  case LandescodeEnum.Sy:
                      serializer.Serialize(writer, "SY");
                      return;
                  case LandescodeEnum.Sz:
                      serializer.Serialize(writer, "SZ");
                      return;
                  case LandescodeEnum.Tc:
                      serializer.Serialize(writer, "TC");
                      return;
                  case LandescodeEnum.Td:
                      serializer.Serialize(writer, "TD");
                      return;
                  case LandescodeEnum.Tf:
                      serializer.Serialize(writer, "TF");
                      return;
                  case LandescodeEnum.Tg:
                      serializer.Serialize(writer, "TG");
                      return;
                  case LandescodeEnum.Th:
                      serializer.Serialize(writer, "TH");
                      return;
                  case LandescodeEnum.Tj:
                      serializer.Serialize(writer, "TJ");
                      return;
                  case LandescodeEnum.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case LandescodeEnum.Tl:
                      serializer.Serialize(writer, "TL");
                      return;
                  case LandescodeEnum.Tm:
                      serializer.Serialize(writer, "TM");
                      return;
                  case LandescodeEnum.Tn:
                      serializer.Serialize(writer, "TN");
                      return;
                  case LandescodeEnum.To:
                      serializer.Serialize(writer, "TO");
                      return;
                  case LandescodeEnum.Tr:
                      serializer.Serialize(writer, "TR");
                      return;
                  case LandescodeEnum.Tt:
                      serializer.Serialize(writer, "TT");
                      return;
                  case LandescodeEnum.Tv:
                      serializer.Serialize(writer, "TV");
                      return;
                  case LandescodeEnum.Tw:
                      serializer.Serialize(writer, "TW");
                      return;
                  case LandescodeEnum.Tz:
                      serializer.Serialize(writer, "TZ");
                      return;
                  case LandescodeEnum.Ua:
                      serializer.Serialize(writer, "UA");
                      return;
                  case LandescodeEnum.Ug:
                      serializer.Serialize(writer, "UG");
                      return;
                  case LandescodeEnum.Um:
                      serializer.Serialize(writer, "UM");
                      return;
                  case LandescodeEnum.Us:
                      serializer.Serialize(writer, "US");
                      return;
                  case LandescodeEnum.Uy:
                      serializer.Serialize(writer, "UY");
                      return;
                  case LandescodeEnum.Uz:
                      serializer.Serialize(writer, "UZ");
                      return;
                  case LandescodeEnum.Va:
                      serializer.Serialize(writer, "VA");
                      return;
                  case LandescodeEnum.Vc:
                      serializer.Serialize(writer, "VC");
                      return;
                  case LandescodeEnum.Ve:
                      serializer.Serialize(writer, "VE");
                      return;
                  case LandescodeEnum.Vg:
                      serializer.Serialize(writer, "VG");
                      return;
                  case LandescodeEnum.Vi:
                      serializer.Serialize(writer, "VI");
                      return;
                  case LandescodeEnum.Vn:
                      serializer.Serialize(writer, "VN");
                      return;
                  case LandescodeEnum.Vu:
                      serializer.Serialize(writer, "VU");
                      return;
                  case LandescodeEnum.Wf:
                      serializer.Serialize(writer, "WF");
                      return;
                  case LandescodeEnum.Ws:
                      serializer.Serialize(writer, "WS");
                      return;
                  case LandescodeEnum.Xk:
                      serializer.Serialize(writer, "XK");
                      return;
                  case LandescodeEnum.Ye:
                      serializer.Serialize(writer, "YE");
                      return;
                  case LandescodeEnum.Yt:
                      serializer.Serialize(writer, "YT");
                      return;
                  case LandescodeEnum.Za:
                      serializer.Serialize(writer, "ZA");
                      return;
                  case LandescodeEnum.Zm:
                      serializer.Serialize(writer, "ZM");
                      return;
                  case LandescodeEnum.Zw:
                      serializer.Serialize(writer, "ZW");
                      return;
              }
              throw new Exception("Cannot marshal type LandescodeEnum");
          }
  
          public static readonly LandescodeEnumConverter Singleton = new LandescodeEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_generate_csharp_classes_snapshot[enum\Typ.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var typ = Typ.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Auflistung sämtlicher existierender Geschäftsobjekte.
      /// </summary>
      public enum TypEnum { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };
  
      public class Typ
      {
          public static TypEnum FromJson(string json) => JsonConvert.DeserializeObject<TypEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this TypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  TypEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class TypEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(TypEnum) || t == typeof(TypEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "ANGEBOT":
                      return TypEnum.Angebot;
                  case "AUSSCHREIBUNG":
                      return TypEnum.Ausschreibung;
                  case "BUENDELVERTRAG":
                      return TypEnum.Buendelvertrag;
                  case "ENERGIEMENGE":
                      return TypEnum.Energiemenge;
                  case "FREMDKOSTEN":
                      return TypEnum.Fremdkosten;
                  case "GERAET":
                      return TypEnum.Geraet;
                  case "GESCHAEFTSOBJEKT":
                      return TypEnum.Geschaeftsobjekt;
                  case "GESCHAEFTSPARTNER":
                      return TypEnum.Geschaeftspartner;
                  case "KOSTEN":
                      return TypEnum.Kosten;
                  case "LASTGANG":
                      return TypEnum.Lastgang;
                  case "MARKTLOKATION":
                      return TypEnum.Marktlokation;
                  case "MARKTTEILNEHMER":
                      return TypEnum.Marktteilnehmer;
                  case "MESSLOKATION":
                      return TypEnum.Messlokation;
                  case "NETZNUTZUNGSRECHNUNG":
                      return TypEnum.Netznutzungsrechnung;
                  case "PERSON":
                      return TypEnum.Person;
                  case "PREISBLATT":
                      return TypEnum.Preisblatt;
                  case "PREISBLATTDIENSTLEISTUNG":
                      return TypEnum.Preisblattdienstleistung;
                  case "PREISBLATTHARDWARE":
                      return TypEnum.Preisblatthardware;
                  case "PREISBLATTKONZESSIONSABGABE":
                      return TypEnum.Preisblattkonzessionsabgabe;
                  case "PREISBLATTMESSUNG":
                      return TypEnum.Preisblattmessung;
                  case "PREISBLATTNETZNUTZUNG":
                      return TypEnum.Preisblattnetznutzung;
                  case "PREISBLATTUMLAGEN":
                      return TypEnum.Preisblattumlagen;
                  case "RECHNUNG":
                      return TypEnum.Rechnung;
                  case "REGION":
                      return TypEnum.Region;
                  case "REGIONALTARIF":
                      return TypEnum.Regionaltarif;
                  case "STANDORTEIGENSCHAFTEN":
                      return TypEnum.Standorteigenschaften;
                  case "TARIF":
                      return TypEnum.Tarif;
                  case "TARIFINFO":
                      return TypEnum.Tarifinfo;
                  case "TARIFKOSTEN":
                      return TypEnum.Tarifkosten;
                  case "TARIFPREISBLATT":
                      return TypEnum.Tarifpreisblatt;
                  case "VERTRAG":
                      return TypEnum.Vertrag;
                  case "ZAEHLER":
                      return TypEnum.Zaehler;
                  case "ZEITREIHE":
                      return TypEnum.Zeitreihe;
              }
              throw new Exception("Cannot unmarshal type TypEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (TypEnum)untypedValue;
              switch (value)
              {
                  case TypEnum.Angebot:
                      serializer.Serialize(writer, "ANGEBOT");
                      return;
                  case TypEnum.Ausschreibung:
                      serializer.Serialize(writer, "AUSSCHREIBUNG");
                      return;
                  case TypEnum.Buendelvertrag:
                      serializer.Serialize(writer, "BUENDELVERTRAG");
                      return;
                  case TypEnum.Energiemenge:
                      serializer.Serialize(writer, "ENERGIEMENGE");
                      return;
                  case TypEnum.Fremdkosten:
                      serializer.Serialize(writer, "FREMDKOSTEN");
                      return;
                  case TypEnum.Geraet:
                      serializer.Serialize(writer, "GERAET");
                      return;
                  case TypEnum.Geschaeftsobjekt:
                      serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                      return;
                  case TypEnum.Geschaeftspartner:
                      serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                      return;
                  case TypEnum.Kosten:
                      serializer.Serialize(writer, "KOSTEN");
                      return;
                  case TypEnum.Lastgang:
                      serializer.Serialize(writer, "LASTGANG");
                      return;
                  case TypEnum.Marktlokation:
                      serializer.Serialize(writer, "MARKTLOKATION");
                      return;
                  case TypEnum.Marktteilnehmer:
                      serializer.Serialize(writer, "MARKTTEILNEHMER");
                      return;
                  case TypEnum.Messlokation:
                      serializer.Serialize(writer, "MESSLOKATION");
                      return;
                  case TypEnum.Netznutzungsrechnung:
                      serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                      return;
                  case TypEnum.Person:
                      serializer.Serialize(writer, "PERSON");
                      return;
                  case TypEnum.Preisblatt:
                      serializer.Serialize(writer, "PREISBLATT");
                      return;
                  case TypEnum.Preisblattdienstleistung:
                      serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                      return;
                  case TypEnum.Preisblatthardware:
                      serializer.Serialize(writer, "PREISBLATTHARDWARE");
                      return;
                  case TypEnum.Preisblattkonzessionsabgabe:
                      serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                      return;
                  case TypEnum.Preisblattmessung:
                      serializer.Serialize(writer, "PREISBLATTMESSUNG");
                      return;
                  case TypEnum.Preisblattnetznutzung:
                      serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                      return;
                  case TypEnum.Preisblattumlagen:
                      serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                      return;
                  case TypEnum.Rechnung:
                      serializer.Serialize(writer, "RECHNUNG");
                      return;
                  case TypEnum.Region:
                      serializer.Serialize(writer, "REGION");
                      return;
                  case TypEnum.Regionaltarif:
                      serializer.Serialize(writer, "REGIONALTARIF");
                      return;
                  case TypEnum.Standorteigenschaften:
                      serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                      return;
                  case TypEnum.Tarif:
                      serializer.Serialize(writer, "TARIF");
                      return;
                  case TypEnum.Tarifinfo:
                      serializer.Serialize(writer, "TARIFINFO");
                      return;
                  case TypEnum.Tarifkosten:
                      serializer.Serialize(writer, "TARIFKOSTEN");
                      return;
                  case TypEnum.Tarifpreisblatt:
                      serializer.Serialize(writer, "TARIFPREISBLATT");
                      return;
                  case TypEnum.Vertrag:
                      serializer.Serialize(writer, "VERTRAG");
                      return;
                  case TypEnum.Zaehler:
                      serializer.Serialize(writer, "ZAEHLER");
                      return;
                  case TypEnum.Zeitreihe:
                      serializer.Serialize(writer, "ZEITREIHE");
                      return;
              }
              throw new Exception("Cannot marshal type TypEnum");
          }
  
          public static readonly TypEnumConverter Singleton = new TypEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_ZusatzAttribut.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var zusatzAttribut = ZusatzAttribut.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
      /// GP-Nummer etc.) auf.
      /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
      /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
      /// type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `ZusatzAttribut JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
      /// </summary>
      public partial class ZusatzAttribut
      {
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("name")]
          public string Name { get; set; }
  
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("wert")]
          public object Wert { get; set; }
      }
  
      public partial class ZusatzAttribut
      {
          public static ZusatzAttribut FromJson(string json) => JsonConvert.DeserializeObject<ZusatzAttribut>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this ZusatzAttribut self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_bo\Angebot.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var angebot = Angebot.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Mit diesem BO kann ein Versorgungsangebot zur Strom- oder Gasversorgung oder die
      /// Teilnahme an einer Ausschreibung
      /// übertragen werden. Es können verschiedene Varianten enthalten sein (z.B. ein- und
      /// mehrjährige Laufzeit).
      /// Innerhalb jeder Variante können Teile enthalten sein, die jeweils für eine oder mehrere
      /// Marktlokationen erstellt
      /// werden.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/bo/Angebot.svg" type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `Angebot JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/bo/Angebot.json>`_
      /// </summary>
      public partial class Angebot
      {
          /// <summary>
          /// Hier können IDs anderer Systeme hinterlegt werden (z.B. eine SAP-GP-Nummer oder eine GUID)
          /// </summary>
          [JsonProperty("_id")]
          public string Id { get; set; }
  
          /// <summary>
          /// Eindeutige Nummer des Angebotes
          /// </summary>
          [JsonProperty("_typ")]
          public Typ? Typ { get; set; }
  
          /// <summary>
          /// Version der BO-Struktur aka "fachliche Versionierung"
          /// </summary>
          [JsonProperty("_version")]
          public string Version { get; set; }
  
          /// <summary>
          /// Bis zu diesem Zeitpunkt (Tag/Uhrzeit) inklusive gilt das Angebot
          /// </summary>
          [JsonProperty("anfragereferenz")]
          public string Anfragereferenz { get; set; }
  
          /// <summary>
          /// Erstellungsdatum des Angebots
          /// </summary>
          [JsonProperty("angebotsdatum")]
          public DateTimeOffset? Angebotsdatum { get; set; }
  
          /// <summary>
          /// Ersteller des Angebots
          /// </summary>
          [JsonProperty("angebotsgeber")]
          public object Angebotsgeber { get; set; }
  
          /// <summary>
          /// Empfänger des Angebots
          /// </summary>
          [JsonProperty("angebotsnehmer")]
          public object Angebotsnehmer { get; set; }
  
          /// <summary>
          /// Eindeutige Nummer des Angebotes
          /// </summary>
          [JsonProperty("angebotsnummer")]
          public string Angebotsnummer { get; set; }
  
          /// <summary>
          /// Bis zu diesem Zeitpunkt (Tag/Uhrzeit) inklusive gilt das Angebot
          /// </summary>
          [JsonProperty("bindefrist")]
          public DateTimeOffset? Bindefrist { get; set; }
  
          /// <summary>
          /// Sparte, für die das Angebot abgegeben wird (Strom/Gas)
          /// </summary>
          [JsonProperty("sparte")]
          public object Sparte { get; set; }
  
          /// <summary>
          /// Person, die als Angebotsgeber das Angebots ausgestellt hat
          /// </summary>
          [JsonProperty("unterzeichnerAngebotsgeber")]
          public object UnterzeichnerAngebotsgeber { get; set; }
  
          /// <summary>
          /// Person, die als Angebotsnehmer das Angebot angenommen hat
          /// </summary>
          [JsonProperty("unterzeichnerAngebotsnehmer")]
          public object UnterzeichnerAngebotsnehmer { get; set; }
  
          /// <summary>
          /// Eine oder mehrere Varianten des Angebots mit den Angebotsteilen;
          /// Ein Angebot besteht mindestens aus einer Variante.
          /// </summary>
          [JsonProperty("varianten")]
          public object Varianten { get; set; }
  
          [JsonProperty("zusatzAttribute")]
          public object ZusatzAttribute { get; set; }
      }
  
  
      public partial class Angebot
      {
          public static Angebot FromJson(string json) => JsonConvert.DeserializeObject<Angebot>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this Angebot self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  TypConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class TypConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "ANGEBOT":
                      return Typ.Angebot;
                  case "AUSSCHREIBUNG":
                      return Typ.Ausschreibung;
                  case "BUENDELVERTRAG":
                      return Typ.Buendelvertrag;
                  case "ENERGIEMENGE":
                      return Typ.Energiemenge;
                  case "FREMDKOSTEN":
                      return Typ.Fremdkosten;
                  case "GERAET":
                      return Typ.Geraet;
                  case "GESCHAEFTSOBJEKT":
                      return Typ.Geschaeftsobjekt;
                  case "GESCHAEFTSPARTNER":
                      return Typ.Geschaeftspartner;
                  case "KOSTEN":
                      return Typ.Kosten;
                  case "LASTGANG":
                      return Typ.Lastgang;
                  case "MARKTLOKATION":
                      return Typ.Marktlokation;
                  case "MARKTTEILNEHMER":
                      return Typ.Marktteilnehmer;
                  case "MESSLOKATION":
                      return Typ.Messlokation;
                  case "NETZNUTZUNGSRECHNUNG":
                      return Typ.Netznutzungsrechnung;
                  case "PERSON":
                      return Typ.Person;
                  case "PREISBLATT":
                      return Typ.Preisblatt;
                  case "PREISBLATTDIENSTLEISTUNG":
                      return Typ.Preisblattdienstleistung;
                  case "PREISBLATTHARDWARE":
                      return Typ.Preisblatthardware;
                  case "PREISBLATTKONZESSIONSABGABE":
                      return Typ.Preisblattkonzessionsabgabe;
                  case "PREISBLATTMESSUNG":
                      return Typ.Preisblattmessung;
                  case "PREISBLATTNETZNUTZUNG":
                      return Typ.Preisblattnetznutzung;
                  case "PREISBLATTUMLAGEN":
                      return Typ.Preisblattumlagen;
                  case "RECHNUNG":
                      return Typ.Rechnung;
                  case "REGION":
                      return Typ.Region;
                  case "REGIONALTARIF":
                      return Typ.Regionaltarif;
                  case "STANDORTEIGENSCHAFTEN":
                      return Typ.Standorteigenschaften;
                  case "TARIF":
                      return Typ.Tarif;
                  case "TARIFINFO":
                      return Typ.Tarifinfo;
                  case "TARIFKOSTEN":
                      return Typ.Tarifkosten;
                  case "TARIFPREISBLATT":
                      return Typ.Tarifpreisblatt;
                  case "VERTRAG":
                      return Typ.Vertrag;
                  case "ZAEHLER":
                      return Typ.Zaehler;
                  case "ZEITREIHE":
                      return Typ.Zeitreihe;
              }
              throw new Exception("Cannot unmarshal type Typ");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (Typ)untypedValue;
              switch (value)
              {
                  case Typ.Angebot:
                      serializer.Serialize(writer, "ANGEBOT");
                      return;
                  case Typ.Ausschreibung:
                      serializer.Serialize(writer, "AUSSCHREIBUNG");
                      return;
                  case Typ.Buendelvertrag:
                      serializer.Serialize(writer, "BUENDELVERTRAG");
                      return;
                  case Typ.Energiemenge:
                      serializer.Serialize(writer, "ENERGIEMENGE");
                      return;
                  case Typ.Fremdkosten:
                      serializer.Serialize(writer, "FREMDKOSTEN");
                      return;
                  case Typ.Geraet:
                      serializer.Serialize(writer, "GERAET");
                      return;
                  case Typ.Geschaeftsobjekt:
                      serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                      return;
                  case Typ.Geschaeftspartner:
                      serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                      return;
                  case Typ.Kosten:
                      serializer.Serialize(writer, "KOSTEN");
                      return;
                  case Typ.Lastgang:
                      serializer.Serialize(writer, "LASTGANG");
                      return;
                  case Typ.Marktlokation:
                      serializer.Serialize(writer, "MARKTLOKATION");
                      return;
                  case Typ.Marktteilnehmer:
                      serializer.Serialize(writer, "MARKTTEILNEHMER");
                      return;
                  case Typ.Messlokation:
                      serializer.Serialize(writer, "MESSLOKATION");
                      return;
                  case Typ.Netznutzungsrechnung:
                      serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                      return;
                  case Typ.Person:
                      serializer.Serialize(writer, "PERSON");
                      return;
                  case Typ.Preisblatt:
                      serializer.Serialize(writer, "PREISBLATT");
                      return;
                  case Typ.Preisblattdienstleistung:
                      serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                      return;
                  case Typ.Preisblatthardware:
                      serializer.Serialize(writer, "PREISBLATTHARDWARE");
                      return;
                  case Typ.Preisblattkonzessionsabgabe:
                      serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                      return;
                  case Typ.Preisblattmessung:
                      serializer.Serialize(writer, "PREISBLATTMESSUNG");
                      return;
                  case Typ.Preisblattnetznutzung:
                      serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                      return;
                  case Typ.Preisblattumlagen:
                      serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                      return;
                  case Typ.Rechnung:
                      serializer.Serialize(writer, "RECHNUNG");
                      return;
                  case Typ.Region:
                      serializer.Serialize(writer, "REGION");
                      return;
                  case Typ.Regionaltarif:
                      serializer.Serialize(writer, "REGIONALTARIF");
                      return;
                  case Typ.Standorteigenschaften:
                      serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                      return;
                  case Typ.Tarif:
                      serializer.Serialize(writer, "TARIF");
                      return;
                  case Typ.Tarifinfo:
                      serializer.Serialize(writer, "TARIFINFO");
                      return;
                  case Typ.Tarifkosten:
                      serializer.Serialize(writer, "TARIFKOSTEN");
                      return;
                  case Typ.Tarifpreisblatt:
                      serializer.Serialize(writer, "TARIFPREISBLATT");
                      return;
                  case Typ.Vertrag:
                      serializer.Serialize(writer, "VERTRAG");
                      return;
                  case Typ.Zaehler:
                      serializer.Serialize(writer, "ZAEHLER");
                      return;
                  case Typ.Zeitreihe:
                      serializer.Serialize(writer, "ZEITREIHE");
                      return;
              }
              throw new Exception("Cannot marshal type Typ");
          }
  
          public static readonly TypConverter Singleton = new TypConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_bo\TestDuplicates.cs]
  '''
  
  namespace BO4EDotNet
  {
      public partial class TestClass
      {
          // Original content
      }
  
      public partial class TestClass
      {
          // Duplicate content
      }
  
      public enum TestEnum
      {
          Value1,
          Value2
      }
  
      public enum TestEnum
      {
          Value1,
          Value2,
          Value3
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_com\Adresse.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var adresse = Adresse.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Contains an address that can be used for most purposes.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/Adresse.svg" type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `Adresse JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Adresse.json>`_
      /// </summary>
      public partial class Adresse
      {
          /// <summary>
          /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
          ///
          /// # pylint: disable=duplicate-code
          /// model_config = ConfigDict(
          /// alias_generator=camelize,
          /// populate_by_name=True,
          /// extra="allow",
          /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
          /// would be to create
          /// # an annotated version of Decimal, but you would have to use it everywhere in the
          /// pydantic models.
          /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
          /// json_encoders={Decimal: str},
          /// )
          /// </summary>
          [JsonProperty("_id")]
          public string Id { get; set; }
  
          /// <summary>
          /// Version der BO-Struktur aka "fachliche Versionierung"
          /// </summary>
          [JsonProperty("_version")]
          public string Version { get; set; }
  
          /// <summary>
          /// Zusatzhinweis zum Auffinden der Adresse, z.B. "3. Stock linke Wohnung"
          /// </summary>
          [JsonProperty("adresszusatz")]
          public string Adresszusatz { get; set; }
  
          /// <summary>
          /// Im Falle einer c/o-Adresse steht in diesem Attribut die Anrede. Z.B. "c/o Veronica
          /// Hauptmieterin"
          /// </summary>
          [JsonProperty("coErgaenzung")]
          public string CoErgaenzung { get; set; }
  
          /// <summary>
          /// Hausnummer inkl. Zusatz; z.B. "3", "4a"
          /// </summary>
          [JsonProperty("hausnummer")]
          public string Hausnummer { get; set; }
  
          /// <summary>
          /// Offizieller ISO-Landescode
          /// </summary>
          [JsonProperty("landescode")]
          public Landescode? Landescode { get; set; }
  
          /// <summary>
          /// Bezeichnung der Stadt; z.B. "Hückelhoven"
          /// </summary>
          [JsonProperty("ort")]
          public string Ort { get; set; }
  
          /// <summary>
          /// Bezeichnung des Ortsteils; z.B. "Mitte"
          /// </summary>
          [JsonProperty("ortsteil")]
          public string Ortsteil { get; set; }
  
          /// <summary>
          /// Im Falle einer Postfachadresse das Postfach; Damit werden Straße und Hausnummer nicht
          /// berücksichtigt
          /// </summary>
          [JsonProperty("postfach")]
          public string Postfach { get; set; }
  
          /// <summary>
          /// Die Postleitzahl; z.B: "41836"
          /// </summary>
          [JsonProperty("postleitzahl")]
          public string Postleitzahl { get; set; }
  
          /// <summary>
          /// Bezeichnung der Straße; z.B. "Weserstraße"
          /// </summary>
          [JsonProperty("strasse")]
          public string Strasse { get; set; }
  
          [JsonProperty("zusatzAttribute")]
          public ZusatzAttribut[] ZusatzAttribute { get; set; }
      }
  
      /// <summary>
      /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
      /// GP-Nummer etc.) auf.
      /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
      /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
      ///
      /// .. raw:: html
      ///
      /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
      /// type="image/svg+xml"></object>
      ///
      /// .. HINT::
      /// `ZusatzAttribut JSON Schema
      /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
      /// </summary>
      public partial class ZusatzAttribut
      {
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("name")]
          public string Name { get; set; }
  
          /// <summary>
          /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
          /// </summary>
          [JsonProperty("wert")]
          public object Wert { get; set; }
      }
  
      public partial class Adresse
      {
          public static Adresse FromJson(string json) => JsonConvert.DeserializeObject<Adresse>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this Adresse self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  LandescodeConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class LandescodeConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(Landescode) || t == typeof(Landescode?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "AD":
                      return Landescode.Ad;
                  case "AE":
                      return Landescode.Ae;
                  case "AF":
                      return Landescode.Af;
                  case "AG":
                      return Landescode.Ag;
                  case "AI":
                      return Landescode.Ai;
                  case "AL":
                      return Landescode.Al;
                  case "AM":
                      return Landescode.Am;
                  case "AO":
                      return Landescode.Ao;
                  case "AQ":
                      return Landescode.Aq;
                  case "AR":
                      return Landescode.Ar;
                  case "AS":
                      return Landescode.As;
                  case "AT":
                      return Landescode.At;
                  case "AU":
                      return Landescode.Au;
                  case "AW":
                      return Landescode.Aw;
                  case "AX":
                      return Landescode.Ax;
                  case "AZ":
                      return Landescode.Az;
                  case "BA":
                      return Landescode.Ba;
                  case "BB":
                      return Landescode.Bb;
                  case "BD":
                      return Landescode.Bd;
                  case "BE":
                      return Landescode.Be;
                  case "BF":
                      return Landescode.Bf;
                  case "BG":
                      return Landescode.Bg;
                  case "BH":
                      return Landescode.Bh;
                  case "BI":
                      return Landescode.Bi;
                  case "BJ":
                      return Landescode.Bj;
                  case "BL":
                      return Landescode.Bl;
                  case "BM":
                      return Landescode.Bm;
                  case "BN":
                      return Landescode.Bn;
                  case "BO":
                      return Landescode.Bo;
                  case "BQ":
                      return Landescode.Bq;
                  case "BR":
                      return Landescode.Br;
                  case "BS":
                      return Landescode.Bs;
                  case "BT":
                      return Landescode.Bt;
                  case "BV":
                      return Landescode.Bv;
                  case "BW":
                      return Landescode.Bw;
                  case "BY":
                      return Landescode.By;
                  case "BZ":
                      return Landescode.Bz;
                  case "CA":
                      return Landescode.Ca;
                  case "CC":
                      return Landescode.Cc;
                  case "CD":
                      return Landescode.Cd;
                  case "CF":
                      return Landescode.Cf;
                  case "CG":
                      return Landescode.Cg;
                  case "CH":
                      return Landescode.Ch;
                  case "CI":
                      return Landescode.Ci;
                  case "CK":
                      return Landescode.Ck;
                  case "CL":
                      return Landescode.Cl;
                  case "CM":
                      return Landescode.Cm;
                  case "CN":
                      return Landescode.Cn;
                  case "CO":
                      return Landescode.Co;
                  case "CR":
                      return Landescode.Cr;
                  case "CU":
                      return Landescode.Cu;
                  case "CV":
                      return Landescode.Cv;
                  case "CW":
                      return Landescode.Cw;
                  case "CX":
                      return Landescode.Cx;
                  case "CY":
                      return Landescode.Cy;
                  case "CZ":
                      return Landescode.Cz;
                  case "DE":
                      return Landescode.De;
                  case "DJ":
                      return Landescode.Dj;
                  case "DK":
                      return Landescode.Dk;
                  case "DM":
                      return Landescode.Dm;
                  case "DO":
                      return Landescode.Do;
                  case "DZ":
                      return Landescode.Dz;
                  case "EC":
                      return Landescode.Ec;
                  case "EE":
                      return Landescode.Ee;
                  case "EG":
                      return Landescode.Eg;
                  case "EH":
                      return Landescode.Eh;
                  case "ER":
                      return Landescode.Er;
                  case "ES":
                      return Landescode.Es;
                  case "ET":
                      return Landescode.Et;
                  case "FI":
                      return Landescode.Fi;
                  case "FJ":
                      return Landescode.Fj;
                  case "FK":
                      return Landescode.Fk;
                  case "FM":
                      return Landescode.Fm;
                  case "FO":
                      return Landescode.Fo;
                  case "FR":
                      return Landescode.Fr;
                  case "GA":
                      return Landescode.Ga;
                  case "GB":
                      return Landescode.Gb;
                  case "GD":
                      return Landescode.Gd;
                  case "GE":
                      return Landescode.Ge;
                  case "GF":
                      return Landescode.Gf;
                  case "GG":
                      return Landescode.Gg;
                  case "GH":
                      return Landescode.Gh;
                  case "GI":
                      return Landescode.Gi;
                  case "GL":
                      return Landescode.Gl;
                  case "GM":
                      return Landescode.Gm;
                  case "GN":
                      return Landescode.Gn;
                  case "GP":
                      return Landescode.Gp;
                  case "GQ":
                      return Landescode.Gq;
                  case "GR":
                      return Landescode.Gr;
                  case "GS":
                      return Landescode.Gs;
                  case "GT":
                      return Landescode.Gt;
                  case "GU":
                      return Landescode.Gu;
                  case "GW":
                      return Landescode.Gw;
                  case "GY":
                      return Landescode.Gy;
                  case "HK":
                      return Landescode.Hk;
                  case "HM":
                      return Landescode.Hm;
                  case "HN":
                      return Landescode.Hn;
                  case "HR":
                      return Landescode.Hr;
                  case "HT":
                      return Landescode.Ht;
                  case "HU":
                      return Landescode.Hu;
                  case "ID":
                      return Landescode.Id;
                  case "IE":
                      return Landescode.Ie;
                  case "IL":
                      return Landescode.Il;
                  case "IM":
                      return Landescode.Im;
                  case "IN":
                      return Landescode.In;
                  case "IO":
                      return Landescode.Io;
                  case "IQ":
                      return Landescode.Iq;
                  case "IR":
                      return Landescode.Ir;
                  case "IS":
                      return Landescode.Is;
                  case "IT":
                      return Landescode.It;
                  case "JE":
                      return Landescode.Je;
                  case "JM":
                      return Landescode.Jm;
                  case "JO":
                      return Landescode.Jo;
                  case "JP":
                      return Landescode.Jp;
                  case "KE":
                      return Landescode.Ke;
                  case "KG":
                      return Landescode.Kg;
                  case "KH":
                      return Landescode.Kh;
                  case "KI":
                      return Landescode.Ki;
                  case "KM":
                      return Landescode.Km;
                  case "KN":
                      return Landescode.Kn;
                  case "KP":
                      return Landescode.Kp;
                  case "KR":
                      return Landescode.Kr;
                  case "KW":
                      return Landescode.Kw;
                  case "KY":
                      return Landescode.Ky;
                  case "KZ":
                      return Landescode.Kz;
                  case "LA":
                      return Landescode.La;
                  case "LB":
                      return Landescode.Lb;
                  case "LC":
                      return Landescode.Lc;
                  case "LI":
                      return Landescode.Li;
                  case "LK":
                      return Landescode.Lk;
                  case "LR":
                      return Landescode.Lr;
                  case "LS":
                      return Landescode.Ls;
                  case "LT":
                      return Landescode.Lt;
                  case "LU":
                      return Landescode.Lu;
                  case "LV":
                      return Landescode.Lv;
                  case "LY":
                      return Landescode.Ly;
                  case "MA":
                      return Landescode.Ma;
                  case "MC":
                      return Landescode.Mc;
                  case "MD":
                      return Landescode.Md;
                  case "ME":
                      return Landescode.Me;
                  case "MF":
                      return Landescode.Mf;
                  case "MG":
                      return Landescode.Mg;
                  case "MH":
                      return Landescode.Mh;
                  case "MK":
                      return Landescode.Mk;
                  case "ML":
                      return Landescode.Ml;
                  case "MM":
                      return Landescode.Mm;
                  case "MN":
                      return Landescode.Mn;
                  case "MO":
                      return Landescode.Mo;
                  case "MP":
                      return Landescode.Mp;
                  case "MQ":
                      return Landescode.Mq;
                  case "MR":
                      return Landescode.Mr;
                  case "MS":
                      return Landescode.Ms;
                  case "MT":
                      return Landescode.Mt;
                  case "MU":
                      return Landescode.Mu;
                  case "MV":
                      return Landescode.Mv;
                  case "MW":
                      return Landescode.Mw;
                  case "MX":
                      return Landescode.Mx;
                  case "MY":
                      return Landescode.My;
                  case "MZ":
                      return Landescode.Mz;
                  case "NA":
                      return Landescode.Na;
                  case "NC":
                      return Landescode.Nc;
                  case "NE":
                      return Landescode.Ne;
                  case "NF":
                      return Landescode.Nf;
                  case "NG":
                      return Landescode.Ng;
                  case "NI":
                      return Landescode.Ni;
                  case "NL":
                      return Landescode.Nl;
                  case "NO":
                      return Landescode.No;
                  case "NP":
                      return Landescode.Np;
                  case "NR":
                      return Landescode.Nr;
                  case "NU":
                      return Landescode.Nu;
                  case "NZ":
                      return Landescode.Nz;
                  case "OM":
                      return Landescode.Om;
                  case "PA":
                      return Landescode.Pa;
                  case "PE":
                      return Landescode.Pe;
                  case "PF":
                      return Landescode.Pf;
                  case "PG":
                      return Landescode.Pg;
                  case "PH":
                      return Landescode.Ph;
                  case "PK":
                      return Landescode.Pk;
                  case "PL":
                      return Landescode.Pl;
                  case "PM":
                      return Landescode.Pm;
                  case "PN":
                      return Landescode.Pn;
                  case "PR":
                      return Landescode.Pr;
                  case "PS":
                      return Landescode.Ps;
                  case "PT":
                      return Landescode.Pt;
                  case "PW":
                      return Landescode.Pw;
                  case "PY":
                      return Landescode.Py;
                  case "QA":
                      return Landescode.Qa;
                  case "RE":
                      return Landescode.Re;
                  case "RO":
                      return Landescode.Ro;
                  case "RS":
                      return Landescode.Rs;
                  case "RU":
                      return Landescode.Ru;
                  case "RW":
                      return Landescode.Rw;
                  case "SA":
                      return Landescode.Sa;
                  case "SB":
                      return Landescode.Sb;
                  case "SC":
                      return Landescode.Sc;
                  case "SD":
                      return Landescode.Sd;
                  case "SE":
                      return Landescode.Se;
                  case "SG":
                      return Landescode.Sg;
                  case "SH":
                      return Landescode.Sh;
                  case "SI":
                      return Landescode.Si;
                  case "SJ":
                      return Landescode.Sj;
                  case "SK":
                      return Landescode.Sk;
                  case "SL":
                      return Landescode.Sl;
                  case "SM":
                      return Landescode.Sm;
                  case "SN":
                      return Landescode.Sn;
                  case "SO":
                      return Landescode.So;
                  case "SR":
                      return Landescode.Sr;
                  case "SS":
                      return Landescode.Ss;
                  case "ST":
                      return Landescode.St;
                  case "SV":
                      return Landescode.Sv;
                  case "SX":
                      return Landescode.Sx;
                  case "SY":
                      return Landescode.Sy;
                  case "SZ":
                      return Landescode.Sz;
                  case "TC":
                      return Landescode.Tc;
                  case "TD":
                      return Landescode.Td;
                  case "TF":
                      return Landescode.Tf;
                  case "TG":
                      return Landescode.Tg;
                  case "TH":
                      return Landescode.Th;
                  case "TJ":
                      return Landescode.Tj;
                  case "TK":
                      return Landescode.Tk;
                  case "TL":
                      return Landescode.Tl;
                  case "TM":
                      return Landescode.Tm;
                  case "TN":
                      return Landescode.Tn;
                  case "TO":
                      return Landescode.To;
                  case "TR":
                      return Landescode.Tr;
                  case "TT":
                      return Landescode.Tt;
                  case "TV":
                      return Landescode.Tv;
                  case "TW":
                      return Landescode.Tw;
                  case "TZ":
                      return Landescode.Tz;
                  case "UA":
                      return Landescode.Ua;
                  case "UG":
                      return Landescode.Ug;
                  case "UM":
                      return Landescode.Um;
                  case "US":
                      return Landescode.Us;
                  case "UY":
                      return Landescode.Uy;
                  case "UZ":
                      return Landescode.Uz;
                  case "VA":
                      return Landescode.Va;
                  case "VC":
                      return Landescode.Vc;
                  case "VE":
                      return Landescode.Ve;
                  case "VG":
                      return Landescode.Vg;
                  case "VI":
                      return Landescode.Vi;
                  case "VN":
                      return Landescode.Vn;
                  case "VU":
                      return Landescode.Vu;
                  case "WF":
                      return Landescode.Wf;
                  case "WS":
                      return Landescode.Ws;
                  case "XK":
                      return Landescode.Xk;
                  case "YE":
                      return Landescode.Ye;
                  case "YT":
                      return Landescode.Yt;
                  case "ZA":
                      return Landescode.Za;
                  case "ZM":
                      return Landescode.Zm;
                  case "ZW":
                      return Landescode.Zw;
              }
              throw new Exception("Cannot unmarshal type Landescode");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (Landescode)untypedValue;
              switch (value)
              {
                  case Landescode.Ad:
                      serializer.Serialize(writer, "AD");
                      return;
                  case Landescode.Ae:
                      serializer.Serialize(writer, "AE");
                      return;
                  case Landescode.Af:
                      serializer.Serialize(writer, "AF");
                      return;
                  case Landescode.Ag:
                      serializer.Serialize(writer, "AG");
                      return;
                  case Landescode.Ai:
                      serializer.Serialize(writer, "AI");
                      return;
                  case Landescode.Al:
                      serializer.Serialize(writer, "AL");
                      return;
                  case Landescode.Am:
                      serializer.Serialize(writer, "AM");
                      return;
                  case Landescode.Ao:
                      serializer.Serialize(writer, "AO");
                      return;
                  case Landescode.Aq:
                      serializer.Serialize(writer, "AQ");
                      return;
                  case Landescode.Ar:
                      serializer.Serialize(writer, "AR");
                      return;
                  case Landescode.As:
                      serializer.Serialize(writer, "AS");
                      return;
                  case Landescode.At:
                      serializer.Serialize(writer, "AT");
                      return;
                  case Landescode.Au:
                      serializer.Serialize(writer, "AU");
                      return;
                  case Landescode.Aw:
                      serializer.Serialize(writer, "AW");
                      return;
                  case Landescode.Ax:
                      serializer.Serialize(writer, "AX");
                      return;
                  case Landescode.Az:
                      serializer.Serialize(writer, "AZ");
                      return;
                  case Landescode.Ba:
                      serializer.Serialize(writer, "BA");
                      return;
                  case Landescode.Bb:
                      serializer.Serialize(writer, "BB");
                      return;
                  case Landescode.Bd:
                      serializer.Serialize(writer, "BD");
                      return;
                  case Landescode.Be:
                      serializer.Serialize(writer, "BE");
                      return;
                  case Landescode.Bf:
                      serializer.Serialize(writer, "BF");
                      return;
                  case Landescode.Bg:
                      serializer.Serialize(writer, "BG");
                      return;
                  case Landescode.Bh:
                      serializer.Serialize(writer, "BH");
                      return;
                  case Landescode.Bi:
                      serializer.Serialize(writer, "BI");
                      return;
                  case Landescode.Bj:
                      serializer.Serialize(writer, "BJ");
                      return;
                  case Landescode.Bl:
                      serializer.Serialize(writer, "BL");
                      return;
                  case Landescode.Bm:
                      serializer.Serialize(writer, "BM");
                      return;
                  case Landescode.Bn:
                      serializer.Serialize(writer, "BN");
                      return;
                  case Landescode.Bo:
                      serializer.Serialize(writer, "BO");
                      return;
                  case Landescode.Bq:
                      serializer.Serialize(writer, "BQ");
                      return;
                  case Landescode.Br:
                      serializer.Serialize(writer, "BR");
                      return;
                  case Landescode.Bs:
                      serializer.Serialize(writer, "BS");
                      return;
                  case Landescode.Bt:
                      serializer.Serialize(writer, "BT");
                      return;
                  case Landescode.Bv:
                      serializer.Serialize(writer, "BV");
                      return;
                  case Landescode.Bw:
                      serializer.Serialize(writer, "BW");
                      return;
                  case Landescode.By:
                      serializer.Serialize(writer, "BY");
                      return;
                  case Landescode.Bz:
                      serializer.Serialize(writer, "BZ");
                      return;
                  case Landescode.Ca:
                      serializer.Serialize(writer, "CA");
                      return;
                  case Landescode.Cc:
                      serializer.Serialize(writer, "CC");
                      return;
                  case Landescode.Cd:
                      serializer.Serialize(writer, "CD");
                      return;
                  case Landescode.Cf:
                      serializer.Serialize(writer, "CF");
                      return;
                  case Landescode.Cg:
                      serializer.Serialize(writer, "CG");
                      return;
                  case Landescode.Ch:
                      serializer.Serialize(writer, "CH");
                      return;
                  case Landescode.Ci:
                      serializer.Serialize(writer, "CI");
                      return;
                  case Landescode.Ck:
                      serializer.Serialize(writer, "CK");
                      return;
                  case Landescode.Cl:
                      serializer.Serialize(writer, "CL");
                      return;
                  case Landescode.Cm:
                      serializer.Serialize(writer, "CM");
                      return;
                  case Landescode.Cn:
                      serializer.Serialize(writer, "CN");
                      return;
                  case Landescode.Co:
                      serializer.Serialize(writer, "CO");
                      return;
                  case Landescode.Cr:
                      serializer.Serialize(writer, "CR");
                      return;
                  case Landescode.Cu:
                      serializer.Serialize(writer, "CU");
                      return;
                  case Landescode.Cv:
                      serializer.Serialize(writer, "CV");
                      return;
                  case Landescode.Cw:
                      serializer.Serialize(writer, "CW");
                      return;
                  case Landescode.Cx:
                      serializer.Serialize(writer, "CX");
                      return;
                  case Landescode.Cy:
                      serializer.Serialize(writer, "CY");
                      return;
                  case Landescode.Cz:
                      serializer.Serialize(writer, "CZ");
                      return;
                  case Landescode.De:
                      serializer.Serialize(writer, "DE");
                      return;
                  case Landescode.Dj:
                      serializer.Serialize(writer, "DJ");
                      return;
                  case Landescode.Dk:
                      serializer.Serialize(writer, "DK");
                      return;
                  case Landescode.Dm:
                      serializer.Serialize(writer, "DM");
                      return;
                  case Landescode.Do:
                      serializer.Serialize(writer, "DO");
                      return;
                  case Landescode.Dz:
                      serializer.Serialize(writer, "DZ");
                      return;
                  case Landescode.Ec:
                      serializer.Serialize(writer, "EC");
                      return;
                  case Landescode.Ee:
                      serializer.Serialize(writer, "EE");
                      return;
                  case Landescode.Eg:
                      serializer.Serialize(writer, "EG");
                      return;
                  case Landescode.Eh:
                      serializer.Serialize(writer, "EH");
                      return;
                  case Landescode.Er:
                      serializer.Serialize(writer, "ER");
                      return;
                  case Landescode.Es:
                      serializer.Serialize(writer, "ES");
                      return;
                  case Landescode.Et:
                      serializer.Serialize(writer, "ET");
                      return;
                  case Landescode.Fi:
                      serializer.Serialize(writer, "FI");
                      return;
                  case Landescode.Fj:
                      serializer.Serialize(writer, "FJ");
                      return;
                  case Landescode.Fk:
                      serializer.Serialize(writer, "FK");
                      return;
                  case Landescode.Fm:
                      serializer.Serialize(writer, "FM");
                      return;
                  case Landescode.Fo:
                      serializer.Serialize(writer, "FO");
                      return;
                  case Landescode.Fr:
                      serializer.Serialize(writer, "FR");
                      return;
                  case Landescode.Ga:
                      serializer.Serialize(writer, "GA");
                      return;
                  case Landescode.Gb:
                      serializer.Serialize(writer, "GB");
                      return;
                  case Landescode.Gd:
                      serializer.Serialize(writer, "GD");
                      return;
                  case Landescode.Ge:
                      serializer.Serialize(writer, "GE");
                      return;
                  case Landescode.Gf:
                      serializer.Serialize(writer, "GF");
                      return;
                  case Landescode.Gg:
                      serializer.Serialize(writer, "GG");
                      return;
                  case Landescode.Gh:
                      serializer.Serialize(writer, "GH");
                      return;
                  case Landescode.Gi:
                      serializer.Serialize(writer, "GI");
                      return;
                  case Landescode.Gl:
                      serializer.Serialize(writer, "GL");
                      return;
                  case Landescode.Gm:
                      serializer.Serialize(writer, "GM");
                      return;
                  case Landescode.Gn:
                      serializer.Serialize(writer, "GN");
                      return;
                  case Landescode.Gp:
                      serializer.Serialize(writer, "GP");
                      return;
                  case Landescode.Gq:
                      serializer.Serialize(writer, "GQ");
                      return;
                  case Landescode.Gr:
                      serializer.Serialize(writer, "GR");
                      return;
                  case Landescode.Gs:
                      serializer.Serialize(writer, "GS");
                      return;
                  case Landescode.Gt:
                      serializer.Serialize(writer, "GT");
                      return;
                  case Landescode.Gu:
                      serializer.Serialize(writer, "GU");
                      return;
                  case Landescode.Gw:
                      serializer.Serialize(writer, "GW");
                      return;
                  case Landescode.Gy:
                      serializer.Serialize(writer, "GY");
                      return;
                  case Landescode.Hk:
                      serializer.Serialize(writer, "HK");
                      return;
                  case Landescode.Hm:
                      serializer.Serialize(writer, "HM");
                      return;
                  case Landescode.Hn:
                      serializer.Serialize(writer, "HN");
                      return;
                  case Landescode.Hr:
                      serializer.Serialize(writer, "HR");
                      return;
                  case Landescode.Ht:
                      serializer.Serialize(writer, "HT");
                      return;
                  case Landescode.Hu:
                      serializer.Serialize(writer, "HU");
                      return;
                  case Landescode.Id:
                      serializer.Serialize(writer, "ID");
                      return;
                  case Landescode.Ie:
                      serializer.Serialize(writer, "IE");
                      return;
                  case Landescode.Il:
                      serializer.Serialize(writer, "IL");
                      return;
                  case Landescode.Im:
                      serializer.Serialize(writer, "IM");
                      return;
                  case Landescode.In:
                      serializer.Serialize(writer, "IN");
                      return;
                  case Landescode.Io:
                      serializer.Serialize(writer, "IO");
                      return;
                  case Landescode.Iq:
                      serializer.Serialize(writer, "IQ");
                      return;
                  case Landescode.Ir:
                      serializer.Serialize(writer, "IR");
                      return;
                  case Landescode.Is:
                      serializer.Serialize(writer, "IS");
                      return;
                  case Landescode.It:
                      serializer.Serialize(writer, "IT");
                      return;
                  case Landescode.Je:
                      serializer.Serialize(writer, "JE");
                      return;
                  case Landescode.Jm:
                      serializer.Serialize(writer, "JM");
                      return;
                  case Landescode.Jo:
                      serializer.Serialize(writer, "JO");
                      return;
                  case Landescode.Jp:
                      serializer.Serialize(writer, "JP");
                      return;
                  case Landescode.Ke:
                      serializer.Serialize(writer, "KE");
                      return;
                  case Landescode.Kg:
                      serializer.Serialize(writer, "KG");
                      return;
                  case Landescode.Kh:
                      serializer.Serialize(writer, "KH");
                      return;
                  case Landescode.Ki:
                      serializer.Serialize(writer, "KI");
                      return;
                  case Landescode.Km:
                      serializer.Serialize(writer, "KM");
                      return;
                  case Landescode.Kn:
                      serializer.Serialize(writer, "KN");
                      return;
                  case Landescode.Kp:
                      serializer.Serialize(writer, "KP");
                      return;
                  case Landescode.Kr:
                      serializer.Serialize(writer, "KR");
                      return;
                  case Landescode.Kw:
                      serializer.Serialize(writer, "KW");
                      return;
                  case Landescode.Ky:
                      serializer.Serialize(writer, "KY");
                      return;
                  case Landescode.Kz:
                      serializer.Serialize(writer, "KZ");
                      return;
                  case Landescode.La:
                      serializer.Serialize(writer, "LA");
                      return;
                  case Landescode.Lb:
                      serializer.Serialize(writer, "LB");
                      return;
                  case Landescode.Lc:
                      serializer.Serialize(writer, "LC");
                      return;
                  case Landescode.Li:
                      serializer.Serialize(writer, "LI");
                      return;
                  case Landescode.Lk:
                      serializer.Serialize(writer, "LK");
                      return;
                  case Landescode.Lr:
                      serializer.Serialize(writer, "LR");
                      return;
                  case Landescode.Ls:
                      serializer.Serialize(writer, "LS");
                      return;
                  case Landescode.Lt:
                      serializer.Serialize(writer, "LT");
                      return;
                  case Landescode.Lu:
                      serializer.Serialize(writer, "LU");
                      return;
                  case Landescode.Lv:
                      serializer.Serialize(writer, "LV");
                      return;
                  case Landescode.Ly:
                      serializer.Serialize(writer, "LY");
                      return;
                  case Landescode.Ma:
                      serializer.Serialize(writer, "MA");
                      return;
                  case Landescode.Mc:
                      serializer.Serialize(writer, "MC");
                      return;
                  case Landescode.Md:
                      serializer.Serialize(writer, "MD");
                      return;
                  case Landescode.Me:
                      serializer.Serialize(writer, "ME");
                      return;
                  case Landescode.Mf:
                      serializer.Serialize(writer, "MF");
                      return;
                  case Landescode.Mg:
                      serializer.Serialize(writer, "MG");
                      return;
                  case Landescode.Mh:
                      serializer.Serialize(writer, "MH");
                      return;
                  case Landescode.Mk:
                      serializer.Serialize(writer, "MK");
                      return;
                  case Landescode.Ml:
                      serializer.Serialize(writer, "ML");
                      return;
                  case Landescode.Mm:
                      serializer.Serialize(writer, "MM");
                      return;
                  case Landescode.Mn:
                      serializer.Serialize(writer, "MN");
                      return;
                  case Landescode.Mo:
                      serializer.Serialize(writer, "MO");
                      return;
                  case Landescode.Mp:
                      serializer.Serialize(writer, "MP");
                      return;
                  case Landescode.Mq:
                      serializer.Serialize(writer, "MQ");
                      return;
                  case Landescode.Mr:
                      serializer.Serialize(writer, "MR");
                      return;
                  case Landescode.Ms:
                      serializer.Serialize(writer, "MS");
                      return;
                  case Landescode.Mt:
                      serializer.Serialize(writer, "MT");
                      return;
                  case Landescode.Mu:
                      serializer.Serialize(writer, "MU");
                      return;
                  case Landescode.Mv:
                      serializer.Serialize(writer, "MV");
                      return;
                  case Landescode.Mw:
                      serializer.Serialize(writer, "MW");
                      return;
                  case Landescode.Mx:
                      serializer.Serialize(writer, "MX");
                      return;
                  case Landescode.My:
                      serializer.Serialize(writer, "MY");
                      return;
                  case Landescode.Mz:
                      serializer.Serialize(writer, "MZ");
                      return;
                  case Landescode.Na:
                      serializer.Serialize(writer, "NA");
                      return;
                  case Landescode.Nc:
                      serializer.Serialize(writer, "NC");
                      return;
                  case Landescode.Ne:
                      serializer.Serialize(writer, "NE");
                      return;
                  case Landescode.Nf:
                      serializer.Serialize(writer, "NF");
                      return;
                  case Landescode.Ng:
                      serializer.Serialize(writer, "NG");
                      return;
                  case Landescode.Ni:
                      serializer.Serialize(writer, "NI");
                      return;
                  case Landescode.Nl:
                      serializer.Serialize(writer, "NL");
                      return;
                  case Landescode.No:
                      serializer.Serialize(writer, "NO");
                      return;
                  case Landescode.Np:
                      serializer.Serialize(writer, "NP");
                      return;
                  case Landescode.Nr:
                      serializer.Serialize(writer, "NR");
                      return;
                  case Landescode.Nu:
                      serializer.Serialize(writer, "NU");
                      return;
                  case Landescode.Nz:
                      serializer.Serialize(writer, "NZ");
                      return;
                  case Landescode.Om:
                      serializer.Serialize(writer, "OM");
                      return;
                  case Landescode.Pa:
                      serializer.Serialize(writer, "PA");
                      return;
                  case Landescode.Pe:
                      serializer.Serialize(writer, "PE");
                      return;
                  case Landescode.Pf:
                      serializer.Serialize(writer, "PF");
                      return;
                  case Landescode.Pg:
                      serializer.Serialize(writer, "PG");
                      return;
                  case Landescode.Ph:
                      serializer.Serialize(writer, "PH");
                      return;
                  case Landescode.Pk:
                      serializer.Serialize(writer, "PK");
                      return;
                  case Landescode.Pl:
                      serializer.Serialize(writer, "PL");
                      return;
                  case Landescode.Pm:
                      serializer.Serialize(writer, "PM");
                      return;
                  case Landescode.Pn:
                      serializer.Serialize(writer, "PN");
                      return;
                  case Landescode.Pr:
                      serializer.Serialize(writer, "PR");
                      return;
                  case Landescode.Ps:
                      serializer.Serialize(writer, "PS");
                      return;
                  case Landescode.Pt:
                      serializer.Serialize(writer, "PT");
                      return;
                  case Landescode.Pw:
                      serializer.Serialize(writer, "PW");
                      return;
                  case Landescode.Py:
                      serializer.Serialize(writer, "PY");
                      return;
                  case Landescode.Qa:
                      serializer.Serialize(writer, "QA");
                      return;
                  case Landescode.Re:
                      serializer.Serialize(writer, "RE");
                      return;
                  case Landescode.Ro:
                      serializer.Serialize(writer, "RO");
                      return;
                  case Landescode.Rs:
                      serializer.Serialize(writer, "RS");
                      return;
                  case Landescode.Ru:
                      serializer.Serialize(writer, "RU");
                      return;
                  case Landescode.Rw:
                      serializer.Serialize(writer, "RW");
                      return;
                  case Landescode.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case Landescode.Sb:
                      serializer.Serialize(writer, "SB");
                      return;
                  case Landescode.Sc:
                      serializer.Serialize(writer, "SC");
                      return;
                  case Landescode.Sd:
                      serializer.Serialize(writer, "SD");
                      return;
                  case Landescode.Se:
                      serializer.Serialize(writer, "SE");
                      return;
                  case Landescode.Sg:
                      serializer.Serialize(writer, "SG");
                      return;
                  case Landescode.Sh:
                      serializer.Serialize(writer, "SH");
                      return;
                  case Landescode.Si:
                      serializer.Serialize(writer, "SI");
                      return;
                  case Landescode.Sj:
                      serializer.Serialize(writer, "SJ");
                      return;
                  case Landescode.Sk:
                      serializer.Serialize(writer, "SK");
                      return;
                  case Landescode.Sl:
                      serializer.Serialize(writer, "SL");
                      return;
                  case Landescode.Sm:
                      serializer.Serialize(writer, "SM");
                      return;
                  case Landescode.Sn:
                      serializer.Serialize(writer, "SN");
                      return;
                  case Landescode.So:
                      serializer.Serialize(writer, "SO");
                      return;
                  case Landescode.Sr:
                      serializer.Serialize(writer, "SR");
                      return;
                  case Landescode.Ss:
                      serializer.Serialize(writer, "SS");
                      return;
                  case Landescode.St:
                      serializer.Serialize(writer, "ST");
                      return;
                  case Landescode.Sv:
                      serializer.Serialize(writer, "SV");
                      return;
                  case Landescode.Sx:
                      serializer.Serialize(writer, "SX");
                      return;
                  case Landescode.Sy:
                      serializer.Serialize(writer, "SY");
                      return;
                  case Landescode.Sz:
                      serializer.Serialize(writer, "SZ");
                      return;
                  case Landescode.Tc:
                      serializer.Serialize(writer, "TC");
                      return;
                  case Landescode.Td:
                      serializer.Serialize(writer, "TD");
                      return;
                  case Landescode.Tf:
                      serializer.Serialize(writer, "TF");
                      return;
                  case Landescode.Tg:
                      serializer.Serialize(writer, "TG");
                      return;
                  case Landescode.Th:
                      serializer.Serialize(writer, "TH");
                      return;
                  case Landescode.Tj:
                      serializer.Serialize(writer, "TJ");
                      return;
                  case Landescode.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case Landescode.Tl:
                      serializer.Serialize(writer, "TL");
                      return;
                  case Landescode.Tm:
                      serializer.Serialize(writer, "TM");
                      return;
                  case Landescode.Tn:
                      serializer.Serialize(writer, "TN");
                      return;
                  case Landescode.To:
                      serializer.Serialize(writer, "TO");
                      return;
                  case Landescode.Tr:
                      serializer.Serialize(writer, "TR");
                      return;
                  case Landescode.Tt:
                      serializer.Serialize(writer, "TT");
                      return;
                  case Landescode.Tv:
                      serializer.Serialize(writer, "TV");
                      return;
                  case Landescode.Tw:
                      serializer.Serialize(writer, "TW");
                      return;
                  case Landescode.Tz:
                      serializer.Serialize(writer, "TZ");
                      return;
                  case Landescode.Ua:
                      serializer.Serialize(writer, "UA");
                      return;
                  case Landescode.Ug:
                      serializer.Serialize(writer, "UG");
                      return;
                  case Landescode.Um:
                      serializer.Serialize(writer, "UM");
                      return;
                  case Landescode.Us:
                      serializer.Serialize(writer, "US");
                      return;
                  case Landescode.Uy:
                      serializer.Serialize(writer, "UY");
                      return;
                  case Landescode.Uz:
                      serializer.Serialize(writer, "UZ");
                      return;
                  case Landescode.Va:
                      serializer.Serialize(writer, "VA");
                      return;
                  case Landescode.Vc:
                      serializer.Serialize(writer, "VC");
                      return;
                  case Landescode.Ve:
                      serializer.Serialize(writer, "VE");
                      return;
                  case Landescode.Vg:
                      serializer.Serialize(writer, "VG");
                      return;
                  case Landescode.Vi:
                      serializer.Serialize(writer, "VI");
                      return;
                  case Landescode.Vn:
                      serializer.Serialize(writer, "VN");
                      return;
                  case Landescode.Vu:
                      serializer.Serialize(writer, "VU");
                      return;
                  case Landescode.Wf:
                      serializer.Serialize(writer, "WF");
                      return;
                  case Landescode.Ws:
                      serializer.Serialize(writer, "WS");
                      return;
                  case Landescode.Xk:
                      serializer.Serialize(writer, "XK");
                      return;
                  case Landescode.Ye:
                      serializer.Serialize(writer, "YE");
                      return;
                  case Landescode.Yt:
                      serializer.Serialize(writer, "YT");
                      return;
                  case Landescode.Za:
                      serializer.Serialize(writer, "ZA");
                      return;
                  case Landescode.Zm:
                      serializer.Serialize(writer, "ZM");
                      return;
                  case Landescode.Zw:
                      serializer.Serialize(writer, "ZW");
                      return;
              }
              throw new Exception("Cannot marshal type Landescode");
          }
  
          public static readonly LandescodeConverter Singleton = new LandescodeConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_enum\AbgabeArt.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var abgabeArt = AbgabeArt.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Art der Konzessionsabgabe
      /// </summary>
      public enum AbgabeArtEnum { Kas, Sa, Sas, Ta, Tas, Tk, Tks, Ts, Tss };
  
      public class AbgabeArt
      {
          public static AbgabeArtEnum FromJson(string json) => JsonConvert.DeserializeObject<AbgabeArtEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this AbgabeArtEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  AbgabeArtEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class AbgabeArtEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(AbgabeArtEnum) || t == typeof(AbgabeArtEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "KAS":
                      return AbgabeArtEnum.Kas;
                  case "SA":
                      return AbgabeArtEnum.Sa;
                  case "SAS":
                      return AbgabeArtEnum.Sas;
                  case "TA":
                      return AbgabeArtEnum.Ta;
                  case "TAS":
                      return AbgabeArtEnum.Tas;
                  case "TK":
                      return AbgabeArtEnum.Tk;
                  case "TKS":
                      return AbgabeArtEnum.Tks;
                  case "TS":
                      return AbgabeArtEnum.Ts;
                  case "TSS":
                      return AbgabeArtEnum.Tss;
              }
              throw new Exception("Cannot unmarshal type AbgabeArtEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (AbgabeArtEnum)untypedValue;
              switch (value)
              {
                  case AbgabeArtEnum.Kas:
                      serializer.Serialize(writer, "KAS");
                      return;
                  case AbgabeArtEnum.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case AbgabeArtEnum.Sas:
                      serializer.Serialize(writer, "SAS");
                      return;
                  case AbgabeArtEnum.Ta:
                      serializer.Serialize(writer, "TA");
                      return;
                  case AbgabeArtEnum.Tas:
                      serializer.Serialize(writer, "TAS");
                      return;
                  case AbgabeArtEnum.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case AbgabeArtEnum.Tks:
                      serializer.Serialize(writer, "TKS");
                      return;
                  case AbgabeArtEnum.Ts:
                      serializer.Serialize(writer, "TS");
                      return;
                  case AbgabeArtEnum.Tss:
                      serializer.Serialize(writer, "TSS");
                      return;
              }
              throw new Exception("Cannot marshal type AbgabeArtEnum");
          }
  
          public static readonly AbgabeArtEnumConverter Singleton = new AbgabeArtEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_enum\Landescode.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var landescode = Landescode.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      public enum LandescodeEnum { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };
  
      public class Landescode
      {
          public static LandescodeEnum FromJson(string json) => JsonConvert.DeserializeObject<LandescodeEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this LandescodeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  LandescodeEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class LandescodeEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(LandescodeEnum) || t == typeof(LandescodeEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "AD":
                      return LandescodeEnum.Ad;
                  case "AE":
                      return LandescodeEnum.Ae;
                  case "AF":
                      return LandescodeEnum.Af;
                  case "AG":
                      return LandescodeEnum.Ag;
                  case "AI":
                      return LandescodeEnum.Ai;
                  case "AL":
                      return LandescodeEnum.Al;
                  case "AM":
                      return LandescodeEnum.Am;
                  case "AO":
                      return LandescodeEnum.Ao;
                  case "AQ":
                      return LandescodeEnum.Aq;
                  case "AR":
                      return LandescodeEnum.Ar;
                  case "AS":
                      return LandescodeEnum.As;
                  case "AT":
                      return LandescodeEnum.At;
                  case "AU":
                      return LandescodeEnum.Au;
                  case "AW":
                      return LandescodeEnum.Aw;
                  case "AX":
                      return LandescodeEnum.Ax;
                  case "AZ":
                      return LandescodeEnum.Az;
                  case "BA":
                      return LandescodeEnum.Ba;
                  case "BB":
                      return LandescodeEnum.Bb;
                  case "BD":
                      return LandescodeEnum.Bd;
                  case "BE":
                      return LandescodeEnum.Be;
                  case "BF":
                      return LandescodeEnum.Bf;
                  case "BG":
                      return LandescodeEnum.Bg;
                  case "BH":
                      return LandescodeEnum.Bh;
                  case "BI":
                      return LandescodeEnum.Bi;
                  case "BJ":
                      return LandescodeEnum.Bj;
                  case "BL":
                      return LandescodeEnum.Bl;
                  case "BM":
                      return LandescodeEnum.Bm;
                  case "BN":
                      return LandescodeEnum.Bn;
                  case "BO":
                      return LandescodeEnum.Bo;
                  case "BQ":
                      return LandescodeEnum.Bq;
                  case "BR":
                      return LandescodeEnum.Br;
                  case "BS":
                      return LandescodeEnum.Bs;
                  case "BT":
                      return LandescodeEnum.Bt;
                  case "BV":
                      return LandescodeEnum.Bv;
                  case "BW":
                      return LandescodeEnum.Bw;
                  case "BY":
                      return LandescodeEnum.By;
                  case "BZ":
                      return LandescodeEnum.Bz;
                  case "CA":
                      return LandescodeEnum.Ca;
                  case "CC":
                      return LandescodeEnum.Cc;
                  case "CD":
                      return LandescodeEnum.Cd;
                  case "CF":
                      return LandescodeEnum.Cf;
                  case "CG":
                      return LandescodeEnum.Cg;
                  case "CH":
                      return LandescodeEnum.Ch;
                  case "CI":
                      return LandescodeEnum.Ci;
                  case "CK":
                      return LandescodeEnum.Ck;
                  case "CL":
                      return LandescodeEnum.Cl;
                  case "CM":
                      return LandescodeEnum.Cm;
                  case "CN":
                      return LandescodeEnum.Cn;
                  case "CO":
                      return LandescodeEnum.Co;
                  case "CR":
                      return LandescodeEnum.Cr;
                  case "CU":
                      return LandescodeEnum.Cu;
                  case "CV":
                      return LandescodeEnum.Cv;
                  case "CW":
                      return LandescodeEnum.Cw;
                  case "CX":
                      return LandescodeEnum.Cx;
                  case "CY":
                      return LandescodeEnum.Cy;
                  case "CZ":
                      return LandescodeEnum.Cz;
                  case "DE":
                      return LandescodeEnum.De;
                  case "DJ":
                      return LandescodeEnum.Dj;
                  case "DK":
                      return LandescodeEnum.Dk;
                  case "DM":
                      return LandescodeEnum.Dm;
                  case "DO":
                      return LandescodeEnum.Do;
                  case "DZ":
                      return LandescodeEnum.Dz;
                  case "EC":
                      return LandescodeEnum.Ec;
                  case "EE":
                      return LandescodeEnum.Ee;
                  case "EG":
                      return LandescodeEnum.Eg;
                  case "EH":
                      return LandescodeEnum.Eh;
                  case "ER":
                      return LandescodeEnum.Er;
                  case "ES":
                      return LandescodeEnum.Es;
                  case "ET":
                      return LandescodeEnum.Et;
                  case "FI":
                      return LandescodeEnum.Fi;
                  case "FJ":
                      return LandescodeEnum.Fj;
                  case "FK":
                      return LandescodeEnum.Fk;
                  case "FM":
                      return LandescodeEnum.Fm;
                  case "FO":
                      return LandescodeEnum.Fo;
                  case "FR":
                      return LandescodeEnum.Fr;
                  case "GA":
                      return LandescodeEnum.Ga;
                  case "GB":
                      return LandescodeEnum.Gb;
                  case "GD":
                      return LandescodeEnum.Gd;
                  case "GE":
                      return LandescodeEnum.Ge;
                  case "GF":
                      return LandescodeEnum.Gf;
                  case "GG":
                      return LandescodeEnum.Gg;
                  case "GH":
                      return LandescodeEnum.Gh;
                  case "GI":
                      return LandescodeEnum.Gi;
                  case "GL":
                      return LandescodeEnum.Gl;
                  case "GM":
                      return LandescodeEnum.Gm;
                  case "GN":
                      return LandescodeEnum.Gn;
                  case "GP":
                      return LandescodeEnum.Gp;
                  case "GQ":
                      return LandescodeEnum.Gq;
                  case "GR":
                      return LandescodeEnum.Gr;
                  case "GS":
                      return LandescodeEnum.Gs;
                  case "GT":
                      return LandescodeEnum.Gt;
                  case "GU":
                      return LandescodeEnum.Gu;
                  case "GW":
                      return LandescodeEnum.Gw;
                  case "GY":
                      return LandescodeEnum.Gy;
                  case "HK":
                      return LandescodeEnum.Hk;
                  case "HM":
                      return LandescodeEnum.Hm;
                  case "HN":
                      return LandescodeEnum.Hn;
                  case "HR":
                      return LandescodeEnum.Hr;
                  case "HT":
                      return LandescodeEnum.Ht;
                  case "HU":
                      return LandescodeEnum.Hu;
                  case "ID":
                      return LandescodeEnum.Id;
                  case "IE":
                      return LandescodeEnum.Ie;
                  case "IL":
                      return LandescodeEnum.Il;
                  case "IM":
                      return LandescodeEnum.Im;
                  case "IN":
                      return LandescodeEnum.In;
                  case "IO":
                      return LandescodeEnum.Io;
                  case "IQ":
                      return LandescodeEnum.Iq;
                  case "IR":
                      return LandescodeEnum.Ir;
                  case "IS":
                      return LandescodeEnum.Is;
                  case "IT":
                      return LandescodeEnum.It;
                  case "JE":
                      return LandescodeEnum.Je;
                  case "JM":
                      return LandescodeEnum.Jm;
                  case "JO":
                      return LandescodeEnum.Jo;
                  case "JP":
                      return LandescodeEnum.Jp;
                  case "KE":
                      return LandescodeEnum.Ke;
                  case "KG":
                      return LandescodeEnum.Kg;
                  case "KH":
                      return LandescodeEnum.Kh;
                  case "KI":
                      return LandescodeEnum.Ki;
                  case "KM":
                      return LandescodeEnum.Km;
                  case "KN":
                      return LandescodeEnum.Kn;
                  case "KP":
                      return LandescodeEnum.Kp;
                  case "KR":
                      return LandescodeEnum.Kr;
                  case "KW":
                      return LandescodeEnum.Kw;
                  case "KY":
                      return LandescodeEnum.Ky;
                  case "KZ":
                      return LandescodeEnum.Kz;
                  case "LA":
                      return LandescodeEnum.La;
                  case "LB":
                      return LandescodeEnum.Lb;
                  case "LC":
                      return LandescodeEnum.Lc;
                  case "LI":
                      return LandescodeEnum.Li;
                  case "LK":
                      return LandescodeEnum.Lk;
                  case "LR":
                      return LandescodeEnum.Lr;
                  case "LS":
                      return LandescodeEnum.Ls;
                  case "LT":
                      return LandescodeEnum.Lt;
                  case "LU":
                      return LandescodeEnum.Lu;
                  case "LV":
                      return LandescodeEnum.Lv;
                  case "LY":
                      return LandescodeEnum.Ly;
                  case "MA":
                      return LandescodeEnum.Ma;
                  case "MC":
                      return LandescodeEnum.Mc;
                  case "MD":
                      return LandescodeEnum.Md;
                  case "ME":
                      return LandescodeEnum.Me;
                  case "MF":
                      return LandescodeEnum.Mf;
                  case "MG":
                      return LandescodeEnum.Mg;
                  case "MH":
                      return LandescodeEnum.Mh;
                  case "MK":
                      return LandescodeEnum.Mk;
                  case "ML":
                      return LandescodeEnum.Ml;
                  case "MM":
                      return LandescodeEnum.Mm;
                  case "MN":
                      return LandescodeEnum.Mn;
                  case "MO":
                      return LandescodeEnum.Mo;
                  case "MP":
                      return LandescodeEnum.Mp;
                  case "MQ":
                      return LandescodeEnum.Mq;
                  case "MR":
                      return LandescodeEnum.Mr;
                  case "MS":
                      return LandescodeEnum.Ms;
                  case "MT":
                      return LandescodeEnum.Mt;
                  case "MU":
                      return LandescodeEnum.Mu;
                  case "MV":
                      return LandescodeEnum.Mv;
                  case "MW":
                      return LandescodeEnum.Mw;
                  case "MX":
                      return LandescodeEnum.Mx;
                  case "MY":
                      return LandescodeEnum.My;
                  case "MZ":
                      return LandescodeEnum.Mz;
                  case "NA":
                      return LandescodeEnum.Na;
                  case "NC":
                      return LandescodeEnum.Nc;
                  case "NE":
                      return LandescodeEnum.Ne;
                  case "NF":
                      return LandescodeEnum.Nf;
                  case "NG":
                      return LandescodeEnum.Ng;
                  case "NI":
                      return LandescodeEnum.Ni;
                  case "NL":
                      return LandescodeEnum.Nl;
                  case "NO":
                      return LandescodeEnum.No;
                  case "NP":
                      return LandescodeEnum.Np;
                  case "NR":
                      return LandescodeEnum.Nr;
                  case "NU":
                      return LandescodeEnum.Nu;
                  case "NZ":
                      return LandescodeEnum.Nz;
                  case "OM":
                      return LandescodeEnum.Om;
                  case "PA":
                      return LandescodeEnum.Pa;
                  case "PE":
                      return LandescodeEnum.Pe;
                  case "PF":
                      return LandescodeEnum.Pf;
                  case "PG":
                      return LandescodeEnum.Pg;
                  case "PH":
                      return LandescodeEnum.Ph;
                  case "PK":
                      return LandescodeEnum.Pk;
                  case "PL":
                      return LandescodeEnum.Pl;
                  case "PM":
                      return LandescodeEnum.Pm;
                  case "PN":
                      return LandescodeEnum.Pn;
                  case "PR":
                      return LandescodeEnum.Pr;
                  case "PS":
                      return LandescodeEnum.Ps;
                  case "PT":
                      return LandescodeEnum.Pt;
                  case "PW":
                      return LandescodeEnum.Pw;
                  case "PY":
                      return LandescodeEnum.Py;
                  case "QA":
                      return LandescodeEnum.Qa;
                  case "RE":
                      return LandescodeEnum.Re;
                  case "RO":
                      return LandescodeEnum.Ro;
                  case "RS":
                      return LandescodeEnum.Rs;
                  case "RU":
                      return LandescodeEnum.Ru;
                  case "RW":
                      return LandescodeEnum.Rw;
                  case "SA":
                      return LandescodeEnum.Sa;
                  case "SB":
                      return LandescodeEnum.Sb;
                  case "SC":
                      return LandescodeEnum.Sc;
                  case "SD":
                      return LandescodeEnum.Sd;
                  case "SE":
                      return LandescodeEnum.Se;
                  case "SG":
                      return LandescodeEnum.Sg;
                  case "SH":
                      return LandescodeEnum.Sh;
                  case "SI":
                      return LandescodeEnum.Si;
                  case "SJ":
                      return LandescodeEnum.Sj;
                  case "SK":
                      return LandescodeEnum.Sk;
                  case "SL":
                      return LandescodeEnum.Sl;
                  case "SM":
                      return LandescodeEnum.Sm;
                  case "SN":
                      return LandescodeEnum.Sn;
                  case "SO":
                      return LandescodeEnum.So;
                  case "SR":
                      return LandescodeEnum.Sr;
                  case "SS":
                      return LandescodeEnum.Ss;
                  case "ST":
                      return LandescodeEnum.St;
                  case "SV":
                      return LandescodeEnum.Sv;
                  case "SX":
                      return LandescodeEnum.Sx;
                  case "SY":
                      return LandescodeEnum.Sy;
                  case "SZ":
                      return LandescodeEnum.Sz;
                  case "TC":
                      return LandescodeEnum.Tc;
                  case "TD":
                      return LandescodeEnum.Td;
                  case "TF":
                      return LandescodeEnum.Tf;
                  case "TG":
                      return LandescodeEnum.Tg;
                  case "TH":
                      return LandescodeEnum.Th;
                  case "TJ":
                      return LandescodeEnum.Tj;
                  case "TK":
                      return LandescodeEnum.Tk;
                  case "TL":
                      return LandescodeEnum.Tl;
                  case "TM":
                      return LandescodeEnum.Tm;
                  case "TN":
                      return LandescodeEnum.Tn;
                  case "TO":
                      return LandescodeEnum.To;
                  case "TR":
                      return LandescodeEnum.Tr;
                  case "TT":
                      return LandescodeEnum.Tt;
                  case "TV":
                      return LandescodeEnum.Tv;
                  case "TW":
                      return LandescodeEnum.Tw;
                  case "TZ":
                      return LandescodeEnum.Tz;
                  case "UA":
                      return LandescodeEnum.Ua;
                  case "UG":
                      return LandescodeEnum.Ug;
                  case "UM":
                      return LandescodeEnum.Um;
                  case "US":
                      return LandescodeEnum.Us;
                  case "UY":
                      return LandescodeEnum.Uy;
                  case "UZ":
                      return LandescodeEnum.Uz;
                  case "VA":
                      return LandescodeEnum.Va;
                  case "VC":
                      return LandescodeEnum.Vc;
                  case "VE":
                      return LandescodeEnum.Ve;
                  case "VG":
                      return LandescodeEnum.Vg;
                  case "VI":
                      return LandescodeEnum.Vi;
                  case "VN":
                      return LandescodeEnum.Vn;
                  case "VU":
                      return LandescodeEnum.Vu;
                  case "WF":
                      return LandescodeEnum.Wf;
                  case "WS":
                      return LandescodeEnum.Ws;
                  case "XK":
                      return LandescodeEnum.Xk;
                  case "YE":
                      return LandescodeEnum.Ye;
                  case "YT":
                      return LandescodeEnum.Yt;
                  case "ZA":
                      return LandescodeEnum.Za;
                  case "ZM":
                      return LandescodeEnum.Zm;
                  case "ZW":
                      return LandescodeEnum.Zw;
              }
              throw new Exception("Cannot unmarshal type LandescodeEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (LandescodeEnum)untypedValue;
              switch (value)
              {
                  case LandescodeEnum.Ad:
                      serializer.Serialize(writer, "AD");
                      return;
                  case LandescodeEnum.Ae:
                      serializer.Serialize(writer, "AE");
                      return;
                  case LandescodeEnum.Af:
                      serializer.Serialize(writer, "AF");
                      return;
                  case LandescodeEnum.Ag:
                      serializer.Serialize(writer, "AG");
                      return;
                  case LandescodeEnum.Ai:
                      serializer.Serialize(writer, "AI");
                      return;
                  case LandescodeEnum.Al:
                      serializer.Serialize(writer, "AL");
                      return;
                  case LandescodeEnum.Am:
                      serializer.Serialize(writer, "AM");
                      return;
                  case LandescodeEnum.Ao:
                      serializer.Serialize(writer, "AO");
                      return;
                  case LandescodeEnum.Aq:
                      serializer.Serialize(writer, "AQ");
                      return;
                  case LandescodeEnum.Ar:
                      serializer.Serialize(writer, "AR");
                      return;
                  case LandescodeEnum.As:
                      serializer.Serialize(writer, "AS");
                      return;
                  case LandescodeEnum.At:
                      serializer.Serialize(writer, "AT");
                      return;
                  case LandescodeEnum.Au:
                      serializer.Serialize(writer, "AU");
                      return;
                  case LandescodeEnum.Aw:
                      serializer.Serialize(writer, "AW");
                      return;
                  case LandescodeEnum.Ax:
                      serializer.Serialize(writer, "AX");
                      return;
                  case LandescodeEnum.Az:
                      serializer.Serialize(writer, "AZ");
                      return;
                  case LandescodeEnum.Ba:
                      serializer.Serialize(writer, "BA");
                      return;
                  case LandescodeEnum.Bb:
                      serializer.Serialize(writer, "BB");
                      return;
                  case LandescodeEnum.Bd:
                      serializer.Serialize(writer, "BD");
                      return;
                  case LandescodeEnum.Be:
                      serializer.Serialize(writer, "BE");
                      return;
                  case LandescodeEnum.Bf:
                      serializer.Serialize(writer, "BF");
                      return;
                  case LandescodeEnum.Bg:
                      serializer.Serialize(writer, "BG");
                      return;
                  case LandescodeEnum.Bh:
                      serializer.Serialize(writer, "BH");
                      return;
                  case LandescodeEnum.Bi:
                      serializer.Serialize(writer, "BI");
                      return;
                  case LandescodeEnum.Bj:
                      serializer.Serialize(writer, "BJ");
                      return;
                  case LandescodeEnum.Bl:
                      serializer.Serialize(writer, "BL");
                      return;
                  case LandescodeEnum.Bm:
                      serializer.Serialize(writer, "BM");
                      return;
                  case LandescodeEnum.Bn:
                      serializer.Serialize(writer, "BN");
                      return;
                  case LandescodeEnum.Bo:
                      serializer.Serialize(writer, "BO");
                      return;
                  case LandescodeEnum.Bq:
                      serializer.Serialize(writer, "BQ");
                      return;
                  case LandescodeEnum.Br:
                      serializer.Serialize(writer, "BR");
                      return;
                  case LandescodeEnum.Bs:
                      serializer.Serialize(writer, "BS");
                      return;
                  case LandescodeEnum.Bt:
                      serializer.Serialize(writer, "BT");
                      return;
                  case LandescodeEnum.Bv:
                      serializer.Serialize(writer, "BV");
                      return;
                  case LandescodeEnum.Bw:
                      serializer.Serialize(writer, "BW");
                      return;
                  case LandescodeEnum.By:
                      serializer.Serialize(writer, "BY");
                      return;
                  case LandescodeEnum.Bz:
                      serializer.Serialize(writer, "BZ");
                      return;
                  case LandescodeEnum.Ca:
                      serializer.Serialize(writer, "CA");
                      return;
                  case LandescodeEnum.Cc:
                      serializer.Serialize(writer, "CC");
                      return;
                  case LandescodeEnum.Cd:
                      serializer.Serialize(writer, "CD");
                      return;
                  case LandescodeEnum.Cf:
                      serializer.Serialize(writer, "CF");
                      return;
                  case LandescodeEnum.Cg:
                      serializer.Serialize(writer, "CG");
                      return;
                  case LandescodeEnum.Ch:
                      serializer.Serialize(writer, "CH");
                      return;
                  case LandescodeEnum.Ci:
                      serializer.Serialize(writer, "CI");
                      return;
                  case LandescodeEnum.Ck:
                      serializer.Serialize(writer, "CK");
                      return;
                  case LandescodeEnum.Cl:
                      serializer.Serialize(writer, "CL");
                      return;
                  case LandescodeEnum.Cm:
                      serializer.Serialize(writer, "CM");
                      return;
                  case LandescodeEnum.Cn:
                      serializer.Serialize(writer, "CN");
                      return;
                  case LandescodeEnum.Co:
                      serializer.Serialize(writer, "CO");
                      return;
                  case LandescodeEnum.Cr:
                      serializer.Serialize(writer, "CR");
                      return;
                  case LandescodeEnum.Cu:
                      serializer.Serialize(writer, "CU");
                      return;
                  case LandescodeEnum.Cv:
                      serializer.Serialize(writer, "CV");
                      return;
                  case LandescodeEnum.Cw:
                      serializer.Serialize(writer, "CW");
                      return;
                  case LandescodeEnum.Cx:
                      serializer.Serialize(writer, "CX");
                      return;
                  case LandescodeEnum.Cy:
                      serializer.Serialize(writer, "CY");
                      return;
                  case LandescodeEnum.Cz:
                      serializer.Serialize(writer, "CZ");
                      return;
                  case LandescodeEnum.De:
                      serializer.Serialize(writer, "DE");
                      return;
                  case LandescodeEnum.Dj:
                      serializer.Serialize(writer, "DJ");
                      return;
                  case LandescodeEnum.Dk:
                      serializer.Serialize(writer, "DK");
                      return;
                  case LandescodeEnum.Dm:
                      serializer.Serialize(writer, "DM");
                      return;
                  case LandescodeEnum.Do:
                      serializer.Serialize(writer, "DO");
                      return;
                  case LandescodeEnum.Dz:
                      serializer.Serialize(writer, "DZ");
                      return;
                  case LandescodeEnum.Ec:
                      serializer.Serialize(writer, "EC");
                      return;
                  case LandescodeEnum.Ee:
                      serializer.Serialize(writer, "EE");
                      return;
                  case LandescodeEnum.Eg:
                      serializer.Serialize(writer, "EG");
                      return;
                  case LandescodeEnum.Eh:
                      serializer.Serialize(writer, "EH");
                      return;
                  case LandescodeEnum.Er:
                      serializer.Serialize(writer, "ER");
                      return;
                  case LandescodeEnum.Es:
                      serializer.Serialize(writer, "ES");
                      return;
                  case LandescodeEnum.Et:
                      serializer.Serialize(writer, "ET");
                      return;
                  case LandescodeEnum.Fi:
                      serializer.Serialize(writer, "FI");
                      return;
                  case LandescodeEnum.Fj:
                      serializer.Serialize(writer, "FJ");
                      return;
                  case LandescodeEnum.Fk:
                      serializer.Serialize(writer, "FK");
                      return;
                  case LandescodeEnum.Fm:
                      serializer.Serialize(writer, "FM");
                      return;
                  case LandescodeEnum.Fo:
                      serializer.Serialize(writer, "FO");
                      return;
                  case LandescodeEnum.Fr:
                      serializer.Serialize(writer, "FR");
                      return;
                  case LandescodeEnum.Ga:
                      serializer.Serialize(writer, "GA");
                      return;
                  case LandescodeEnum.Gb:
                      serializer.Serialize(writer, "GB");
                      return;
                  case LandescodeEnum.Gd:
                      serializer.Serialize(writer, "GD");
                      return;
                  case LandescodeEnum.Ge:
                      serializer.Serialize(writer, "GE");
                      return;
                  case LandescodeEnum.Gf:
                      serializer.Serialize(writer, "GF");
                      return;
                  case LandescodeEnum.Gg:
                      serializer.Serialize(writer, "GG");
                      return;
                  case LandescodeEnum.Gh:
                      serializer.Serialize(writer, "GH");
                      return;
                  case LandescodeEnum.Gi:
                      serializer.Serialize(writer, "GI");
                      return;
                  case LandescodeEnum.Gl:
                      serializer.Serialize(writer, "GL");
                      return;
                  case LandescodeEnum.Gm:
                      serializer.Serialize(writer, "GM");
                      return;
                  case LandescodeEnum.Gn:
                      serializer.Serialize(writer, "GN");
                      return;
                  case LandescodeEnum.Gp:
                      serializer.Serialize(writer, "GP");
                      return;
                  case LandescodeEnum.Gq:
                      serializer.Serialize(writer, "GQ");
                      return;
                  case LandescodeEnum.Gr:
                      serializer.Serialize(writer, "GR");
                      return;
                  case LandescodeEnum.Gs:
                      serializer.Serialize(writer, "GS");
                      return;
                  case LandescodeEnum.Gt:
                      serializer.Serialize(writer, "GT");
                      return;
                  case LandescodeEnum.Gu:
                      serializer.Serialize(writer, "GU");
                      return;
                  case LandescodeEnum.Gw:
                      serializer.Serialize(writer, "GW");
                      return;
                  case LandescodeEnum.Gy:
                      serializer.Serialize(writer, "GY");
                      return;
                  case LandescodeEnum.Hk:
                      serializer.Serialize(writer, "HK");
                      return;
                  case LandescodeEnum.Hm:
                      serializer.Serialize(writer, "HM");
                      return;
                  case LandescodeEnum.Hn:
                      serializer.Serialize(writer, "HN");
                      return;
                  case LandescodeEnum.Hr:
                      serializer.Serialize(writer, "HR");
                      return;
                  case LandescodeEnum.Ht:
                      serializer.Serialize(writer, "HT");
                      return;
                  case LandescodeEnum.Hu:
                      serializer.Serialize(writer, "HU");
                      return;
                  case LandescodeEnum.Id:
                      serializer.Serialize(writer, "ID");
                      return;
                  case LandescodeEnum.Ie:
                      serializer.Serialize(writer, "IE");
                      return;
                  case LandescodeEnum.Il:
                      serializer.Serialize(writer, "IL");
                      return;
                  case LandescodeEnum.Im:
                      serializer.Serialize(writer, "IM");
                      return;
                  case LandescodeEnum.In:
                      serializer.Serialize(writer, "IN");
                      return;
                  case LandescodeEnum.Io:
                      serializer.Serialize(writer, "IO");
                      return;
                  case LandescodeEnum.Iq:
                      serializer.Serialize(writer, "IQ");
                      return;
                  case LandescodeEnum.Ir:
                      serializer.Serialize(writer, "IR");
                      return;
                  case LandescodeEnum.Is:
                      serializer.Serialize(writer, "IS");
                      return;
                  case LandescodeEnum.It:
                      serializer.Serialize(writer, "IT");
                      return;
                  case LandescodeEnum.Je:
                      serializer.Serialize(writer, "JE");
                      return;
                  case LandescodeEnum.Jm:
                      serializer.Serialize(writer, "JM");
                      return;
                  case LandescodeEnum.Jo:
                      serializer.Serialize(writer, "JO");
                      return;
                  case LandescodeEnum.Jp:
                      serializer.Serialize(writer, "JP");
                      return;
                  case LandescodeEnum.Ke:
                      serializer.Serialize(writer, "KE");
                      return;
                  case LandescodeEnum.Kg:
                      serializer.Serialize(writer, "KG");
                      return;
                  case LandescodeEnum.Kh:
                      serializer.Serialize(writer, "KH");
                      return;
                  case LandescodeEnum.Ki:
                      serializer.Serialize(writer, "KI");
                      return;
                  case LandescodeEnum.Km:
                      serializer.Serialize(writer, "KM");
                      return;
                  case LandescodeEnum.Kn:
                      serializer.Serialize(writer, "KN");
                      return;
                  case LandescodeEnum.Kp:
                      serializer.Serialize(writer, "KP");
                      return;
                  case LandescodeEnum.Kr:
                      serializer.Serialize(writer, "KR");
                      return;
                  case LandescodeEnum.Kw:
                      serializer.Serialize(writer, "KW");
                      return;
                  case LandescodeEnum.Ky:
                      serializer.Serialize(writer, "KY");
                      return;
                  case LandescodeEnum.Kz:
                      serializer.Serialize(writer, "KZ");
                      return;
                  case LandescodeEnum.La:
                      serializer.Serialize(writer, "LA");
                      return;
                  case LandescodeEnum.Lb:
                      serializer.Serialize(writer, "LB");
                      return;
                  case LandescodeEnum.Lc:
                      serializer.Serialize(writer, "LC");
                      return;
                  case LandescodeEnum.Li:
                      serializer.Serialize(writer, "LI");
                      return;
                  case LandescodeEnum.Lk:
                      serializer.Serialize(writer, "LK");
                      return;
                  case LandescodeEnum.Lr:
                      serializer.Serialize(writer, "LR");
                      return;
                  case LandescodeEnum.Ls:
                      serializer.Serialize(writer, "LS");
                      return;
                  case LandescodeEnum.Lt:
                      serializer.Serialize(writer, "LT");
                      return;
                  case LandescodeEnum.Lu:
                      serializer.Serialize(writer, "LU");
                      return;
                  case LandescodeEnum.Lv:
                      serializer.Serialize(writer, "LV");
                      return;
                  case LandescodeEnum.Ly:
                      serializer.Serialize(writer, "LY");
                      return;
                  case LandescodeEnum.Ma:
                      serializer.Serialize(writer, "MA");
                      return;
                  case LandescodeEnum.Mc:
                      serializer.Serialize(writer, "MC");
                      return;
                  case LandescodeEnum.Md:
                      serializer.Serialize(writer, "MD");
                      return;
                  case LandescodeEnum.Me:
                      serializer.Serialize(writer, "ME");
                      return;
                  case LandescodeEnum.Mf:
                      serializer.Serialize(writer, "MF");
                      return;
                  case LandescodeEnum.Mg:
                      serializer.Serialize(writer, "MG");
                      return;
                  case LandescodeEnum.Mh:
                      serializer.Serialize(writer, "MH");
                      return;
                  case LandescodeEnum.Mk:
                      serializer.Serialize(writer, "MK");
                      return;
                  case LandescodeEnum.Ml:
                      serializer.Serialize(writer, "ML");
                      return;
                  case LandescodeEnum.Mm:
                      serializer.Serialize(writer, "MM");
                      return;
                  case LandescodeEnum.Mn:
                      serializer.Serialize(writer, "MN");
                      return;
                  case LandescodeEnum.Mo:
                      serializer.Serialize(writer, "MO");
                      return;
                  case LandescodeEnum.Mp:
                      serializer.Serialize(writer, "MP");
                      return;
                  case LandescodeEnum.Mq:
                      serializer.Serialize(writer, "MQ");
                      return;
                  case LandescodeEnum.Mr:
                      serializer.Serialize(writer, "MR");
                      return;
                  case LandescodeEnum.Ms:
                      serializer.Serialize(writer, "MS");
                      return;
                  case LandescodeEnum.Mt:
                      serializer.Serialize(writer, "MT");
                      return;
                  case LandescodeEnum.Mu:
                      serializer.Serialize(writer, "MU");
                      return;
                  case LandescodeEnum.Mv:
                      serializer.Serialize(writer, "MV");
                      return;
                  case LandescodeEnum.Mw:
                      serializer.Serialize(writer, "MW");
                      return;
                  case LandescodeEnum.Mx:
                      serializer.Serialize(writer, "MX");
                      return;
                  case LandescodeEnum.My:
                      serializer.Serialize(writer, "MY");
                      return;
                  case LandescodeEnum.Mz:
                      serializer.Serialize(writer, "MZ");
                      return;
                  case LandescodeEnum.Na:
                      serializer.Serialize(writer, "NA");
                      return;
                  case LandescodeEnum.Nc:
                      serializer.Serialize(writer, "NC");
                      return;
                  case LandescodeEnum.Ne:
                      serializer.Serialize(writer, "NE");
                      return;
                  case LandescodeEnum.Nf:
                      serializer.Serialize(writer, "NF");
                      return;
                  case LandescodeEnum.Ng:
                      serializer.Serialize(writer, "NG");
                      return;
                  case LandescodeEnum.Ni:
                      serializer.Serialize(writer, "NI");
                      return;
                  case LandescodeEnum.Nl:
                      serializer.Serialize(writer, "NL");
                      return;
                  case LandescodeEnum.No:
                      serializer.Serialize(writer, "NO");
                      return;
                  case LandescodeEnum.Np:
                      serializer.Serialize(writer, "NP");
                      return;
                  case LandescodeEnum.Nr:
                      serializer.Serialize(writer, "NR");
                      return;
                  case LandescodeEnum.Nu:
                      serializer.Serialize(writer, "NU");
                      return;
                  case LandescodeEnum.Nz:
                      serializer.Serialize(writer, "NZ");
                      return;
                  case LandescodeEnum.Om:
                      serializer.Serialize(writer, "OM");
                      return;
                  case LandescodeEnum.Pa:
                      serializer.Serialize(writer, "PA");
                      return;
                  case LandescodeEnum.Pe:
                      serializer.Serialize(writer, "PE");
                      return;
                  case LandescodeEnum.Pf:
                      serializer.Serialize(writer, "PF");
                      return;
                  case LandescodeEnum.Pg:
                      serializer.Serialize(writer, "PG");
                      return;
                  case LandescodeEnum.Ph:
                      serializer.Serialize(writer, "PH");
                      return;
                  case LandescodeEnum.Pk:
                      serializer.Serialize(writer, "PK");
                      return;
                  case LandescodeEnum.Pl:
                      serializer.Serialize(writer, "PL");
                      return;
                  case LandescodeEnum.Pm:
                      serializer.Serialize(writer, "PM");
                      return;
                  case LandescodeEnum.Pn:
                      serializer.Serialize(writer, "PN");
                      return;
                  case LandescodeEnum.Pr:
                      serializer.Serialize(writer, "PR");
                      return;
                  case LandescodeEnum.Ps:
                      serializer.Serialize(writer, "PS");
                      return;
                  case LandescodeEnum.Pt:
                      serializer.Serialize(writer, "PT");
                      return;
                  case LandescodeEnum.Pw:
                      serializer.Serialize(writer, "PW");
                      return;
                  case LandescodeEnum.Py:
                      serializer.Serialize(writer, "PY");
                      return;
                  case LandescodeEnum.Qa:
                      serializer.Serialize(writer, "QA");
                      return;
                  case LandescodeEnum.Re:
                      serializer.Serialize(writer, "RE");
                      return;
                  case LandescodeEnum.Ro:
                      serializer.Serialize(writer, "RO");
                      return;
                  case LandescodeEnum.Rs:
                      serializer.Serialize(writer, "RS");
                      return;
                  case LandescodeEnum.Ru:
                      serializer.Serialize(writer, "RU");
                      return;
                  case LandescodeEnum.Rw:
                      serializer.Serialize(writer, "RW");
                      return;
                  case LandescodeEnum.Sa:
                      serializer.Serialize(writer, "SA");
                      return;
                  case LandescodeEnum.Sb:
                      serializer.Serialize(writer, "SB");
                      return;
                  case LandescodeEnum.Sc:
                      serializer.Serialize(writer, "SC");
                      return;
                  case LandescodeEnum.Sd:
                      serializer.Serialize(writer, "SD");
                      return;
                  case LandescodeEnum.Se:
                      serializer.Serialize(writer, "SE");
                      return;
                  case LandescodeEnum.Sg:
                      serializer.Serialize(writer, "SG");
                      return;
                  case LandescodeEnum.Sh:
                      serializer.Serialize(writer, "SH");
                      return;
                  case LandescodeEnum.Si:
                      serializer.Serialize(writer, "SI");
                      return;
                  case LandescodeEnum.Sj:
                      serializer.Serialize(writer, "SJ");
                      return;
                  case LandescodeEnum.Sk:
                      serializer.Serialize(writer, "SK");
                      return;
                  case LandescodeEnum.Sl:
                      serializer.Serialize(writer, "SL");
                      return;
                  case LandescodeEnum.Sm:
                      serializer.Serialize(writer, "SM");
                      return;
                  case LandescodeEnum.Sn:
                      serializer.Serialize(writer, "SN");
                      return;
                  case LandescodeEnum.So:
                      serializer.Serialize(writer, "SO");
                      return;
                  case LandescodeEnum.Sr:
                      serializer.Serialize(writer, "SR");
                      return;
                  case LandescodeEnum.Ss:
                      serializer.Serialize(writer, "SS");
                      return;
                  case LandescodeEnum.St:
                      serializer.Serialize(writer, "ST");
                      return;
                  case LandescodeEnum.Sv:
                      serializer.Serialize(writer, "SV");
                      return;
                  case LandescodeEnum.Sx:
                      serializer.Serialize(writer, "SX");
                      return;
                  case LandescodeEnum.Sy:
                      serializer.Serialize(writer, "SY");
                      return;
                  case LandescodeEnum.Sz:
                      serializer.Serialize(writer, "SZ");
                      return;
                  case LandescodeEnum.Tc:
                      serializer.Serialize(writer, "TC");
                      return;
                  case LandescodeEnum.Td:
                      serializer.Serialize(writer, "TD");
                      return;
                  case LandescodeEnum.Tf:
                      serializer.Serialize(writer, "TF");
                      return;
                  case LandescodeEnum.Tg:
                      serializer.Serialize(writer, "TG");
                      return;
                  case LandescodeEnum.Th:
                      serializer.Serialize(writer, "TH");
                      return;
                  case LandescodeEnum.Tj:
                      serializer.Serialize(writer, "TJ");
                      return;
                  case LandescodeEnum.Tk:
                      serializer.Serialize(writer, "TK");
                      return;
                  case LandescodeEnum.Tl:
                      serializer.Serialize(writer, "TL");
                      return;
                  case LandescodeEnum.Tm:
                      serializer.Serialize(writer, "TM");
                      return;
                  case LandescodeEnum.Tn:
                      serializer.Serialize(writer, "TN");
                      return;
                  case LandescodeEnum.To:
                      serializer.Serialize(writer, "TO");
                      return;
                  case LandescodeEnum.Tr:
                      serializer.Serialize(writer, "TR");
                      return;
                  case LandescodeEnum.Tt:
                      serializer.Serialize(writer, "TT");
                      return;
                  case LandescodeEnum.Tv:
                      serializer.Serialize(writer, "TV");
                      return;
                  case LandescodeEnum.Tw:
                      serializer.Serialize(writer, "TW");
                      return;
                  case LandescodeEnum.Tz:
                      serializer.Serialize(writer, "TZ");
                      return;
                  case LandescodeEnum.Ua:
                      serializer.Serialize(writer, "UA");
                      return;
                  case LandescodeEnum.Ug:
                      serializer.Serialize(writer, "UG");
                      return;
                  case LandescodeEnum.Um:
                      serializer.Serialize(writer, "UM");
                      return;
                  case LandescodeEnum.Us:
                      serializer.Serialize(writer, "US");
                      return;
                  case LandescodeEnum.Uy:
                      serializer.Serialize(writer, "UY");
                      return;
                  case LandescodeEnum.Uz:
                      serializer.Serialize(writer, "UZ");
                      return;
                  case LandescodeEnum.Va:
                      serializer.Serialize(writer, "VA");
                      return;
                  case LandescodeEnum.Vc:
                      serializer.Serialize(writer, "VC");
                      return;
                  case LandescodeEnum.Ve:
                      serializer.Serialize(writer, "VE");
                      return;
                  case LandescodeEnum.Vg:
                      serializer.Serialize(writer, "VG");
                      return;
                  case LandescodeEnum.Vi:
                      serializer.Serialize(writer, "VI");
                      return;
                  case LandescodeEnum.Vn:
                      serializer.Serialize(writer, "VN");
                      return;
                  case LandescodeEnum.Vu:
                      serializer.Serialize(writer, "VU");
                      return;
                  case LandescodeEnum.Wf:
                      serializer.Serialize(writer, "WF");
                      return;
                  case LandescodeEnum.Ws:
                      serializer.Serialize(writer, "WS");
                      return;
                  case LandescodeEnum.Xk:
                      serializer.Serialize(writer, "XK");
                      return;
                  case LandescodeEnum.Ye:
                      serializer.Serialize(writer, "YE");
                      return;
                  case LandescodeEnum.Yt:
                      serializer.Serialize(writer, "YT");
                      return;
                  case LandescodeEnum.Za:
                      serializer.Serialize(writer, "ZA");
                      return;
                  case LandescodeEnum.Zm:
                      serializer.Serialize(writer, "ZM");
                      return;
                  case LandescodeEnum.Zw:
                      serializer.Serialize(writer, "ZW");
                      return;
              }
              throw new Exception("Cannot marshal type LandescodeEnum");
          }
  
          public static readonly LandescodeEnumConverter Singleton = new LandescodeEnumConverter();
      }
  }
  
  '''
# ---
# name: TestGenerator.test_remove_duplicate_definitions[no_duplicates_enum\Typ.cs]
  '''
  // <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using BO4EDotNet;
  //
  //    var typ = Typ.FromJson(jsonString);
  
  namespace BO4EDotNet
  {
      using System;
      using System.Collections.Generic;
  
      using System.Globalization;
      using Newtonsoft.Json;
      using Newtonsoft.Json.Converters;
  
      /// <summary>
      /// Auflistung sämtlicher existierender Geschäftsobjekte.
      /// </summary>
      public enum TypEnum { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };
  
      public class Typ
      {
          public static TypEnum FromJson(string json) => JsonConvert.DeserializeObject<TypEnum>(json, BO4EDotNet.Converter.Settings);
      }
  
      public static class Serialize
      {
          public static string ToJson(this TypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
      }
  
      internal static class Converter
      {
          public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
          {
              MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
              DateParseHandling = DateParseHandling.None,
              Converters =
              {
                  TypEnumConverter.Singleton,
                  new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
              },
          };
      }
  
      internal class TypEnumConverter : JsonConverter
      {
          public override bool CanConvert(Type t) => t == typeof(TypEnum) || t == typeof(TypEnum?);
  
          public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
          {
              if (reader.TokenType == JsonToken.Null) return null;
              var value = serializer.Deserialize<string>(reader);
              switch (value)
              {
                  case "ANGEBOT":
                      return TypEnum.Angebot;
                  case "AUSSCHREIBUNG":
                      return TypEnum.Ausschreibung;
                  case "BUENDELVERTRAG":
                      return TypEnum.Buendelvertrag;
                  case "ENERGIEMENGE":
                      return TypEnum.Energiemenge;
                  case "FREMDKOSTEN":
                      return TypEnum.Fremdkosten;
                  case "GERAET":
                      return TypEnum.Geraet;
                  case "GESCHAEFTSOBJEKT":
                      return TypEnum.Geschaeftsobjekt;
                  case "GESCHAEFTSPARTNER":
                      return TypEnum.Geschaeftspartner;
                  case "KOSTEN":
                      return TypEnum.Kosten;
                  case "LASTGANG":
                      return TypEnum.Lastgang;
                  case "MARKTLOKATION":
                      return TypEnum.Marktlokation;
                  case "MARKTTEILNEHMER":
                      return TypEnum.Marktteilnehmer;
                  case "MESSLOKATION":
                      return TypEnum.Messlokation;
                  case "NETZNUTZUNGSRECHNUNG":
                      return TypEnum.Netznutzungsrechnung;
                  case "PERSON":
                      return TypEnum.Person;
                  case "PREISBLATT":
                      return TypEnum.Preisblatt;
                  case "PREISBLATTDIENSTLEISTUNG":
                      return TypEnum.Preisblattdienstleistung;
                  case "PREISBLATTHARDWARE":
                      return TypEnum.Preisblatthardware;
                  case "PREISBLATTKONZESSIONSABGABE":
                      return TypEnum.Preisblattkonzessionsabgabe;
                  case "PREISBLATTMESSUNG":
                      return TypEnum.Preisblattmessung;
                  case "PREISBLATTNETZNUTZUNG":
                      return TypEnum.Preisblattnetznutzung;
                  case "PREISBLATTUMLAGEN":
                      return TypEnum.Preisblattumlagen;
                  case "RECHNUNG":
                      return TypEnum.Rechnung;
                  case "REGION":
                      return TypEnum.Region;
                  case "REGIONALTARIF":
                      return TypEnum.Regionaltarif;
                  case "STANDORTEIGENSCHAFTEN":
                      return TypEnum.Standorteigenschaften;
                  case "TARIF":
                      return TypEnum.Tarif;
                  case "TARIFINFO":
                      return TypEnum.Tarifinfo;
                  case "TARIFKOSTEN":
                      return TypEnum.Tarifkosten;
                  case "TARIFPREISBLATT":
                      return TypEnum.Tarifpreisblatt;
                  case "VERTRAG":
                      return TypEnum.Vertrag;
                  case "ZAEHLER":
                      return TypEnum.Zaehler;
                  case "ZEITREIHE":
                      return TypEnum.Zeitreihe;
              }
              throw new Exception("Cannot unmarshal type TypEnum");
          }
  
          public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
          {
              if (untypedValue == null)
              {
                  serializer.Serialize(writer, null);
                  return;
              }
              var value = (TypEnum)untypedValue;
              switch (value)
              {
                  case TypEnum.Angebot:
                      serializer.Serialize(writer, "ANGEBOT");
                      return;
                  case TypEnum.Ausschreibung:
                      serializer.Serialize(writer, "AUSSCHREIBUNG");
                      return;
                  case TypEnum.Buendelvertrag:
                      serializer.Serialize(writer, "BUENDELVERTRAG");
                      return;
                  case TypEnum.Energiemenge:
                      serializer.Serialize(writer, "ENERGIEMENGE");
                      return;
                  case TypEnum.Fremdkosten:
                      serializer.Serialize(writer, "FREMDKOSTEN");
                      return;
                  case TypEnum.Geraet:
                      serializer.Serialize(writer, "GERAET");
                      return;
                  case TypEnum.Geschaeftsobjekt:
                      serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                      return;
                  case TypEnum.Geschaeftspartner:
                      serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                      return;
                  case TypEnum.Kosten:
                      serializer.Serialize(writer, "KOSTEN");
                      return;
                  case TypEnum.Lastgang:
                      serializer.Serialize(writer, "LASTGANG");
                      return;
                  case TypEnum.Marktlokation:
                      serializer.Serialize(writer, "MARKTLOKATION");
                      return;
                  case TypEnum.Marktteilnehmer:
                      serializer.Serialize(writer, "MARKTTEILNEHMER");
                      return;
                  case TypEnum.Messlokation:
                      serializer.Serialize(writer, "MESSLOKATION");
                      return;
                  case TypEnum.Netznutzungsrechnung:
                      serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                      return;
                  case TypEnum.Person:
                      serializer.Serialize(writer, "PERSON");
                      return;
                  case TypEnum.Preisblatt:
                      serializer.Serialize(writer, "PREISBLATT");
                      return;
                  case TypEnum.Preisblattdienstleistung:
                      serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                      return;
                  case TypEnum.Preisblatthardware:
                      serializer.Serialize(writer, "PREISBLATTHARDWARE");
                      return;
                  case TypEnum.Preisblattkonzessionsabgabe:
                      serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                      return;
                  case TypEnum.Preisblattmessung:
                      serializer.Serialize(writer, "PREISBLATTMESSUNG");
                      return;
                  case TypEnum.Preisblattnetznutzung:
                      serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                      return;
                  case TypEnum.Preisblattumlagen:
                      serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                      return;
                  case TypEnum.Rechnung:
                      serializer.Serialize(writer, "RECHNUNG");
                      return;
                  case TypEnum.Region:
                      serializer.Serialize(writer, "REGION");
                      return;
                  case TypEnum.Regionaltarif:
                      serializer.Serialize(writer, "REGIONALTARIF");
                      return;
                  case TypEnum.Standorteigenschaften:
                      serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                      return;
                  case TypEnum.Tarif:
                      serializer.Serialize(writer, "TARIF");
                      return;
                  case TypEnum.Tarifinfo:
                      serializer.Serialize(writer, "TARIFINFO");
                      return;
                  case TypEnum.Tarifkosten:
                      serializer.Serialize(writer, "TARIFKOSTEN");
                      return;
                  case TypEnum.Tarifpreisblatt:
                      serializer.Serialize(writer, "TARIFPREISBLATT");
                      return;
                  case TypEnum.Vertrag:
                      serializer.Serialize(writer, "VERTRAG");
                      return;
                  case TypEnum.Zaehler:
                      serializer.Serialize(writer, "ZAEHLER");
                      return;
                  case TypEnum.Zeitreihe:
                      serializer.Serialize(writer, "ZEITREIHE");
                      return;
              }
              throw new Exception("Cannot marshal type TypEnum");
          }
  
          public static readonly TypEnumConverter Singleton = new TypEnumConverter();
      }
  }
  
  '''
# ---
