// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var rechnung = Rechnung.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Modell für die Abbildung von Rechnungen und Netznutzungsrechnungen im Kontext der
    /// Energiewirtschaft;
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/bo/Rechnung.svg" type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Rechnung JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/bo/Rechnung.json>`_
    /// </summary>
    public partial class Rechnung
    {
        /// <summary>
        /// Hier können IDs anderer Systeme hinterlegt werden (z.B. eine SAP-GP-Nummer oder eine GUID)
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Der Zeitraum der zugrunde liegenden Lieferung zur Rechnung
        /// </summary>
        [JsonProperty("_typ")]
        public Typ? Typ { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Zu diesem Datum ist die Zahlung fällig
        /// </summary>
        [JsonProperty("faelligkeitsdatum")]
        public DateTimeOffset? Faelligkeitsdatum { get; set; }

        /// <summary>
        /// Die Summe aus Netto- und Steuerbetrag
        /// </summary>
        [JsonProperty("gesamtbrutto")]
        public Betrag Gesamtbrutto { get; set; }

        /// <summary>
        /// Die Summe der Nettobeträge der Rechnungsteile
        /// </summary>
        [JsonProperty("gesamtnetto")]
        public Betrag Gesamtnetto { get; set; }

        /// <summary>
        /// Die Summe der Steuerbeträge der Rechnungsteile
        /// </summary>
        [JsonProperty("gesamtsteuer")]
        public Betrag Gesamtsteuer { get; set; }

        /// <summary>
        /// Kennzeichen, ob es sich um ein Original (true) oder eine Kopie handelt (false)
        /// </summary>
        [JsonProperty("istOriginal")]
        public bool? IstOriginal { get; set; }

        /// <summary>
        /// Kennzeichen, ob es sich um eine simulierte Rechnung, z.B. zur Rechnungsprüfung handelt
        /// </summary>
        [JsonProperty("istSimuliert")]
        public bool? IstSimuliert { get; set; }

        /// <summary>
        /// Eine im Verwendungskontext eindeutige Nummer für die Rechnung
        /// </summary>
        [JsonProperty("istStorno")]
        public bool? IstStorno { get; set; }

        /// <summary>
        /// Marktlokation, auf die sich die Rechnung bezieht
        /// </summary>
        [JsonProperty("marktlokation")]
        public Marktlokation Marktlokation { get; set; }

        /// <summary>
        /// Messlokation, auf die sich die Rechnung bezieht
        /// </summary>
        [JsonProperty("messlokation")]
        public Messlokation Messlokation { get; set; }

        /// <summary>
        /// Aus der INVOIC entnommen, befüllt wenn es sich um eine Netznutzungsrechnung handelt
        /// </summary>
        [JsonProperty("netznutzungrechnungsart")]
        public NetznutzungRechnungsart? Netznutzungrechnungsart { get; set; }

        /// <summary>
        /// Aus der INVOIC entnommen, befüllt wenn es sich um eine Netznutzungsrechnung handelt
        /// </summary>
        [JsonProperty("netznutzungrechnungstyp")]
        public NetznutzungRechnungstyp? Netznutzungrechnungstyp { get; set; }

        /// <summary>
        /// Im Falle einer Stornorechnung (storno = true) steht hier die Rechnungsnummer der
        /// stornierten Rechnung
        /// </summary>
        [JsonProperty("originalRechnungsnummer")]
        public string OriginalRechnungsnummer { get; set; }

        /// <summary>
        /// Gesamtrabatt auf den Bruttobetrag
        /// </summary>
        [JsonProperty("rabattBrutto")]
        public Betrag RabattBrutto { get; set; }

        /// <summary>
        /// Ausstellungsdatum der Rechnung
        /// </summary>
        [JsonProperty("rechnungsdatum")]
        public DateTimeOffset? Rechnungsdatum { get; set; }

        /// <summary>
        /// Der Aussteller der Rechnung, die Rollencodenummer kennt man über den im Geschäftspartner
        /// verlinkten Marktteilnehmer
        /// </summary>
        [JsonProperty("rechnungsempfaenger")]
        public Geschaeftspartner Rechnungsempfaenger { get; set; }

        /// <summary>
        /// Der Aussteller der Rechnung, die Rollencodenummer kennt man über den im Geschäftspartner
        /// verlinkten Marktteilnehmer
        /// </summary>
        [JsonProperty("rechnungsersteller")]
        public Geschaeftspartner Rechnungsersteller { get; set; }

        /// <summary>
        /// Eine im Verwendungskontext eindeutige Nummer für die Rechnung
        /// </summary>
        [JsonProperty("rechnungsnummer")]
        public string Rechnungsnummer { get; set; }

        /// <summary>
        /// Der Zeitraum der zugrunde liegenden Lieferung zur Rechnung
        /// </summary>
        [JsonProperty("rechnungsperiode")]
        public Zeitraum Rechnungsperiode { get; set; }

        /// <summary>
        /// Die Rechnungspositionen
        /// </summary>
        [JsonProperty("rechnungspositionen")]
        public Rechnungsposition[] Rechnungspositionen { get; set; }

        /// <summary>
        /// Status der Rechnung zur Kennzeichnung des Bearbeitungsstandes
        /// </summary>
        [JsonProperty("rechnungsstatus")]
        public Rechnungsstatus? Rechnungsstatus { get; set; }

        /// <summary>
        /// Bezeichnung für die vorliegende Rechnung
        /// </summary>
        [JsonProperty("rechnungstitel")]
        public string Rechnungstitel { get; set; }

        /// <summary>
        /// Ein kontextbezogender Rechnungstyp, z.B. Netznutzungsrechnung
        /// </summary>
        [JsonProperty("rechnungstyp")]
        public Rechnungstyp? Rechnungstyp { get; set; }

        /// <summary>
        /// Sparte (Strom, Gas ...) für die die Rechnung ausgestellt ist
        /// </summary>
        [JsonProperty("sparte")]
        public Sparte? Sparte { get; set; }

        /// <summary>
        /// Sparte (Strom, Gas ...) für die die Rechnung ausgestellt ist
        /// </summary>
        [JsonProperty("steuerbetraege")]
        public Steuerbetrag[] Steuerbetraege { get; set; }

        /// <summary>
        /// Die Summe evtl. vorausgezahlter Beträge, z.B. Abschläge. Angabe als Bruttowert
        /// </summary>
        [JsonProperty("vorausgezahlt")]
        public Betrag Vorausgezahlt { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }

        /// <summary>
        /// Der zu zahlende Betrag, der sich aus (gesamtbrutto - vorausbezahlt - rabattBrutto) ergibt
        /// </summary>
        [JsonProperty("zuZahlen")]
        public Betrag ZuZahlen { get; set; }
    }


    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }
























    /// <summary>
    /// Aufzählung der Währungscodes.
    /// </summary>
    public enum Waehrungscode { Aed, Afn, All, Amd, Ang, Aoa, Ars, Aud, Awg, Azn, Bam, Bbd, Bdt, Bgn, Bhd, Bif, Bmd, Bnd, Bob, Bov, Brl, Bsd, Btn, Bwp, Byn, Byr, Bzd, Cad, Cdf, Che, Chf, Chw, Clf, Clp, Cny, Cop, Cou, Crc, Cuc, Cup, Cve, Czk, Djf, Dkk, Dop, Dzd, Egp, Ern, Etb, Eur, Fjd, Fkp, Gbp, Gel, Ghs, Gip, Gmd, Gnf, Gtq, Gyd, Hkd, Hnl, Hrk, Htg, Huf, Idr, Ils, Inr, Iqd, Irr, Isk, Jmd, Jod, Jpy, Kes, Kgs, Khr, Kmf, Kpw, Krw, Kwd, Kyd, Kzt, Lak, Lbp, Lkr, Lrd, Lsl, Ltl, Lyd, Mad, Mdl, Mga, Mkd, Mmk, Mnt, Mop, Mro, Mur, Mvr, Mwk, Mxn, Mxv, Myr, Mzn, Nad, Ngn, Nio, Nok, Npr, Nzd, Omr, Pab, Pen, Pgk, Php, Pkr, Pln, Pyg, Qar, Ron, Rsd, Rub, Rur, Rwf, Sar, Sbd, Scr, Sdg, Sek, Sgd, Shp, Sll, Sos, Srd, Ssp, Std, Svc, Syp, Szl, Thb, Tjs, Tmt, Tnd, Top, Try, Ttd, Twd, Tzs, Uah, Ugx, Usd, Usn, Uss, Uyi, Uyu, Uzs, Vef, Vnd, Vuv, Wst, Xaf, Xag, Xau, Xba, Xbb, Xbc, Xbd, Xcd, Xdr, Xof, Xpd, Xpf, Xpt, Xsu, Xts, Xua, Xxx, Yer, Zar, Zmw, Zwl };

    /// <summary>
    /// Mit dieser Aufzählung kann zwischen den Bilanzierungsmethoden bzw. -grundlagen
    /// unterschieden werden.
    /// </summary>
    public enum Bilanzierungsmethode { Pauschal, Rlm, Slp, TlpGemeinsam, TlpGetrennt };

    public enum Landescode { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };

    /// <summary>
    /// Übersicht möglicher Anreden, z.B. eines Geschäftspartners.
    /// </summary>
    public enum Anrede { Eheleute, Erbengemeinschaft, Familie, Firma, Frau, Grundstuecksgemeinschaft, Herr };

    /// <summary>
    /// Gibt an, auf welchem Weg die Person oder der Geschäftspartner kontaktiert werden kann.
    /// </summary>
    public enum Kontaktart { EMail, Fax, Postweg, Sms, Telefon };

    /// <summary>
    /// Übersicht möglicher Titel, z.B. eines Geschäftspartners.
    /// </summary>
    public enum Titel { Dr, Prof, ProfDr };

    /// <summary>
    /// Auflistung sämtlicher existierender Geschäftsobjekte.
    /// </summary>
    public enum Typ { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };

    /// <summary>
    /// Über dieses ENUM kann eine thematische Zuordnung, beispielsweise eines Ansprechpartners,
    /// vorgenommen werden.
    /// </summary>
    public enum Themengebiet { AllgemeinerInformationsaustausch, Alocat, AnUndAbmeldung, AnsprechpartnerAllgemein, AnsprechpartnerBdewDvgw, AnsprechpartnerItTechnik, Aperak, Bewegungsdaten, Bilanzierung, Bilanzkreiskoordinator, Bilanzkreisverantwortlicher, Contrl, DatenformateZertifikateVerschluesselungen, Debitorenmanagement, DemandSideManagement, EdiVereinbarung, Edifact, Einspeisung, Energiedatenmanagement, Fahrplanmanagement, Gabi, Geli, Geraeterueckgabe, Geraetewechsel, Gpke, Inbetriebnahme, Invoic, Kapazitaetsmanagement, Klaerfaelle, LastgaengeRlm, Lieferantenrahmenvertrag, Lieferantenwechsel, Mabis, Mahnwesen, Marktgebietsverantwortlicher, Marktkommunikation, MehrMindermengen, MsbMdl, Mscons, Netzabrechnung, Netzentgelte, Netzmanagement, Orders, Ordersp, Recht, Regulierungsmanagement, Reklamationen, Remadv, SperrenEntsperrenInkasso, Stammdaten, Stoerungsfaelle, TechnischeFragen, UmstellungInvoic, Utilmd, VerschluesselungSignatur, Vertragsmanagement, Vertrieb, Wim, ZaehlerstaendeSlp, Zahlungsverkehr, Zuordnungsvereinbarung };

    /// <summary>
    /// Diese Rollen kann ein Geschäftspartner einnehmen.
    /// </summary>
    public enum Geschaeftspartnerrolle { Dienstleister, Interessent, Kunde, Lieferant, Marktpartner };

    /// <summary>
    /// Hier wird festgelegt, ob der Geschäftspartner eine Person, eine Firma oder etwas anderes
    /// ist.
    /// </summary>
    public enum Organisationstyp { KommunaleEinrichtung, Privatperson, StaatlicheBehoerde, Unternehmen };

    /// <summary>
    /// Spezifiziert die Energierichtung einer Markt- und/oder Messlokation
    /// </summary>
    public enum Energierichtung { Aussp, Einsp };

    /// <summary>
    /// Unterscheidung für hoch- und niedrig-kalorisches Gas.
    /// </summary>
    public enum Gasqualitaet { HGas, LGas };

    /// <summary>
    /// List of possible Gebiettypen.
    /// </summary>
    public enum Gebiettyp { Arealnetz, Bilanzierungsgebiet, Grundversorgungsgebiet, Marktgebiet, Regelzone, Regionalnetz, Transportnetz, Versorgungsgebiet, Verteilnetz };

    /// <summary>
    /// Auflistung der Typen von Endkunden. Daraus kann das Verbrauchsprofil abgeleitet werden.
    /// </summary>
    public enum Kundentyp { BeleuchtungOeffentlich, BeleuchtungStrasse, Direktheizung, GemeinschaftMfh, Gewerbe, Haushalt, Kirche, Kwk, Ladesaeule, Landwirt, Privat, Sonstige, Speicherheizung, UnterbrEinrichtung, Waermepumpe };

    /// <summary>
    /// Auflistung möglicher Netzebenen innerhalb der Energiearten Strom und Gas.
    /// </summary>
    public enum Netzebene { Hd, Hsp, HspMspUmsp, Hss, HssHspUmsp, Md, Msp, MspNspUmsp, Nd, Nsp };

    /// <summary>
    /// Unterscheidungsmöglichkeiten für die Sparte.
    /// </summary>
    public enum Sparte { Abwasser, Fernwaerme, Gas, Nahwaerme, Strom, StromUndGas, Wasser };

    /// <summary>
    /// Verbrauchsart einer Marktlokation.
    /// </summary>
    public enum Verbrauchsart { Kl, Klw, Klws, W, Ws };

    /// <summary>
    /// Einheit: Messgrößen, die per Messung oder Vorgabe ermittelt werden können.
    /// </summary>
    public enum Mengeneinheit { Halbjahr, Jahr, Kubikmeter, Kvar, Kvarh, Kw, Kwh, Kwhk, Minute, Monat, Mw, Mwh, Prozent, Quartal, Sekunde, Stueck, Stunde, Tag, Var, Varh, ViertelStunde, W, Wh, Woche };

    /// <summary>
    /// Der Status eines Zählerstandes
    /// </summary>
    public enum Messwertstatus { Abgelesen, AngabeFuerLieferschein, Energiemengesummiert, Ersatzwert, Fehlt, NichtVerwendbar, Prognosewert, Vorlaeufigerwert, Vorschlagswert };

    /// <summary>
    /// Gibt an, ob es sich um eine Prognose oder eine Messung handelt, beispielsweise bei der
    /// Abbildung eines Verbrauchs.
    /// </summary>
    public enum Wertermittlungsverfahren { Messung, Prognose };

    /// <summary>
    /// Art der Konzessionsabgabe
    /// </summary>
    public enum AbgabeArt { Kas, Sa, Sas, Ta, Tas, Tk, Tks, Ts, Tss };

    /// <summary>
    /// Diese Rollen kann ein Marktteilnehmer einnehmen.
    /// </summary>
    public enum Marktrolle { Biko, Bkv, Btr, Dp, Eiv, Esa, Kn, Lf, Mgv, Msb, Nb, Rb, Uenb };

    /// <summary>
    /// Verwendungszweck der Werte Marktlokation
    /// </summary>
    public enum Verwendungszweck { Bilanzkreisabrechnung, Endkundenabrechnung, ErmittlungAusgeglichenheitBilanzkreis, Mehrmindermengenabrechnung, Netznutzungsabrechnung, UebermittlungAnDasHknr };

    /// <summary>
    /// Wärmenutzung Marktlokation
    /// </summary>
    public enum Waermenutzung { Direktheizung, Speicherheizung, Waermepumpe };

    /// <summary>
    /// Mit dieser Aufzählung können arithmetische Operationen festgelegt werden.
    /// </summary>
    public enum ArithmetischeOperation { Addition, Division, Multiplikation, Subtraktion };

    /// <summary>
    /// Auflistung möglicher übergreifenden Geräteklassen.
    /// </summary>
    public enum Geraeteklasse { Kommunikationseinrichtung, Mengenumwerter, SmartmeterGateway, Steuerbox, TechnischeSteuereinrichtung, Wandler, Zaehleinrichtung };

    /// <summary>
    /// Auflistung möglicher abzurechnender Gerätetypen.
    /// </summary>
    public enum Geraetetyp { Blockstromwandler, Datenlogger, DslKom, Edl21, Edl40, Edl40_Zaehleraufsatz, EthernetKom, HoechstbelastungsAnzeiger, Impulsgeber, IntelligentesMessystem, Kombimesswandler, KombimesswandlerImsMme, Kommunikationsanschluss, KompaktMu, LteKom, Mengenumwerter, MesswandlersatzImsMme, Modem, ModemFestnetz, ModemFunk, ModemGprs, ModemGprsMLg, ModemGsm, ModemGsmMLg, ModemGsmOLg, ModerneMesseinrichtung, Multiplexanlage, OptionaleZusZaehleinrichtung, Pauschalanlage, PlcKom, Rundsteuerempfaenger, RundsteuerempfaengerImsMme, SonstigesGeraet, Spannungswandler, Steuereinrichtung, Stromwandler, Summationsgeraet, SystemMu, Tarifschaltgeraet, TarifschaltgeraetImsMme, Telefonanschluss, Telekommunikationseinrichtung, TemperaturKompensation, TemperaturMu, Verstaerkeranlage, ZustandsMu };

    /// <summary>
    /// Auflistung möglicher abzurechnender Dienstleistungen.
    /// </summary>
    public enum Dienstleistungstyp { AblesungHalbjaehrlich, AblesungJaehrlich, AblesungMonatlich, AblesungVierteljaehrlich, AblesungZusaetzlichKunde, AblesungZusaetzlichMsb, Auslesung2XTaeglichFernauslesung, AuslesungFernauslesung, AuslesungFernauslesungZusaetzlichMsb, AuslesungJaehrlichFernauslesung, AuslesungKompaktmengenumwerter, AuslesungManuellMsb, AuslesungMde, AuslesungMoatlichFernauslesung, AuslesungMonatlichFernauslesung, AuslesungStuendlichFernauslesung, AuslesungSystemmengenumwerter, AuslesungTaeglichFernauslesung, AuslesungTemperaturmengenumwerter, AuslesungVorgang, AuslesungZustandsmengenumwerter, DatenbereitstellungEinmalig, DatenbereitstellungHalbjaehrlich, DatenbereitstellungHistorischeLg, DatenbereitstellungJaehrlich, DatenbereitstellungMonatlich, DatenbereitstellungMonatlichZusaetzlich, DatenbereitstellungStuendlich, DatenbereitstellungTaeglich, DatenbereitstellungVierteljaehrlich, DatenbereitstellungWoechentlich, Entsperrung, Inkassokosten, Mahnkosten, Sperrung };

    /// <summary>
    /// Befestigungsart von Zählern
    /// </summary>
    public enum Befestigungsart { Dreipunkt, Einstutzen, Hutschiene, Stecktechnik, Zweistutzen };

    /// <summary>
    /// Die Messwerterfassung des Zählers
    /// </summary>
    public enum Messwerterfassung { Fernauslesbar, ManuellAusgelesene };

    /// <summary>
    /// Die Registeranzahl wird verwendet zur Charakterisierung von Zählern und daraus
    /// resultierenden Tarifen.
    /// </summary>
    public enum Registeranzahl { Eintarif, Mehrtarif, Zweitarif };

    /// <summary>
    /// Gibt an, ob es sich um einen Einrichtungs- oder Zweirichtungszähler handelt.
    /// </summary>
    public enum Zaehlerauspraegung { Einrichtungszaehler, Zweirichtungszaehler };

    /// <summary>
    /// Auflistung möglicher Größen von Zählern
    /// </summary>
    public enum Zaehlergroesse { G10, G100, G1000, G10000, G12500, G16, G160, G1600, G16000, G25, G250, G2500, G2Komma5, G4, G40, G400, G4000, G6, G65, G650, G6500 };

    /// <summary>
    /// Bei diesem Enum handelt es sich um die Abbildung von Zählertypen der Sparten Strom und
    /// Gas.
    /// </summary>
    public enum Zaehlertyp { Balgengaszaehler, Drehkolbenzaehler, Drehstromzaehler, ElektronischerZaehler, IntelligentesMesssystem, Leistungszaehler, Maximumzaehler, ModerneMesseinrichtung, Turbinenradgaszaehler, Ultraschallgaszaehler, Wechselstromzaehler, Wirbelgaszaehler };

    /// <summary>
    /// Bei diesem Enum handelt es sich um die Abbildung von besonderen Zählertyp-Spezifikationen
    /// der Sparten Strom und Gas.
    /// </summary>
    public enum ZaehlertypSpezifikation { Edl21, Edl40, MmeMeda, MmeStandard, SonstigerEhz };

    /// <summary>
    /// Abbildung verschiedener in der INVOIC angegebenen Rechnungsarten.
    /// </summary>
    public enum NetznutzungRechnungsart { Handelsrechnung, Selbstausgestellt };

    /// <summary>
    /// Abbildung verschiedener in der INVOIC angegebenen Rechnungstypen.
    /// </summary>
    public enum NetznutzungRechnungstyp { Abschlagsrechnung, Abschlussrechnung, Integrierte13TeRechnung, Mehrmindermengenrechnung, Monatsrechnung, Turnusrechnung, Wimrechnung, Zusaetzliche13TeRechnung, Zwischenrechnung };

    /// <summary>
    /// BDEW Artikelnummern
    /// </summary>
    public enum BdewArtikelnummer { AbgabeKwkg, Abschlag, Ausgleichsenergie, AusgleichsenergieUnterdeckung, Befestigungseinrichtung, Blindmehrarbeit, Blindmehrleistung, Energiesteuer, EntgeltAbrechnung, EntgeltEinbauBetriebWartungMesstechnik, EntgeltFernauslesung, EntgeltMessungAblesung, Entsperrkosten, FixeArbeitsentgeltkomponente, FixeLeistungsentgeltkomponente, Grundpreis, Inkassokosten, Kommunikationseinrichtung, Konzessionsabgabe, Leistung, LeistungPauschal, Mahnkosten, MehrMindermengen, Mehrmenge, Mindermenge, MsbInklMessung, NotstromlieferungArbeit, NotstromlieferungLeistung, OffshoreHaftungsumlage, Paragraf19_StromNevUmlage, PruefgebuehrenAusserplanmaessig, RegelenergieArbeit, RegelenergieLeistung, Reserveleistung, Reservenetzkapazitaet, SingulaerGenutzteBetriebsmittel, SmartmeterGateway, Sperrkosten, Steuerbox, TechnischeSteuereinrichtung, UmlageAbschaltbareLasten, Untermessung, WandlerMengenumwerter, Wirkarbeit, Zaehleinrichtung, ZusaetzlicheAblesung };

    /// <summary>
    /// In diesem Enum werden die Währungen und ihre Untereinheiten definiert, beispielsweise für
    /// die Verwendung in Preisen.
    /// </summary>
    public enum Waehrungseinheit { Ct, Eur };

    /// <summary>
    /// Statusinformation für Preise
    /// </summary>
    public enum Preisstatus { Endgueltig, Vorlaeufig };

    /// <summary>
    /// Zur Kennzeichnung verschiedener Steuersätze und Verfahren.
    /// </summary>
    public enum Steuerkennzeichen { Rcv, Ust0, Ust16, Ust19, Ust7, Vst0, Vst16, Vst19, Vst7 };

    /// <summary>
    /// Abbildung verschiedener Zustände, die im Rahmen der Rechnungsbearbeitung durchlaufen
    /// werden.
    /// </summary>
    public enum Rechnungsstatus { Bezahlt, Gebucht, GeprueftFehlerhaft, GeprueftOk, Ungeprueft };

    /// <summary>
    /// Abbildung verschiedener Rechnungstypen zur Kennzeichnung von Rechnungen
    /// </summary>
    public enum Rechnungstyp { Ausgleichsenergierechnung, Beschaffungsrechnung, Endkundenrechnung, Mehrmindermengenrechnung, Messstellenbetriebsrechnung, Netznutzungsrechnung };

    public partial class Rechnung
    {
        public static Rechnung FromJson(string json) => JsonConvert.DeserializeObject<Rechnung>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Rechnung self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypConverter.Singleton,
                WaehrungscodeConverter.Singleton,
                BilanzierungsmethodeConverter.Singleton,
                LandescodeConverter.Singleton,
                AnredeConverter.Singleton,
                KontaktartConverter.Singleton,
                TitelConverter.Singleton,
                ThemengebietConverter.Singleton,
                GeschaeftspartnerrolleConverter.Singleton,
                OrganisationstypConverter.Singleton,
                EnergierichtungConverter.Singleton,
                GasqualitaetConverter.Singleton,
                GebiettypConverter.Singleton,
                KundentypConverter.Singleton,
                NetzebeneConverter.Singleton,
                SparteConverter.Singleton,
                VerbrauchsartConverter.Singleton,
                MengeneinheitConverter.Singleton,
                MesswertstatusConverter.Singleton,
                WertermittlungsverfahrenConverter.Singleton,
                AbgabeArtConverter.Singleton,
                MarktrolleConverter.Singleton,
                VerwendungszweckConverter.Singleton,
                WaermenutzungConverter.Singleton,
                ArithmetischeOperationConverter.Singleton,
                GeraeteklasseConverter.Singleton,
                GeraetetypConverter.Singleton,
                DienstleistungstypConverter.Singleton,
                BefestigungsartConverter.Singleton,
                MesswerterfassungConverter.Singleton,
                RegisteranzahlConverter.Singleton,
                ZaehlerauspraegungConverter.Singleton,
                ZaehlergroesseConverter.Singleton,
                ZaehlertypConverter.Singleton,
                ZaehlertypSpezifikationConverter.Singleton,
                NetznutzungRechnungsartConverter.Singleton,
                NetznutzungRechnungstypConverter.Singleton,
                BdewArtikelnummerConverter.Singleton,
                WaehrungseinheitConverter.Singleton,
                PreisstatusConverter.Singleton,
                SteuerkennzeichenConverter.Singleton,
                RechnungsstatusConverter.Singleton,
                RechnungstypConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ANGEBOT":
                    return Typ.Angebot;
                case "AUSSCHREIBUNG":
                    return Typ.Ausschreibung;
                case "BUENDELVERTRAG":
                    return Typ.Buendelvertrag;
                case "ENERGIEMENGE":
                    return Typ.Energiemenge;
                case "FREMDKOSTEN":
                    return Typ.Fremdkosten;
                case "GERAET":
                    return Typ.Geraet;
                case "GESCHAEFTSOBJEKT":
                    return Typ.Geschaeftsobjekt;
                case "GESCHAEFTSPARTNER":
                    return Typ.Geschaeftspartner;
                case "KOSTEN":
                    return Typ.Kosten;
                case "LASTGANG":
                    return Typ.Lastgang;
                case "MARKTLOKATION":
                    return Typ.Marktlokation;
                case "MARKTTEILNEHMER":
                    return Typ.Marktteilnehmer;
                case "MESSLOKATION":
                    return Typ.Messlokation;
                case "NETZNUTZUNGSRECHNUNG":
                    return Typ.Netznutzungsrechnung;
                case "PERSON":
                    return Typ.Person;
                case "PREISBLATT":
                    return Typ.Preisblatt;
                case "PREISBLATTDIENSTLEISTUNG":
                    return Typ.Preisblattdienstleistung;
                case "PREISBLATTHARDWARE":
                    return Typ.Preisblatthardware;
                case "PREISBLATTKONZESSIONSABGABE":
                    return Typ.Preisblattkonzessionsabgabe;
                case "PREISBLATTMESSUNG":
                    return Typ.Preisblattmessung;
                case "PREISBLATTNETZNUTZUNG":
                    return Typ.Preisblattnetznutzung;
                case "PREISBLATTUMLAGEN":
                    return Typ.Preisblattumlagen;
                case "RECHNUNG":
                    return Typ.Rechnung;
                case "REGION":
                    return Typ.Region;
                case "REGIONALTARIF":
                    return Typ.Regionaltarif;
                case "STANDORTEIGENSCHAFTEN":
                    return Typ.Standorteigenschaften;
                case "TARIF":
                    return Typ.Tarif;
                case "TARIFINFO":
                    return Typ.Tarifinfo;
                case "TARIFKOSTEN":
                    return Typ.Tarifkosten;
                case "TARIFPREISBLATT":
                    return Typ.Tarifpreisblatt;
                case "VERTRAG":
                    return Typ.Vertrag;
                case "ZAEHLER":
                    return Typ.Zaehler;
                case "ZEITREIHE":
                    return Typ.Zeitreihe;
            }
            throw new Exception("Cannot unmarshal type Typ");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Typ)untypedValue;
            switch (value)
            {
                case Typ.Angebot:
                    serializer.Serialize(writer, "ANGEBOT");
                    return;
                case Typ.Ausschreibung:
                    serializer.Serialize(writer, "AUSSCHREIBUNG");
                    return;
                case Typ.Buendelvertrag:
                    serializer.Serialize(writer, "BUENDELVERTRAG");
                    return;
                case Typ.Energiemenge:
                    serializer.Serialize(writer, "ENERGIEMENGE");
                    return;
                case Typ.Fremdkosten:
                    serializer.Serialize(writer, "FREMDKOSTEN");
                    return;
                case Typ.Geraet:
                    serializer.Serialize(writer, "GERAET");
                    return;
                case Typ.Geschaeftsobjekt:
                    serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                    return;
                case Typ.Geschaeftspartner:
                    serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                    return;
                case Typ.Kosten:
                    serializer.Serialize(writer, "KOSTEN");
                    return;
                case Typ.Lastgang:
                    serializer.Serialize(writer, "LASTGANG");
                    return;
                case Typ.Marktlokation:
                    serializer.Serialize(writer, "MARKTLOKATION");
                    return;
                case Typ.Marktteilnehmer:
                    serializer.Serialize(writer, "MARKTTEILNEHMER");
                    return;
                case Typ.Messlokation:
                    serializer.Serialize(writer, "MESSLOKATION");
                    return;
                case Typ.Netznutzungsrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                    return;
                case Typ.Person:
                    serializer.Serialize(writer, "PERSON");
                    return;
                case Typ.Preisblatt:
                    serializer.Serialize(writer, "PREISBLATT");
                    return;
                case Typ.Preisblattdienstleistung:
                    serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                    return;
                case Typ.Preisblatthardware:
                    serializer.Serialize(writer, "PREISBLATTHARDWARE");
                    return;
                case Typ.Preisblattkonzessionsabgabe:
                    serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                    return;
                case Typ.Preisblattmessung:
                    serializer.Serialize(writer, "PREISBLATTMESSUNG");
                    return;
                case Typ.Preisblattnetznutzung:
                    serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                    return;
                case Typ.Preisblattumlagen:
                    serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                    return;
                case Typ.Rechnung:
                    serializer.Serialize(writer, "RECHNUNG");
                    return;
                case Typ.Region:
                    serializer.Serialize(writer, "REGION");
                    return;
                case Typ.Regionaltarif:
                    serializer.Serialize(writer, "REGIONALTARIF");
                    return;
                case Typ.Standorteigenschaften:
                    serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                    return;
                case Typ.Tarif:
                    serializer.Serialize(writer, "TARIF");
                    return;
                case Typ.Tarifinfo:
                    serializer.Serialize(writer, "TARIFINFO");
                    return;
                case Typ.Tarifkosten:
                    serializer.Serialize(writer, "TARIFKOSTEN");
                    return;
                case Typ.Tarifpreisblatt:
                    serializer.Serialize(writer, "TARIFPREISBLATT");
                    return;
                case Typ.Vertrag:
                    serializer.Serialize(writer, "VERTRAG");
                    return;
                case Typ.Zaehler:
                    serializer.Serialize(writer, "ZAEHLER");
                    return;
                case Typ.Zeitreihe:
                    serializer.Serialize(writer, "ZEITREIHE");
                    return;
            }
            throw new Exception("Cannot marshal type Typ");
        }

        public static readonly TypConverter Singleton = new TypConverter();
    }

    internal class WaehrungscodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungscode) || t == typeof(Waehrungscode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AED":
                    return Waehrungscode.Aed;
                case "AFN":
                    return Waehrungscode.Afn;
                case "ALL":
                    return Waehrungscode.All;
                case "AMD":
                    return Waehrungscode.Amd;
                case "ANG":
                    return Waehrungscode.Ang;
                case "AOA":
                    return Waehrungscode.Aoa;
                case "ARS":
                    return Waehrungscode.Ars;
                case "AUD":
                    return Waehrungscode.Aud;
                case "AWG":
                    return Waehrungscode.Awg;
                case "AZN":
                    return Waehrungscode.Azn;
                case "BAM":
                    return Waehrungscode.Bam;
                case "BBD":
                    return Waehrungscode.Bbd;
                case "BDT":
                    return Waehrungscode.Bdt;
                case "BGN":
                    return Waehrungscode.Bgn;
                case "BHD":
                    return Waehrungscode.Bhd;
                case "BIF":
                    return Waehrungscode.Bif;
                case "BMD":
                    return Waehrungscode.Bmd;
                case "BND":
                    return Waehrungscode.Bnd;
                case "BOB":
                    return Waehrungscode.Bob;
                case "BOV":
                    return Waehrungscode.Bov;
                case "BRL":
                    return Waehrungscode.Brl;
                case "BSD":
                    return Waehrungscode.Bsd;
                case "BTN":
                    return Waehrungscode.Btn;
                case "BWP":
                    return Waehrungscode.Bwp;
                case "BYN":
                    return Waehrungscode.Byn;
                case "BYR":
                    return Waehrungscode.Byr;
                case "BZD":
                    return Waehrungscode.Bzd;
                case "CAD":
                    return Waehrungscode.Cad;
                case "CDF":
                    return Waehrungscode.Cdf;
                case "CHE":
                    return Waehrungscode.Che;
                case "CHF":
                    return Waehrungscode.Chf;
                case "CHW":
                    return Waehrungscode.Chw;
                case "CLF":
                    return Waehrungscode.Clf;
                case "CLP":
                    return Waehrungscode.Clp;
                case "CNY":
                    return Waehrungscode.Cny;
                case "COP":
                    return Waehrungscode.Cop;
                case "COU":
                    return Waehrungscode.Cou;
                case "CRC":
                    return Waehrungscode.Crc;
                case "CUC":
                    return Waehrungscode.Cuc;
                case "CUP":
                    return Waehrungscode.Cup;
                case "CVE":
                    return Waehrungscode.Cve;
                case "CZK":
                    return Waehrungscode.Czk;
                case "DJF":
                    return Waehrungscode.Djf;
                case "DKK":
                    return Waehrungscode.Dkk;
                case "DOP":
                    return Waehrungscode.Dop;
                case "DZD":
                    return Waehrungscode.Dzd;
                case "EGP":
                    return Waehrungscode.Egp;
                case "ERN":
                    return Waehrungscode.Ern;
                case "ETB":
                    return Waehrungscode.Etb;
                case "EUR":
                    return Waehrungscode.Eur;
                case "FJD":
                    return Waehrungscode.Fjd;
                case "FKP":
                    return Waehrungscode.Fkp;
                case "GBP":
                    return Waehrungscode.Gbp;
                case "GEL":
                    return Waehrungscode.Gel;
                case "GHS":
                    return Waehrungscode.Ghs;
                case "GIP":
                    return Waehrungscode.Gip;
                case "GMD":
                    return Waehrungscode.Gmd;
                case "GNF":
                    return Waehrungscode.Gnf;
                case "GTQ":
                    return Waehrungscode.Gtq;
                case "GYD":
                    return Waehrungscode.Gyd;
                case "HKD":
                    return Waehrungscode.Hkd;
                case "HNL":
                    return Waehrungscode.Hnl;
                case "HRK":
                    return Waehrungscode.Hrk;
                case "HTG":
                    return Waehrungscode.Htg;
                case "HUF":
                    return Waehrungscode.Huf;
                case "IDR":
                    return Waehrungscode.Idr;
                case "ILS":
                    return Waehrungscode.Ils;
                case "INR":
                    return Waehrungscode.Inr;
                case "IQD":
                    return Waehrungscode.Iqd;
                case "IRR":
                    return Waehrungscode.Irr;
                case "ISK":
                    return Waehrungscode.Isk;
                case "JMD":
                    return Waehrungscode.Jmd;
                case "JOD":
                    return Waehrungscode.Jod;
                case "JPY":
                    return Waehrungscode.Jpy;
                case "KES":
                    return Waehrungscode.Kes;
                case "KGS":
                    return Waehrungscode.Kgs;
                case "KHR":
                    return Waehrungscode.Khr;
                case "KMF":
                    return Waehrungscode.Kmf;
                case "KPW":
                    return Waehrungscode.Kpw;
                case "KRW":
                    return Waehrungscode.Krw;
                case "KWD":
                    return Waehrungscode.Kwd;
                case "KYD":
                    return Waehrungscode.Kyd;
                case "KZT":
                    return Waehrungscode.Kzt;
                case "LAK":
                    return Waehrungscode.Lak;
                case "LBP":
                    return Waehrungscode.Lbp;
                case "LKR":
                    return Waehrungscode.Lkr;
                case "LRD":
                    return Waehrungscode.Lrd;
                case "LSL":
                    return Waehrungscode.Lsl;
                case "LTL":
                    return Waehrungscode.Ltl;
                case "LYD":
                    return Waehrungscode.Lyd;
                case "MAD":
                    return Waehrungscode.Mad;
                case "MDL":
                    return Waehrungscode.Mdl;
                case "MGA":
                    return Waehrungscode.Mga;
                case "MKD":
                    return Waehrungscode.Mkd;
                case "MMK":
                    return Waehrungscode.Mmk;
                case "MNT":
                    return Waehrungscode.Mnt;
                case "MOP":
                    return Waehrungscode.Mop;
                case "MRO":
                    return Waehrungscode.Mro;
                case "MUR":
                    return Waehrungscode.Mur;
                case "MVR":
                    return Waehrungscode.Mvr;
                case "MWK":
                    return Waehrungscode.Mwk;
                case "MXN":
                    return Waehrungscode.Mxn;
                case "MXV":
                    return Waehrungscode.Mxv;
                case "MYR":
                    return Waehrungscode.Myr;
                case "MZN":
                    return Waehrungscode.Mzn;
                case "NAD":
                    return Waehrungscode.Nad;
                case "NGN":
                    return Waehrungscode.Ngn;
                case "NIO":
                    return Waehrungscode.Nio;
                case "NOK":
                    return Waehrungscode.Nok;
                case "NPR":
                    return Waehrungscode.Npr;
                case "NZD":
                    return Waehrungscode.Nzd;
                case "OMR":
                    return Waehrungscode.Omr;
                case "PAB":
                    return Waehrungscode.Pab;
                case "PEN":
                    return Waehrungscode.Pen;
                case "PGK":
                    return Waehrungscode.Pgk;
                case "PHP":
                    return Waehrungscode.Php;
                case "PKR":
                    return Waehrungscode.Pkr;
                case "PLN":
                    return Waehrungscode.Pln;
                case "PYG":
                    return Waehrungscode.Pyg;
                case "QAR":
                    return Waehrungscode.Qar;
                case "RON":
                    return Waehrungscode.Ron;
                case "RSD":
                    return Waehrungscode.Rsd;
                case "RUB":
                    return Waehrungscode.Rub;
                case "RUR":
                    return Waehrungscode.Rur;
                case "RWF":
                    return Waehrungscode.Rwf;
                case "SAR":
                    return Waehrungscode.Sar;
                case "SBD":
                    return Waehrungscode.Sbd;
                case "SCR":
                    return Waehrungscode.Scr;
                case "SDG":
                    return Waehrungscode.Sdg;
                case "SEK":
                    return Waehrungscode.Sek;
                case "SGD":
                    return Waehrungscode.Sgd;
                case "SHP":
                    return Waehrungscode.Shp;
                case "SLL":
                    return Waehrungscode.Sll;
                case "SOS":
                    return Waehrungscode.Sos;
                case "SRD":
                    return Waehrungscode.Srd;
                case "SSP":
                    return Waehrungscode.Ssp;
                case "STD":
                    return Waehrungscode.Std;
                case "SVC":
                    return Waehrungscode.Svc;
                case "SYP":
                    return Waehrungscode.Syp;
                case "SZL":
                    return Waehrungscode.Szl;
                case "THB":
                    return Waehrungscode.Thb;
                case "TJS":
                    return Waehrungscode.Tjs;
                case "TMT":
                    return Waehrungscode.Tmt;
                case "TND":
                    return Waehrungscode.Tnd;
                case "TOP":
                    return Waehrungscode.Top;
                case "TRY":
                    return Waehrungscode.Try;
                case "TTD":
                    return Waehrungscode.Ttd;
                case "TWD":
                    return Waehrungscode.Twd;
                case "TZS":
                    return Waehrungscode.Tzs;
                case "UAH":
                    return Waehrungscode.Uah;
                case "UGX":
                    return Waehrungscode.Ugx;
                case "USD":
                    return Waehrungscode.Usd;
                case "USN":
                    return Waehrungscode.Usn;
                case "USS":
                    return Waehrungscode.Uss;
                case "UYI":
                    return Waehrungscode.Uyi;
                case "UYU":
                    return Waehrungscode.Uyu;
                case "UZS":
                    return Waehrungscode.Uzs;
                case "VEF":
                    return Waehrungscode.Vef;
                case "VND":
                    return Waehrungscode.Vnd;
                case "VUV":
                    return Waehrungscode.Vuv;
                case "WST":
                    return Waehrungscode.Wst;
                case "XAF":
                    return Waehrungscode.Xaf;
                case "XAG":
                    return Waehrungscode.Xag;
                case "XAU":
                    return Waehrungscode.Xau;
                case "XBA":
                    return Waehrungscode.Xba;
                case "XBB":
                    return Waehrungscode.Xbb;
                case "XBC":
                    return Waehrungscode.Xbc;
                case "XBD":
                    return Waehrungscode.Xbd;
                case "XCD":
                    return Waehrungscode.Xcd;
                case "XDR":
                    return Waehrungscode.Xdr;
                case "XOF":
                    return Waehrungscode.Xof;
                case "XPD":
                    return Waehrungscode.Xpd;
                case "XPF":
                    return Waehrungscode.Xpf;
                case "XPT":
                    return Waehrungscode.Xpt;
                case "XSU":
                    return Waehrungscode.Xsu;
                case "XTS":
                    return Waehrungscode.Xts;
                case "XUA":
                    return Waehrungscode.Xua;
                case "XXX":
                    return Waehrungscode.Xxx;
                case "YER":
                    return Waehrungscode.Yer;
                case "ZAR":
                    return Waehrungscode.Zar;
                case "ZMW":
                    return Waehrungscode.Zmw;
                case "ZWL":
                    return Waehrungscode.Zwl;
            }
            throw new Exception("Cannot unmarshal type Waehrungscode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungscode)untypedValue;
            switch (value)
            {
                case Waehrungscode.Aed:
                    serializer.Serialize(writer, "AED");
                    return;
                case Waehrungscode.Afn:
                    serializer.Serialize(writer, "AFN");
                    return;
                case Waehrungscode.All:
                    serializer.Serialize(writer, "ALL");
                    return;
                case Waehrungscode.Amd:
                    serializer.Serialize(writer, "AMD");
                    return;
                case Waehrungscode.Ang:
                    serializer.Serialize(writer, "ANG");
                    return;
                case Waehrungscode.Aoa:
                    serializer.Serialize(writer, "AOA");
                    return;
                case Waehrungscode.Ars:
                    serializer.Serialize(writer, "ARS");
                    return;
                case Waehrungscode.Aud:
                    serializer.Serialize(writer, "AUD");
                    return;
                case Waehrungscode.Awg:
                    serializer.Serialize(writer, "AWG");
                    return;
                case Waehrungscode.Azn:
                    serializer.Serialize(writer, "AZN");
                    return;
                case Waehrungscode.Bam:
                    serializer.Serialize(writer, "BAM");
                    return;
                case Waehrungscode.Bbd:
                    serializer.Serialize(writer, "BBD");
                    return;
                case Waehrungscode.Bdt:
                    serializer.Serialize(writer, "BDT");
                    return;
                case Waehrungscode.Bgn:
                    serializer.Serialize(writer, "BGN");
                    return;
                case Waehrungscode.Bhd:
                    serializer.Serialize(writer, "BHD");
                    return;
                case Waehrungscode.Bif:
                    serializer.Serialize(writer, "BIF");
                    return;
                case Waehrungscode.Bmd:
                    serializer.Serialize(writer, "BMD");
                    return;
                case Waehrungscode.Bnd:
                    serializer.Serialize(writer, "BND");
                    return;
                case Waehrungscode.Bob:
                    serializer.Serialize(writer, "BOB");
                    return;
                case Waehrungscode.Bov:
                    serializer.Serialize(writer, "BOV");
                    return;
                case Waehrungscode.Brl:
                    serializer.Serialize(writer, "BRL");
                    return;
                case Waehrungscode.Bsd:
                    serializer.Serialize(writer, "BSD");
                    return;
                case Waehrungscode.Btn:
                    serializer.Serialize(writer, "BTN");
                    return;
                case Waehrungscode.Bwp:
                    serializer.Serialize(writer, "BWP");
                    return;
                case Waehrungscode.Byn:
                    serializer.Serialize(writer, "BYN");
                    return;
                case Waehrungscode.Byr:
                    serializer.Serialize(writer, "BYR");
                    return;
                case Waehrungscode.Bzd:
                    serializer.Serialize(writer, "BZD");
                    return;
                case Waehrungscode.Cad:
                    serializer.Serialize(writer, "CAD");
                    return;
                case Waehrungscode.Cdf:
                    serializer.Serialize(writer, "CDF");
                    return;
                case Waehrungscode.Che:
                    serializer.Serialize(writer, "CHE");
                    return;
                case Waehrungscode.Chf:
                    serializer.Serialize(writer, "CHF");
                    return;
                case Waehrungscode.Chw:
                    serializer.Serialize(writer, "CHW");
                    return;
                case Waehrungscode.Clf:
                    serializer.Serialize(writer, "CLF");
                    return;
                case Waehrungscode.Clp:
                    serializer.Serialize(writer, "CLP");
                    return;
                case Waehrungscode.Cny:
                    serializer.Serialize(writer, "CNY");
                    return;
                case Waehrungscode.Cop:
                    serializer.Serialize(writer, "COP");
                    return;
                case Waehrungscode.Cou:
                    serializer.Serialize(writer, "COU");
                    return;
                case Waehrungscode.Crc:
                    serializer.Serialize(writer, "CRC");
                    return;
                case Waehrungscode.Cuc:
                    serializer.Serialize(writer, "CUC");
                    return;
                case Waehrungscode.Cup:
                    serializer.Serialize(writer, "CUP");
                    return;
                case Waehrungscode.Cve:
                    serializer.Serialize(writer, "CVE");
                    return;
                case Waehrungscode.Czk:
                    serializer.Serialize(writer, "CZK");
                    return;
                case Waehrungscode.Djf:
                    serializer.Serialize(writer, "DJF");
                    return;
                case Waehrungscode.Dkk:
                    serializer.Serialize(writer, "DKK");
                    return;
                case Waehrungscode.Dop:
                    serializer.Serialize(writer, "DOP");
                    return;
                case Waehrungscode.Dzd:
                    serializer.Serialize(writer, "DZD");
                    return;
                case Waehrungscode.Egp:
                    serializer.Serialize(writer, "EGP");
                    return;
                case Waehrungscode.Ern:
                    serializer.Serialize(writer, "ERN");
                    return;
                case Waehrungscode.Etb:
                    serializer.Serialize(writer, "ETB");
                    return;
                case Waehrungscode.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
                case Waehrungscode.Fjd:
                    serializer.Serialize(writer, "FJD");
                    return;
                case Waehrungscode.Fkp:
                    serializer.Serialize(writer, "FKP");
                    return;
                case Waehrungscode.Gbp:
                    serializer.Serialize(writer, "GBP");
                    return;
                case Waehrungscode.Gel:
                    serializer.Serialize(writer, "GEL");
                    return;
                case Waehrungscode.Ghs:
                    serializer.Serialize(writer, "GHS");
                    return;
                case Waehrungscode.Gip:
                    serializer.Serialize(writer, "GIP");
                    return;
                case Waehrungscode.Gmd:
                    serializer.Serialize(writer, "GMD");
                    return;
                case Waehrungscode.Gnf:
                    serializer.Serialize(writer, "GNF");
                    return;
                case Waehrungscode.Gtq:
                    serializer.Serialize(writer, "GTQ");
                    return;
                case Waehrungscode.Gyd:
                    serializer.Serialize(writer, "GYD");
                    return;
                case Waehrungscode.Hkd:
                    serializer.Serialize(writer, "HKD");
                    return;
                case Waehrungscode.Hnl:
                    serializer.Serialize(writer, "HNL");
                    return;
                case Waehrungscode.Hrk:
                    serializer.Serialize(writer, "HRK");
                    return;
                case Waehrungscode.Htg:
                    serializer.Serialize(writer, "HTG");
                    return;
                case Waehrungscode.Huf:
                    serializer.Serialize(writer, "HUF");
                    return;
                case Waehrungscode.Idr:
                    serializer.Serialize(writer, "IDR");
                    return;
                case Waehrungscode.Ils:
                    serializer.Serialize(writer, "ILS");
                    return;
                case Waehrungscode.Inr:
                    serializer.Serialize(writer, "INR");
                    return;
                case Waehrungscode.Iqd:
                    serializer.Serialize(writer, "IQD");
                    return;
                case Waehrungscode.Irr:
                    serializer.Serialize(writer, "IRR");
                    return;
                case Waehrungscode.Isk:
                    serializer.Serialize(writer, "ISK");
                    return;
                case Waehrungscode.Jmd:
                    serializer.Serialize(writer, "JMD");
                    return;
                case Waehrungscode.Jod:
                    serializer.Serialize(writer, "JOD");
                    return;
                case Waehrungscode.Jpy:
                    serializer.Serialize(writer, "JPY");
                    return;
                case Waehrungscode.Kes:
                    serializer.Serialize(writer, "KES");
                    return;
                case Waehrungscode.Kgs:
                    serializer.Serialize(writer, "KGS");
                    return;
                case Waehrungscode.Khr:
                    serializer.Serialize(writer, "KHR");
                    return;
                case Waehrungscode.Kmf:
                    serializer.Serialize(writer, "KMF");
                    return;
                case Waehrungscode.Kpw:
                    serializer.Serialize(writer, "KPW");
                    return;
                case Waehrungscode.Krw:
                    serializer.Serialize(writer, "KRW");
                    return;
                case Waehrungscode.Kwd:
                    serializer.Serialize(writer, "KWD");
                    return;
                case Waehrungscode.Kyd:
                    serializer.Serialize(writer, "KYD");
                    return;
                case Waehrungscode.Kzt:
                    serializer.Serialize(writer, "KZT");
                    return;
                case Waehrungscode.Lak:
                    serializer.Serialize(writer, "LAK");
                    return;
                case Waehrungscode.Lbp:
                    serializer.Serialize(writer, "LBP");
                    return;
                case Waehrungscode.Lkr:
                    serializer.Serialize(writer, "LKR");
                    return;
                case Waehrungscode.Lrd:
                    serializer.Serialize(writer, "LRD");
                    return;
                case Waehrungscode.Lsl:
                    serializer.Serialize(writer, "LSL");
                    return;
                case Waehrungscode.Ltl:
                    serializer.Serialize(writer, "LTL");
                    return;
                case Waehrungscode.Lyd:
                    serializer.Serialize(writer, "LYD");
                    return;
                case Waehrungscode.Mad:
                    serializer.Serialize(writer, "MAD");
                    return;
                case Waehrungscode.Mdl:
                    serializer.Serialize(writer, "MDL");
                    return;
                case Waehrungscode.Mga:
                    serializer.Serialize(writer, "MGA");
                    return;
                case Waehrungscode.Mkd:
                    serializer.Serialize(writer, "MKD");
                    return;
                case Waehrungscode.Mmk:
                    serializer.Serialize(writer, "MMK");
                    return;
                case Waehrungscode.Mnt:
                    serializer.Serialize(writer, "MNT");
                    return;
                case Waehrungscode.Mop:
                    serializer.Serialize(writer, "MOP");
                    return;
                case Waehrungscode.Mro:
                    serializer.Serialize(writer, "MRO");
                    return;
                case Waehrungscode.Mur:
                    serializer.Serialize(writer, "MUR");
                    return;
                case Waehrungscode.Mvr:
                    serializer.Serialize(writer, "MVR");
                    return;
                case Waehrungscode.Mwk:
                    serializer.Serialize(writer, "MWK");
                    return;
                case Waehrungscode.Mxn:
                    serializer.Serialize(writer, "MXN");
                    return;
                case Waehrungscode.Mxv:
                    serializer.Serialize(writer, "MXV");
                    return;
                case Waehrungscode.Myr:
                    serializer.Serialize(writer, "MYR");
                    return;
                case Waehrungscode.Mzn:
                    serializer.Serialize(writer, "MZN");
                    return;
                case Waehrungscode.Nad:
                    serializer.Serialize(writer, "NAD");
                    return;
                case Waehrungscode.Ngn:
                    serializer.Serialize(writer, "NGN");
                    return;
                case Waehrungscode.Nio:
                    serializer.Serialize(writer, "NIO");
                    return;
                case Waehrungscode.Nok:
                    serializer.Serialize(writer, "NOK");
                    return;
                case Waehrungscode.Npr:
                    serializer.Serialize(writer, "NPR");
                    return;
                case Waehrungscode.Nzd:
                    serializer.Serialize(writer, "NZD");
                    return;
                case Waehrungscode.Omr:
                    serializer.Serialize(writer, "OMR");
                    return;
                case Waehrungscode.Pab:
                    serializer.Serialize(writer, "PAB");
                    return;
                case Waehrungscode.Pen:
                    serializer.Serialize(writer, "PEN");
                    return;
                case Waehrungscode.Pgk:
                    serializer.Serialize(writer, "PGK");
                    return;
                case Waehrungscode.Php:
                    serializer.Serialize(writer, "PHP");
                    return;
                case Waehrungscode.Pkr:
                    serializer.Serialize(writer, "PKR");
                    return;
                case Waehrungscode.Pln:
                    serializer.Serialize(writer, "PLN");
                    return;
                case Waehrungscode.Pyg:
                    serializer.Serialize(writer, "PYG");
                    return;
                case Waehrungscode.Qar:
                    serializer.Serialize(writer, "QAR");
                    return;
                case Waehrungscode.Ron:
                    serializer.Serialize(writer, "RON");
                    return;
                case Waehrungscode.Rsd:
                    serializer.Serialize(writer, "RSD");
                    return;
                case Waehrungscode.Rub:
                    serializer.Serialize(writer, "RUB");
                    return;
                case Waehrungscode.Rur:
                    serializer.Serialize(writer, "RUR");
                    return;
                case Waehrungscode.Rwf:
                    serializer.Serialize(writer, "RWF");
                    return;
                case Waehrungscode.Sar:
                    serializer.Serialize(writer, "SAR");
                    return;
                case Waehrungscode.Sbd:
                    serializer.Serialize(writer, "SBD");
                    return;
                case Waehrungscode.Scr:
                    serializer.Serialize(writer, "SCR");
                    return;
                case Waehrungscode.Sdg:
                    serializer.Serialize(writer, "SDG");
                    return;
                case Waehrungscode.Sek:
                    serializer.Serialize(writer, "SEK");
                    return;
                case Waehrungscode.Sgd:
                    serializer.Serialize(writer, "SGD");
                    return;
                case Waehrungscode.Shp:
                    serializer.Serialize(writer, "SHP");
                    return;
                case Waehrungscode.Sll:
                    serializer.Serialize(writer, "SLL");
                    return;
                case Waehrungscode.Sos:
                    serializer.Serialize(writer, "SOS");
                    return;
                case Waehrungscode.Srd:
                    serializer.Serialize(writer, "SRD");
                    return;
                case Waehrungscode.Ssp:
                    serializer.Serialize(writer, "SSP");
                    return;
                case Waehrungscode.Std:
                    serializer.Serialize(writer, "STD");
                    return;
                case Waehrungscode.Svc:
                    serializer.Serialize(writer, "SVC");
                    return;
                case Waehrungscode.Syp:
                    serializer.Serialize(writer, "SYP");
                    return;
                case Waehrungscode.Szl:
                    serializer.Serialize(writer, "SZL");
                    return;
                case Waehrungscode.Thb:
                    serializer.Serialize(writer, "THB");
                    return;
                case Waehrungscode.Tjs:
                    serializer.Serialize(writer, "TJS");
                    return;
                case Waehrungscode.Tmt:
                    serializer.Serialize(writer, "TMT");
                    return;
                case Waehrungscode.Tnd:
                    serializer.Serialize(writer, "TND");
                    return;
                case Waehrungscode.Top:
                    serializer.Serialize(writer, "TOP");
                    return;
                case Waehrungscode.Try:
                    serializer.Serialize(writer, "TRY");
                    return;
                case Waehrungscode.Ttd:
                    serializer.Serialize(writer, "TTD");
                    return;
                case Waehrungscode.Twd:
                    serializer.Serialize(writer, "TWD");
                    return;
                case Waehrungscode.Tzs:
                    serializer.Serialize(writer, "TZS");
                    return;
                case Waehrungscode.Uah:
                    serializer.Serialize(writer, "UAH");
                    return;
                case Waehrungscode.Ugx:
                    serializer.Serialize(writer, "UGX");
                    return;
                case Waehrungscode.Usd:
                    serializer.Serialize(writer, "USD");
                    return;
                case Waehrungscode.Usn:
                    serializer.Serialize(writer, "USN");
                    return;
                case Waehrungscode.Uss:
                    serializer.Serialize(writer, "USS");
                    return;
                case Waehrungscode.Uyi:
                    serializer.Serialize(writer, "UYI");
                    return;
                case Waehrungscode.Uyu:
                    serializer.Serialize(writer, "UYU");
                    return;
                case Waehrungscode.Uzs:
                    serializer.Serialize(writer, "UZS");
                    return;
                case Waehrungscode.Vef:
                    serializer.Serialize(writer, "VEF");
                    return;
                case Waehrungscode.Vnd:
                    serializer.Serialize(writer, "VND");
                    return;
                case Waehrungscode.Vuv:
                    serializer.Serialize(writer, "VUV");
                    return;
                case Waehrungscode.Wst:
                    serializer.Serialize(writer, "WST");
                    return;
                case Waehrungscode.Xaf:
                    serializer.Serialize(writer, "XAF");
                    return;
                case Waehrungscode.Xag:
                    serializer.Serialize(writer, "XAG");
                    return;
                case Waehrungscode.Xau:
                    serializer.Serialize(writer, "XAU");
                    return;
                case Waehrungscode.Xba:
                    serializer.Serialize(writer, "XBA");
                    return;
                case Waehrungscode.Xbb:
                    serializer.Serialize(writer, "XBB");
                    return;
                case Waehrungscode.Xbc:
                    serializer.Serialize(writer, "XBC");
                    return;
                case Waehrungscode.Xbd:
                    serializer.Serialize(writer, "XBD");
                    return;
                case Waehrungscode.Xcd:
                    serializer.Serialize(writer, "XCD");
                    return;
                case Waehrungscode.Xdr:
                    serializer.Serialize(writer, "XDR");
                    return;
                case Waehrungscode.Xof:
                    serializer.Serialize(writer, "XOF");
                    return;
                case Waehrungscode.Xpd:
                    serializer.Serialize(writer, "XPD");
                    return;
                case Waehrungscode.Xpf:
                    serializer.Serialize(writer, "XPF");
                    return;
                case Waehrungscode.Xpt:
                    serializer.Serialize(writer, "XPT");
                    return;
                case Waehrungscode.Xsu:
                    serializer.Serialize(writer, "XSU");
                    return;
                case Waehrungscode.Xts:
                    serializer.Serialize(writer, "XTS");
                    return;
                case Waehrungscode.Xua:
                    serializer.Serialize(writer, "XUA");
                    return;
                case Waehrungscode.Xxx:
                    serializer.Serialize(writer, "XXX");
                    return;
                case Waehrungscode.Yer:
                    serializer.Serialize(writer, "YER");
                    return;
                case Waehrungscode.Zar:
                    serializer.Serialize(writer, "ZAR");
                    return;
                case Waehrungscode.Zmw:
                    serializer.Serialize(writer, "ZMW");
                    return;
                case Waehrungscode.Zwl:
                    serializer.Serialize(writer, "ZWL");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungscode");
        }

        public static readonly WaehrungscodeConverter Singleton = new WaehrungscodeConverter();
    }

    internal class BilanzierungsmethodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Bilanzierungsmethode) || t == typeof(Bilanzierungsmethode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "PAUSCHAL":
                    return Bilanzierungsmethode.Pauschal;
                case "RLM":
                    return Bilanzierungsmethode.Rlm;
                case "SLP":
                    return Bilanzierungsmethode.Slp;
                case "TLP_GEMEINSAM":
                    return Bilanzierungsmethode.TlpGemeinsam;
                case "TLP_GETRENNT":
                    return Bilanzierungsmethode.TlpGetrennt;
            }
            throw new Exception("Cannot unmarshal type Bilanzierungsmethode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Bilanzierungsmethode)untypedValue;
            switch (value)
            {
                case Bilanzierungsmethode.Pauschal:
                    serializer.Serialize(writer, "PAUSCHAL");
                    return;
                case Bilanzierungsmethode.Rlm:
                    serializer.Serialize(writer, "RLM");
                    return;
                case Bilanzierungsmethode.Slp:
                    serializer.Serialize(writer, "SLP");
                    return;
                case Bilanzierungsmethode.TlpGemeinsam:
                    serializer.Serialize(writer, "TLP_GEMEINSAM");
                    return;
                case Bilanzierungsmethode.TlpGetrennt:
                    serializer.Serialize(writer, "TLP_GETRENNT");
                    return;
            }
            throw new Exception("Cannot marshal type Bilanzierungsmethode");
        }

        public static readonly BilanzierungsmethodeConverter Singleton = new BilanzierungsmethodeConverter();
    }

    internal class LandescodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Landescode) || t == typeof(Landescode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AD":
                    return Landescode.Ad;
                case "AE":
                    return Landescode.Ae;
                case "AF":
                    return Landescode.Af;
                case "AG":
                    return Landescode.Ag;
                case "AI":
                    return Landescode.Ai;
                case "AL":
                    return Landescode.Al;
                case "AM":
                    return Landescode.Am;
                case "AO":
                    return Landescode.Ao;
                case "AQ":
                    return Landescode.Aq;
                case "AR":
                    return Landescode.Ar;
                case "AS":
                    return Landescode.As;
                case "AT":
                    return Landescode.At;
                case "AU":
                    return Landescode.Au;
                case "AW":
                    return Landescode.Aw;
                case "AX":
                    return Landescode.Ax;
                case "AZ":
                    return Landescode.Az;
                case "BA":
                    return Landescode.Ba;
                case "BB":
                    return Landescode.Bb;
                case "BD":
                    return Landescode.Bd;
                case "BE":
                    return Landescode.Be;
                case "BF":
                    return Landescode.Bf;
                case "BG":
                    return Landescode.Bg;
                case "BH":
                    return Landescode.Bh;
                case "BI":
                    return Landescode.Bi;
                case "BJ":
                    return Landescode.Bj;
                case "BL":
                    return Landescode.Bl;
                case "BM":
                    return Landescode.Bm;
                case "BN":
                    return Landescode.Bn;
                case "BO":
                    return Landescode.Bo;
                case "BQ":
                    return Landescode.Bq;
                case "BR":
                    return Landescode.Br;
                case "BS":
                    return Landescode.Bs;
                case "BT":
                    return Landescode.Bt;
                case "BV":
                    return Landescode.Bv;
                case "BW":
                    return Landescode.Bw;
                case "BY":
                    return Landescode.By;
                case "BZ":
                    return Landescode.Bz;
                case "CA":
                    return Landescode.Ca;
                case "CC":
                    return Landescode.Cc;
                case "CD":
                    return Landescode.Cd;
                case "CF":
                    return Landescode.Cf;
                case "CG":
                    return Landescode.Cg;
                case "CH":
                    return Landescode.Ch;
                case "CI":
                    return Landescode.Ci;
                case "CK":
                    return Landescode.Ck;
                case "CL":
                    return Landescode.Cl;
                case "CM":
                    return Landescode.Cm;
                case "CN":
                    return Landescode.Cn;
                case "CO":
                    return Landescode.Co;
                case "CR":
                    return Landescode.Cr;
                case "CU":
                    return Landescode.Cu;
                case "CV":
                    return Landescode.Cv;
                case "CW":
                    return Landescode.Cw;
                case "CX":
                    return Landescode.Cx;
                case "CY":
                    return Landescode.Cy;
                case "CZ":
                    return Landescode.Cz;
                case "DE":
                    return Landescode.De;
                case "DJ":
                    return Landescode.Dj;
                case "DK":
                    return Landescode.Dk;
                case "DM":
                    return Landescode.Dm;
                case "DO":
                    return Landescode.Do;
                case "DZ":
                    return Landescode.Dz;
                case "EC":
                    return Landescode.Ec;
                case "EE":
                    return Landescode.Ee;
                case "EG":
                    return Landescode.Eg;
                case "EH":
                    return Landescode.Eh;
                case "ER":
                    return Landescode.Er;
                case "ES":
                    return Landescode.Es;
                case "ET":
                    return Landescode.Et;
                case "FI":
                    return Landescode.Fi;
                case "FJ":
                    return Landescode.Fj;
                case "FK":
                    return Landescode.Fk;
                case "FM":
                    return Landescode.Fm;
                case "FO":
                    return Landescode.Fo;
                case "FR":
                    return Landescode.Fr;
                case "GA":
                    return Landescode.Ga;
                case "GB":
                    return Landescode.Gb;
                case "GD":
                    return Landescode.Gd;
                case "GE":
                    return Landescode.Ge;
                case "GF":
                    return Landescode.Gf;
                case "GG":
                    return Landescode.Gg;
                case "GH":
                    return Landescode.Gh;
                case "GI":
                    return Landescode.Gi;
                case "GL":
                    return Landescode.Gl;
                case "GM":
                    return Landescode.Gm;
                case "GN":
                    return Landescode.Gn;
                case "GP":
                    return Landescode.Gp;
                case "GQ":
                    return Landescode.Gq;
                case "GR":
                    return Landescode.Gr;
                case "GS":
                    return Landescode.Gs;
                case "GT":
                    return Landescode.Gt;
                case "GU":
                    return Landescode.Gu;
                case "GW":
                    return Landescode.Gw;
                case "GY":
                    return Landescode.Gy;
                case "HK":
                    return Landescode.Hk;
                case "HM":
                    return Landescode.Hm;
                case "HN":
                    return Landescode.Hn;
                case "HR":
                    return Landescode.Hr;
                case "HT":
                    return Landescode.Ht;
                case "HU":
                    return Landescode.Hu;
                case "ID":
                    return Landescode.Id;
                case "IE":
                    return Landescode.Ie;
                case "IL":
                    return Landescode.Il;
                case "IM":
                    return Landescode.Im;
                case "IN":
                    return Landescode.In;
                case "IO":
                    return Landescode.Io;
                case "IQ":
                    return Landescode.Iq;
                case "IR":
                    return Landescode.Ir;
                case "IS":
                    return Landescode.Is;
                case "IT":
                    return Landescode.It;
                case "JE":
                    return Landescode.Je;
                case "JM":
                    return Landescode.Jm;
                case "JO":
                    return Landescode.Jo;
                case "JP":
                    return Landescode.Jp;
                case "KE":
                    return Landescode.Ke;
                case "KG":
                    return Landescode.Kg;
                case "KH":
                    return Landescode.Kh;
                case "KI":
                    return Landescode.Ki;
                case "KM":
                    return Landescode.Km;
                case "KN":
                    return Landescode.Kn;
                case "KP":
                    return Landescode.Kp;
                case "KR":
                    return Landescode.Kr;
                case "KW":
                    return Landescode.Kw;
                case "KY":
                    return Landescode.Ky;
                case "KZ":
                    return Landescode.Kz;
                case "LA":
                    return Landescode.La;
                case "LB":
                    return Landescode.Lb;
                case "LC":
                    return Landescode.Lc;
                case "LI":
                    return Landescode.Li;
                case "LK":
                    return Landescode.Lk;
                case "LR":
                    return Landescode.Lr;
                case "LS":
                    return Landescode.Ls;
                case "LT":
                    return Landescode.Lt;
                case "LU":
                    return Landescode.Lu;
                case "LV":
                    return Landescode.Lv;
                case "LY":
                    return Landescode.Ly;
                case "MA":
                    return Landescode.Ma;
                case "MC":
                    return Landescode.Mc;
                case "MD":
                    return Landescode.Md;
                case "ME":
                    return Landescode.Me;
                case "MF":
                    return Landescode.Mf;
                case "MG":
                    return Landescode.Mg;
                case "MH":
                    return Landescode.Mh;
                case "MK":
                    return Landescode.Mk;
                case "ML":
                    return Landescode.Ml;
                case "MM":
                    return Landescode.Mm;
                case "MN":
                    return Landescode.Mn;
                case "MO":
                    return Landescode.Mo;
                case "MP":
                    return Landescode.Mp;
                case "MQ":
                    return Landescode.Mq;
                case "MR":
                    return Landescode.Mr;
                case "MS":
                    return Landescode.Ms;
                case "MT":
                    return Landescode.Mt;
                case "MU":
                    return Landescode.Mu;
                case "MV":
                    return Landescode.Mv;
                case "MW":
                    return Landescode.Mw;
                case "MX":
                    return Landescode.Mx;
                case "MY":
                    return Landescode.My;
                case "MZ":
                    return Landescode.Mz;
                case "NA":
                    return Landescode.Na;
                case "NC":
                    return Landescode.Nc;
                case "NE":
                    return Landescode.Ne;
                case "NF":
                    return Landescode.Nf;
                case "NG":
                    return Landescode.Ng;
                case "NI":
                    return Landescode.Ni;
                case "NL":
                    return Landescode.Nl;
                case "NO":
                    return Landescode.No;
                case "NP":
                    return Landescode.Np;
                case "NR":
                    return Landescode.Nr;
                case "NU":
                    return Landescode.Nu;
                case "NZ":
                    return Landescode.Nz;
                case "OM":
                    return Landescode.Om;
                case "PA":
                    return Landescode.Pa;
                case "PE":
                    return Landescode.Pe;
                case "PF":
                    return Landescode.Pf;
                case "PG":
                    return Landescode.Pg;
                case "PH":
                    return Landescode.Ph;
                case "PK":
                    return Landescode.Pk;
                case "PL":
                    return Landescode.Pl;
                case "PM":
                    return Landescode.Pm;
                case "PN":
                    return Landescode.Pn;
                case "PR":
                    return Landescode.Pr;
                case "PS":
                    return Landescode.Ps;
                case "PT":
                    return Landescode.Pt;
                case "PW":
                    return Landescode.Pw;
                case "PY":
                    return Landescode.Py;
                case "QA":
                    return Landescode.Qa;
                case "RE":
                    return Landescode.Re;
                case "RO":
                    return Landescode.Ro;
                case "RS":
                    return Landescode.Rs;
                case "RU":
                    return Landescode.Ru;
                case "RW":
                    return Landescode.Rw;
                case "SA":
                    return Landescode.Sa;
                case "SB":
                    return Landescode.Sb;
                case "SC":
                    return Landescode.Sc;
                case "SD":
                    return Landescode.Sd;
                case "SE":
                    return Landescode.Se;
                case "SG":
                    return Landescode.Sg;
                case "SH":
                    return Landescode.Sh;
                case "SI":
                    return Landescode.Si;
                case "SJ":
                    return Landescode.Sj;
                case "SK":
                    return Landescode.Sk;
                case "SL":
                    return Landescode.Sl;
                case "SM":
                    return Landescode.Sm;
                case "SN":
                    return Landescode.Sn;
                case "SO":
                    return Landescode.So;
                case "SR":
                    return Landescode.Sr;
                case "SS":
                    return Landescode.Ss;
                case "ST":
                    return Landescode.St;
                case "SV":
                    return Landescode.Sv;
                case "SX":
                    return Landescode.Sx;
                case "SY":
                    return Landescode.Sy;
                case "SZ":
                    return Landescode.Sz;
                case "TC":
                    return Landescode.Tc;
                case "TD":
                    return Landescode.Td;
                case "TF":
                    return Landescode.Tf;
                case "TG":
                    return Landescode.Tg;
                case "TH":
                    return Landescode.Th;
                case "TJ":
                    return Landescode.Tj;
                case "TK":
                    return Landescode.Tk;
                case "TL":
                    return Landescode.Tl;
                case "TM":
                    return Landescode.Tm;
                case "TN":
                    return Landescode.Tn;
                case "TO":
                    return Landescode.To;
                case "TR":
                    return Landescode.Tr;
                case "TT":
                    return Landescode.Tt;
                case "TV":
                    return Landescode.Tv;
                case "TW":
                    return Landescode.Tw;
                case "TZ":
                    return Landescode.Tz;
                case "UA":
                    return Landescode.Ua;
                case "UG":
                    return Landescode.Ug;
                case "UM":
                    return Landescode.Um;
                case "US":
                    return Landescode.Us;
                case "UY":
                    return Landescode.Uy;
                case "UZ":
                    return Landescode.Uz;
                case "VA":
                    return Landescode.Va;
                case "VC":
                    return Landescode.Vc;
                case "VE":
                    return Landescode.Ve;
                case "VG":
                    return Landescode.Vg;
                case "VI":
                    return Landescode.Vi;
                case "VN":
                    return Landescode.Vn;
                case "VU":
                    return Landescode.Vu;
                case "WF":
                    return Landescode.Wf;
                case "WS":
                    return Landescode.Ws;
                case "XK":
                    return Landescode.Xk;
                case "YE":
                    return Landescode.Ye;
                case "YT":
                    return Landescode.Yt;
                case "ZA":
                    return Landescode.Za;
                case "ZM":
                    return Landescode.Zm;
                case "ZW":
                    return Landescode.Zw;
            }
            throw new Exception("Cannot unmarshal type Landescode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Landescode)untypedValue;
            switch (value)
            {
                case Landescode.Ad:
                    serializer.Serialize(writer, "AD");
                    return;
                case Landescode.Ae:
                    serializer.Serialize(writer, "AE");
                    return;
                case Landescode.Af:
                    serializer.Serialize(writer, "AF");
                    return;
                case Landescode.Ag:
                    serializer.Serialize(writer, "AG");
                    return;
                case Landescode.Ai:
                    serializer.Serialize(writer, "AI");
                    return;
                case Landescode.Al:
                    serializer.Serialize(writer, "AL");
                    return;
                case Landescode.Am:
                    serializer.Serialize(writer, "AM");
                    return;
                case Landescode.Ao:
                    serializer.Serialize(writer, "AO");
                    return;
                case Landescode.Aq:
                    serializer.Serialize(writer, "AQ");
                    return;
                case Landescode.Ar:
                    serializer.Serialize(writer, "AR");
                    return;
                case Landescode.As:
                    serializer.Serialize(writer, "AS");
                    return;
                case Landescode.At:
                    serializer.Serialize(writer, "AT");
                    return;
                case Landescode.Au:
                    serializer.Serialize(writer, "AU");
                    return;
                case Landescode.Aw:
                    serializer.Serialize(writer, "AW");
                    return;
                case Landescode.Ax:
                    serializer.Serialize(writer, "AX");
                    return;
                case Landescode.Az:
                    serializer.Serialize(writer, "AZ");
                    return;
                case Landescode.Ba:
                    serializer.Serialize(writer, "BA");
                    return;
                case Landescode.Bb:
                    serializer.Serialize(writer, "BB");
                    return;
                case Landescode.Bd:
                    serializer.Serialize(writer, "BD");
                    return;
                case Landescode.Be:
                    serializer.Serialize(writer, "BE");
                    return;
                case Landescode.Bf:
                    serializer.Serialize(writer, "BF");
                    return;
                case Landescode.Bg:
                    serializer.Serialize(writer, "BG");
                    return;
                case Landescode.Bh:
                    serializer.Serialize(writer, "BH");
                    return;
                case Landescode.Bi:
                    serializer.Serialize(writer, "BI");
                    return;
                case Landescode.Bj:
                    serializer.Serialize(writer, "BJ");
                    return;
                case Landescode.Bl:
                    serializer.Serialize(writer, "BL");
                    return;
                case Landescode.Bm:
                    serializer.Serialize(writer, "BM");
                    return;
                case Landescode.Bn:
                    serializer.Serialize(writer, "BN");
                    return;
                case Landescode.Bo:
                    serializer.Serialize(writer, "BO");
                    return;
                case Landescode.Bq:
                    serializer.Serialize(writer, "BQ");
                    return;
                case Landescode.Br:
                    serializer.Serialize(writer, "BR");
                    return;
                case Landescode.Bs:
                    serializer.Serialize(writer, "BS");
                    return;
                case Landescode.Bt:
                    serializer.Serialize(writer, "BT");
                    return;
                case Landescode.Bv:
                    serializer.Serialize(writer, "BV");
                    return;
                case Landescode.Bw:
                    serializer.Serialize(writer, "BW");
                    return;
                case Landescode.By:
                    serializer.Serialize(writer, "BY");
                    return;
                case Landescode.Bz:
                    serializer.Serialize(writer, "BZ");
                    return;
                case Landescode.Ca:
                    serializer.Serialize(writer, "CA");
                    return;
                case Landescode.Cc:
                    serializer.Serialize(writer, "CC");
                    return;
                case Landescode.Cd:
                    serializer.Serialize(writer, "CD");
                    return;
                case Landescode.Cf:
                    serializer.Serialize(writer, "CF");
                    return;
                case Landescode.Cg:
                    serializer.Serialize(writer, "CG");
                    return;
                case Landescode.Ch:
                    serializer.Serialize(writer, "CH");
                    return;
                case Landescode.Ci:
                    serializer.Serialize(writer, "CI");
                    return;
                case Landescode.Ck:
                    serializer.Serialize(writer, "CK");
                    return;
                case Landescode.Cl:
                    serializer.Serialize(writer, "CL");
                    return;
                case Landescode.Cm:
                    serializer.Serialize(writer, "CM");
                    return;
                case Landescode.Cn:
                    serializer.Serialize(writer, "CN");
                    return;
                case Landescode.Co:
                    serializer.Serialize(writer, "CO");
                    return;
                case Landescode.Cr:
                    serializer.Serialize(writer, "CR");
                    return;
                case Landescode.Cu:
                    serializer.Serialize(writer, "CU");
                    return;
                case Landescode.Cv:
                    serializer.Serialize(writer, "CV");
                    return;
                case Landescode.Cw:
                    serializer.Serialize(writer, "CW");
                    return;
                case Landescode.Cx:
                    serializer.Serialize(writer, "CX");
                    return;
                case Landescode.Cy:
                    serializer.Serialize(writer, "CY");
                    return;
                case Landescode.Cz:
                    serializer.Serialize(writer, "CZ");
                    return;
                case Landescode.De:
                    serializer.Serialize(writer, "DE");
                    return;
                case Landescode.Dj:
                    serializer.Serialize(writer, "DJ");
                    return;
                case Landescode.Dk:
                    serializer.Serialize(writer, "DK");
                    return;
                case Landescode.Dm:
                    serializer.Serialize(writer, "DM");
                    return;
                case Landescode.Do:
                    serializer.Serialize(writer, "DO");
                    return;
                case Landescode.Dz:
                    serializer.Serialize(writer, "DZ");
                    return;
                case Landescode.Ec:
                    serializer.Serialize(writer, "EC");
                    return;
                case Landescode.Ee:
                    serializer.Serialize(writer, "EE");
                    return;
                case Landescode.Eg:
                    serializer.Serialize(writer, "EG");
                    return;
                case Landescode.Eh:
                    serializer.Serialize(writer, "EH");
                    return;
                case Landescode.Er:
                    serializer.Serialize(writer, "ER");
                    return;
                case Landescode.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case Landescode.Et:
                    serializer.Serialize(writer, "ET");
                    return;
                case Landescode.Fi:
                    serializer.Serialize(writer, "FI");
                    return;
                case Landescode.Fj:
                    serializer.Serialize(writer, "FJ");
                    return;
                case Landescode.Fk:
                    serializer.Serialize(writer, "FK");
                    return;
                case Landescode.Fm:
                    serializer.Serialize(writer, "FM");
                    return;
                case Landescode.Fo:
                    serializer.Serialize(writer, "FO");
                    return;
                case Landescode.Fr:
                    serializer.Serialize(writer, "FR");
                    return;
                case Landescode.Ga:
                    serializer.Serialize(writer, "GA");
                    return;
                case Landescode.Gb:
                    serializer.Serialize(writer, "GB");
                    return;
                case Landescode.Gd:
                    serializer.Serialize(writer, "GD");
                    return;
                case Landescode.Ge:
                    serializer.Serialize(writer, "GE");
                    return;
                case Landescode.Gf:
                    serializer.Serialize(writer, "GF");
                    return;
                case Landescode.Gg:
                    serializer.Serialize(writer, "GG");
                    return;
                case Landescode.Gh:
                    serializer.Serialize(writer, "GH");
                    return;
                case Landescode.Gi:
                    serializer.Serialize(writer, "GI");
                    return;
                case Landescode.Gl:
                    serializer.Serialize(writer, "GL");
                    return;
                case Landescode.Gm:
                    serializer.Serialize(writer, "GM");
                    return;
                case Landescode.Gn:
                    serializer.Serialize(writer, "GN");
                    return;
                case Landescode.Gp:
                    serializer.Serialize(writer, "GP");
                    return;
                case Landescode.Gq:
                    serializer.Serialize(writer, "GQ");
                    return;
                case Landescode.Gr:
                    serializer.Serialize(writer, "GR");
                    return;
                case Landescode.Gs:
                    serializer.Serialize(writer, "GS");
                    return;
                case Landescode.Gt:
                    serializer.Serialize(writer, "GT");
                    return;
                case Landescode.Gu:
                    serializer.Serialize(writer, "GU");
                    return;
                case Landescode.Gw:
                    serializer.Serialize(writer, "GW");
                    return;
                case Landescode.Gy:
                    serializer.Serialize(writer, "GY");
                    return;
                case Landescode.Hk:
                    serializer.Serialize(writer, "HK");
                    return;
                case Landescode.Hm:
                    serializer.Serialize(writer, "HM");
                    return;
                case Landescode.Hn:
                    serializer.Serialize(writer, "HN");
                    return;
                case Landescode.Hr:
                    serializer.Serialize(writer, "HR");
                    return;
                case Landescode.Ht:
                    serializer.Serialize(writer, "HT");
                    return;
                case Landescode.Hu:
                    serializer.Serialize(writer, "HU");
                    return;
                case Landescode.Id:
                    serializer.Serialize(writer, "ID");
                    return;
                case Landescode.Ie:
                    serializer.Serialize(writer, "IE");
                    return;
                case Landescode.Il:
                    serializer.Serialize(writer, "IL");
                    return;
                case Landescode.Im:
                    serializer.Serialize(writer, "IM");
                    return;
                case Landescode.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case Landescode.Io:
                    serializer.Serialize(writer, "IO");
                    return;
                case Landescode.Iq:
                    serializer.Serialize(writer, "IQ");
                    return;
                case Landescode.Ir:
                    serializer.Serialize(writer, "IR");
                    return;
                case Landescode.Is:
                    serializer.Serialize(writer, "IS");
                    return;
                case Landescode.It:
                    serializer.Serialize(writer, "IT");
                    return;
                case Landescode.Je:
                    serializer.Serialize(writer, "JE");
                    return;
                case Landescode.Jm:
                    serializer.Serialize(writer, "JM");
                    return;
                case Landescode.Jo:
                    serializer.Serialize(writer, "JO");
                    return;
                case Landescode.Jp:
                    serializer.Serialize(writer, "JP");
                    return;
                case Landescode.Ke:
                    serializer.Serialize(writer, "KE");
                    return;
                case Landescode.Kg:
                    serializer.Serialize(writer, "KG");
                    return;
                case Landescode.Kh:
                    serializer.Serialize(writer, "KH");
                    return;
                case Landescode.Ki:
                    serializer.Serialize(writer, "KI");
                    return;
                case Landescode.Km:
                    serializer.Serialize(writer, "KM");
                    return;
                case Landescode.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case Landescode.Kp:
                    serializer.Serialize(writer, "KP");
                    return;
                case Landescode.Kr:
                    serializer.Serialize(writer, "KR");
                    return;
                case Landescode.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Landescode.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case Landescode.Kz:
                    serializer.Serialize(writer, "KZ");
                    return;
                case Landescode.La:
                    serializer.Serialize(writer, "LA");
                    return;
                case Landescode.Lb:
                    serializer.Serialize(writer, "LB");
                    return;
                case Landescode.Lc:
                    serializer.Serialize(writer, "LC");
                    return;
                case Landescode.Li:
                    serializer.Serialize(writer, "LI");
                    return;
                case Landescode.Lk:
                    serializer.Serialize(writer, "LK");
                    return;
                case Landescode.Lr:
                    serializer.Serialize(writer, "LR");
                    return;
                case Landescode.Ls:
                    serializer.Serialize(writer, "LS");
                    return;
                case Landescode.Lt:
                    serializer.Serialize(writer, "LT");
                    return;
                case Landescode.Lu:
                    serializer.Serialize(writer, "LU");
                    return;
                case Landescode.Lv:
                    serializer.Serialize(writer, "LV");
                    return;
                case Landescode.Ly:
                    serializer.Serialize(writer, "LY");
                    return;
                case Landescode.Ma:
                    serializer.Serialize(writer, "MA");
                    return;
                case Landescode.Mc:
                    serializer.Serialize(writer, "MC");
                    return;
                case Landescode.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case Landescode.Me:
                    serializer.Serialize(writer, "ME");
                    return;
                case Landescode.Mf:
                    serializer.Serialize(writer, "MF");
                    return;
                case Landescode.Mg:
                    serializer.Serialize(writer, "MG");
                    return;
                case Landescode.Mh:
                    serializer.Serialize(writer, "MH");
                    return;
                case Landescode.Mk:
                    serializer.Serialize(writer, "MK");
                    return;
                case Landescode.Ml:
                    serializer.Serialize(writer, "ML");
                    return;
                case Landescode.Mm:
                    serializer.Serialize(writer, "MM");
                    return;
                case Landescode.Mn:
                    serializer.Serialize(writer, "MN");
                    return;
                case Landescode.Mo:
                    serializer.Serialize(writer, "MO");
                    return;
                case Landescode.Mp:
                    serializer.Serialize(writer, "MP");
                    return;
                case Landescode.Mq:
                    serializer.Serialize(writer, "MQ");
                    return;
                case Landescode.Mr:
                    serializer.Serialize(writer, "MR");
                    return;
                case Landescode.Ms:
                    serializer.Serialize(writer, "MS");
                    return;
                case Landescode.Mt:
                    serializer.Serialize(writer, "MT");
                    return;
                case Landescode.Mu:
                    serializer.Serialize(writer, "MU");
                    return;
                case Landescode.Mv:
                    serializer.Serialize(writer, "MV");
                    return;
                case Landescode.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Landescode.Mx:
                    serializer.Serialize(writer, "MX");
                    return;
                case Landescode.My:
                    serializer.Serialize(writer, "MY");
                    return;
                case Landescode.Mz:
                    serializer.Serialize(writer, "MZ");
                    return;
                case Landescode.Na:
                    serializer.Serialize(writer, "NA");
                    return;
                case Landescode.Nc:
                    serializer.Serialize(writer, "NC");
                    return;
                case Landescode.Ne:
                    serializer.Serialize(writer, "NE");
                    return;
                case Landescode.Nf:
                    serializer.Serialize(writer, "NF");
                    return;
                case Landescode.Ng:
                    serializer.Serialize(writer, "NG");
                    return;
                case Landescode.Ni:
                    serializer.Serialize(writer, "NI");
                    return;
                case Landescode.Nl:
                    serializer.Serialize(writer, "NL");
                    return;
                case Landescode.No:
                    serializer.Serialize(writer, "NO");
                    return;
                case Landescode.Np:
                    serializer.Serialize(writer, "NP");
                    return;
                case Landescode.Nr:
                    serializer.Serialize(writer, "NR");
                    return;
                case Landescode.Nu:
                    serializer.Serialize(writer, "NU");
                    return;
                case Landescode.Nz:
                    serializer.Serialize(writer, "NZ");
                    return;
                case Landescode.Om:
                    serializer.Serialize(writer, "OM");
                    return;
                case Landescode.Pa:
                    serializer.Serialize(writer, "PA");
                    return;
                case Landescode.Pe:
                    serializer.Serialize(writer, "PE");
                    return;
                case Landescode.Pf:
                    serializer.Serialize(writer, "PF");
                    return;
                case Landescode.Pg:
                    serializer.Serialize(writer, "PG");
                    return;
                case Landescode.Ph:
                    serializer.Serialize(writer, "PH");
                    return;
                case Landescode.Pk:
                    serializer.Serialize(writer, "PK");
                    return;
                case Landescode.Pl:
                    serializer.Serialize(writer, "PL");
                    return;
                case Landescode.Pm:
                    serializer.Serialize(writer, "PM");
                    return;
                case Landescode.Pn:
                    serializer.Serialize(writer, "PN");
                    return;
                case Landescode.Pr:
                    serializer.Serialize(writer, "PR");
                    return;
                case Landescode.Ps:
                    serializer.Serialize(writer, "PS");
                    return;
                case Landescode.Pt:
                    serializer.Serialize(writer, "PT");
                    return;
                case Landescode.Pw:
                    serializer.Serialize(writer, "PW");
                    return;
                case Landescode.Py:
                    serializer.Serialize(writer, "PY");
                    return;
                case Landescode.Qa:
                    serializer.Serialize(writer, "QA");
                    return;
                case Landescode.Re:
                    serializer.Serialize(writer, "RE");
                    return;
                case Landescode.Ro:
                    serializer.Serialize(writer, "RO");
                    return;
                case Landescode.Rs:
                    serializer.Serialize(writer, "RS");
                    return;
                case Landescode.Ru:
                    serializer.Serialize(writer, "RU");
                    return;
                case Landescode.Rw:
                    serializer.Serialize(writer, "RW");
                    return;
                case Landescode.Sa:
                    serializer.Serialize(writer, "SA");
                    return;
                case Landescode.Sb:
                    serializer.Serialize(writer, "SB");
                    return;
                case Landescode.Sc:
                    serializer.Serialize(writer, "SC");
                    return;
                case Landescode.Sd:
                    serializer.Serialize(writer, "SD");
                    return;
                case Landescode.Se:
                    serializer.Serialize(writer, "SE");
                    return;
                case Landescode.Sg:
                    serializer.Serialize(writer, "SG");
                    return;
                case Landescode.Sh:
                    serializer.Serialize(writer, "SH");
                    return;
                case Landescode.Si:
                    serializer.Serialize(writer, "SI");
                    return;
                case Landescode.Sj:
                    serializer.Serialize(writer, "SJ");
                    return;
                case Landescode.Sk:
                    serializer.Serialize(writer, "SK");
                    return;
                case Landescode.Sl:
                    serializer.Serialize(writer, "SL");
                    return;
                case Landescode.Sm:
                    serializer.Serialize(writer, "SM");
                    return;
                case Landescode.Sn:
                    serializer.Serialize(writer, "SN");
                    return;
                case Landescode.So:
                    serializer.Serialize(writer, "SO");
                    return;
                case Landescode.Sr:
                    serializer.Serialize(writer, "SR");
                    return;
                case Landescode.Ss:
                    serializer.Serialize(writer, "SS");
                    return;
                case Landescode.St:
                    serializer.Serialize(writer, "ST");
                    return;
                case Landescode.Sv:
                    serializer.Serialize(writer, "SV");
                    return;
                case Landescode.Sx:
                    serializer.Serialize(writer, "SX");
                    return;
                case Landescode.Sy:
                    serializer.Serialize(writer, "SY");
                    return;
                case Landescode.Sz:
                    serializer.Serialize(writer, "SZ");
                    return;
                case Landescode.Tc:
                    serializer.Serialize(writer, "TC");
                    return;
                case Landescode.Td:
                    serializer.Serialize(writer, "TD");
                    return;
                case Landescode.Tf:
                    serializer.Serialize(writer, "TF");
                    return;
                case Landescode.Tg:
                    serializer.Serialize(writer, "TG");
                    return;
                case Landescode.Th:
                    serializer.Serialize(writer, "TH");
                    return;
                case Landescode.Tj:
                    serializer.Serialize(writer, "TJ");
                    return;
                case Landescode.Tk:
                    serializer.Serialize(writer, "TK");
                    return;
                case Landescode.Tl:
                    serializer.Serialize(writer, "TL");
                    return;
                case Landescode.Tm:
                    serializer.Serialize(writer, "TM");
                    return;
                case Landescode.Tn:
                    serializer.Serialize(writer, "TN");
                    return;
                case Landescode.To:
                    serializer.Serialize(writer, "TO");
                    return;
                case Landescode.Tr:
                    serializer.Serialize(writer, "TR");
                    return;
                case Landescode.Tt:
                    serializer.Serialize(writer, "TT");
                    return;
                case Landescode.Tv:
                    serializer.Serialize(writer, "TV");
                    return;
                case Landescode.Tw:
                    serializer.Serialize(writer, "TW");
                    return;
                case Landescode.Tz:
                    serializer.Serialize(writer, "TZ");
                    return;
                case Landescode.Ua:
                    serializer.Serialize(writer, "UA");
                    return;
                case Landescode.Ug:
                    serializer.Serialize(writer, "UG");
                    return;
                case Landescode.Um:
                    serializer.Serialize(writer, "UM");
                    return;
                case Landescode.Us:
                    serializer.Serialize(writer, "US");
                    return;
                case Landescode.Uy:
                    serializer.Serialize(writer, "UY");
                    return;
                case Landescode.Uz:
                    serializer.Serialize(writer, "UZ");
                    return;
                case Landescode.Va:
                    serializer.Serialize(writer, "VA");
                    return;
                case Landescode.Vc:
                    serializer.Serialize(writer, "VC");
                    return;
                case Landescode.Ve:
                    serializer.Serialize(writer, "VE");
                    return;
                case Landescode.Vg:
                    serializer.Serialize(writer, "VG");
                    return;
                case Landescode.Vi:
                    serializer.Serialize(writer, "VI");
                    return;
                case Landescode.Vn:
                    serializer.Serialize(writer, "VN");
                    return;
                case Landescode.Vu:
                    serializer.Serialize(writer, "VU");
                    return;
                case Landescode.Wf:
                    serializer.Serialize(writer, "WF");
                    return;
                case Landescode.Ws:
                    serializer.Serialize(writer, "WS");
                    return;
                case Landescode.Xk:
                    serializer.Serialize(writer, "XK");
                    return;
                case Landescode.Ye:
                    serializer.Serialize(writer, "YE");
                    return;
                case Landescode.Yt:
                    serializer.Serialize(writer, "YT");
                    return;
                case Landescode.Za:
                    serializer.Serialize(writer, "ZA");
                    return;
                case Landescode.Zm:
                    serializer.Serialize(writer, "ZM");
                    return;
                case Landescode.Zw:
                    serializer.Serialize(writer, "ZW");
                    return;
            }
            throw new Exception("Cannot marshal type Landescode");
        }

        public static readonly LandescodeConverter Singleton = new LandescodeConverter();
    }

    internal class AnredeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Anrede) || t == typeof(Anrede?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EHELEUTE":
                    return Anrede.Eheleute;
                case "ERBENGEMEINSCHAFT":
                    return Anrede.Erbengemeinschaft;
                case "FAMILIE":
                    return Anrede.Familie;
                case "FIRMA":
                    return Anrede.Firma;
                case "FRAU":
                    return Anrede.Frau;
                case "GRUNDSTUECKSGEMEINSCHAFT":
                    return Anrede.Grundstuecksgemeinschaft;
                case "HERR":
                    return Anrede.Herr;
            }
            throw new Exception("Cannot unmarshal type Anrede");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Anrede)untypedValue;
            switch (value)
            {
                case Anrede.Eheleute:
                    serializer.Serialize(writer, "EHELEUTE");
                    return;
                case Anrede.Erbengemeinschaft:
                    serializer.Serialize(writer, "ERBENGEMEINSCHAFT");
                    return;
                case Anrede.Familie:
                    serializer.Serialize(writer, "FAMILIE");
                    return;
                case Anrede.Firma:
                    serializer.Serialize(writer, "FIRMA");
                    return;
                case Anrede.Frau:
                    serializer.Serialize(writer, "FRAU");
                    return;
                case Anrede.Grundstuecksgemeinschaft:
                    serializer.Serialize(writer, "GRUNDSTUECKSGEMEINSCHAFT");
                    return;
                case Anrede.Herr:
                    serializer.Serialize(writer, "HERR");
                    return;
            }
            throw new Exception("Cannot marshal type Anrede");
        }

        public static readonly AnredeConverter Singleton = new AnredeConverter();
    }

    internal class KontaktartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kontaktart) || t == typeof(Kontaktart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "E_MAIL":
                    return Kontaktart.EMail;
                case "FAX":
                    return Kontaktart.Fax;
                case "POSTWEG":
                    return Kontaktart.Postweg;
                case "SMS":
                    return Kontaktart.Sms;
                case "TELEFON":
                    return Kontaktart.Telefon;
            }
            throw new Exception("Cannot unmarshal type Kontaktart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kontaktart)untypedValue;
            switch (value)
            {
                case Kontaktart.EMail:
                    serializer.Serialize(writer, "E_MAIL");
                    return;
                case Kontaktart.Fax:
                    serializer.Serialize(writer, "FAX");
                    return;
                case Kontaktart.Postweg:
                    serializer.Serialize(writer, "POSTWEG");
                    return;
                case Kontaktart.Sms:
                    serializer.Serialize(writer, "SMS");
                    return;
                case Kontaktart.Telefon:
                    serializer.Serialize(writer, "TELEFON");
                    return;
            }
            throw new Exception("Cannot marshal type Kontaktart");
        }

        public static readonly KontaktartConverter Singleton = new KontaktartConverter();
    }

    internal class TitelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Titel) || t == typeof(Titel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DR":
                    return Titel.Dr;
                case "PROF":
                    return Titel.Prof;
                case "PROF_DR":
                    return Titel.ProfDr;
            }
            throw new Exception("Cannot unmarshal type Titel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Titel)untypedValue;
            switch (value)
            {
                case Titel.Dr:
                    serializer.Serialize(writer, "DR");
                    return;
                case Titel.Prof:
                    serializer.Serialize(writer, "PROF");
                    return;
                case Titel.ProfDr:
                    serializer.Serialize(writer, "PROF_DR");
                    return;
            }
            throw new Exception("Cannot marshal type Titel");
        }

        public static readonly TitelConverter Singleton = new TitelConverter();
    }

    internal class ThemengebietConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Themengebiet) || t == typeof(Themengebiet?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALLGEMEINER_INFORMATIONSAUSTAUSCH":
                    return Themengebiet.AllgemeinerInformationsaustausch;
                case "ALOCAT":
                    return Themengebiet.Alocat;
                case "ANSPRECHPARTNER_ALLGEMEIN":
                    return Themengebiet.AnsprechpartnerAllgemein;
                case "ANSPRECHPARTNER_BDEW_DVGW":
                    return Themengebiet.AnsprechpartnerBdewDvgw;
                case "ANSPRECHPARTNER_IT_TECHNIK":
                    return Themengebiet.AnsprechpartnerItTechnik;
                case "AN_UND_ABMELDUNG":
                    return Themengebiet.AnUndAbmeldung;
                case "APERAK":
                    return Themengebiet.Aperak;
                case "BEWEGUNGSDATEN":
                    return Themengebiet.Bewegungsdaten;
                case "BILANZIERUNG":
                    return Themengebiet.Bilanzierung;
                case "BILANZKREISKOORDINATOR":
                    return Themengebiet.Bilanzkreiskoordinator;
                case "BILANZKREISVERANTWORTLICHER":
                    return Themengebiet.Bilanzkreisverantwortlicher;
                case "CONTRL":
                    return Themengebiet.Contrl;
                case "DATENFORMATE_ZERTIFIKATE_VERSCHLUESSELUNGEN":
                    return Themengebiet.DatenformateZertifikateVerschluesselungen;
                case "DEBITORENMANAGEMENT":
                    return Themengebiet.Debitorenmanagement;
                case "DEMAND_SIDE_MANAGEMENT":
                    return Themengebiet.DemandSideManagement;
                case "EDIFACT":
                    return Themengebiet.Edifact;
                case "EDI_VEREINBARUNG":
                    return Themengebiet.EdiVereinbarung;
                case "EINSPEISUNG":
                    return Themengebiet.Einspeisung;
                case "ENERGIEDATENMANAGEMENT":
                    return Themengebiet.Energiedatenmanagement;
                case "FAHRPLANMANAGEMENT":
                    return Themengebiet.Fahrplanmanagement;
                case "GABI":
                    return Themengebiet.Gabi;
                case "GELI":
                    return Themengebiet.Geli;
                case "GERAETERUECKGABE":
                    return Themengebiet.Geraeterueckgabe;
                case "GERAETEWECHSEL":
                    return Themengebiet.Geraetewechsel;
                case "GPKE":
                    return Themengebiet.Gpke;
                case "INBETRIEBNAHME":
                    return Themengebiet.Inbetriebnahme;
                case "INVOIC":
                    return Themengebiet.Invoic;
                case "KAPAZITAETSMANAGEMENT":
                    return Themengebiet.Kapazitaetsmanagement;
                case "KLAERFAELLE":
                    return Themengebiet.Klaerfaelle;
                case "LASTGAENGE_RLM":
                    return Themengebiet.LastgaengeRlm;
                case "LIEFERANTENRAHMENVERTRAG":
                    return Themengebiet.Lieferantenrahmenvertrag;
                case "LIEFERANTENWECHSEL":
                    return Themengebiet.Lieferantenwechsel;
                case "MABIS":
                    return Themengebiet.Mabis;
                case "MAHNWESEN":
                    return Themengebiet.Mahnwesen;
                case "MARKTGEBIETSVERANTWORTLICHER":
                    return Themengebiet.Marktgebietsverantwortlicher;
                case "MARKTKOMMUNIKATION":
                    return Themengebiet.Marktkommunikation;
                case "MEHR_MINDERMENGEN":
                    return Themengebiet.MehrMindermengen;
                case "MSB_MDL":
                    return Themengebiet.MsbMdl;
                case "MSCONS":
                    return Themengebiet.Mscons;
                case "NETZABRECHNUNG":
                    return Themengebiet.Netzabrechnung;
                case "NETZENTGELTE":
                    return Themengebiet.Netzentgelte;
                case "NETZMANAGEMENT":
                    return Themengebiet.Netzmanagement;
                case "ORDERS":
                    return Themengebiet.Orders;
                case "ORDERSP":
                    return Themengebiet.Ordersp;
                case "RECHT":
                    return Themengebiet.Recht;
                case "REGULIERUNGSMANAGEMENT":
                    return Themengebiet.Regulierungsmanagement;
                case "REKLAMATIONEN":
                    return Themengebiet.Reklamationen;
                case "REMADV":
                    return Themengebiet.Remadv;
                case "SPERREN_ENTSPERREN_INKASSO":
                    return Themengebiet.SperrenEntsperrenInkasso;
                case "STAMMDATEN":
                    return Themengebiet.Stammdaten;
                case "STOERUNGSFAELLE":
                    return Themengebiet.Stoerungsfaelle;
                case "TECHNISCHE_FRAGEN":
                    return Themengebiet.TechnischeFragen;
                case "UMSTELLUNG_INVOIC":
                    return Themengebiet.UmstellungInvoic;
                case "UTILMD":
                    return Themengebiet.Utilmd;
                case "VERSCHLUESSELUNG_SIGNATUR":
                    return Themengebiet.VerschluesselungSignatur;
                case "VERTRAGSMANAGEMENT":
                    return Themengebiet.Vertragsmanagement;
                case "VERTRIEB":
                    return Themengebiet.Vertrieb;
                case "WIM":
                    return Themengebiet.Wim;
                case "ZAEHLERSTAENDE_SLP":
                    return Themengebiet.ZaehlerstaendeSlp;
                case "ZAHLUNGSVERKEHR":
                    return Themengebiet.Zahlungsverkehr;
                case "ZUORDNUNGSVEREINBARUNG":
                    return Themengebiet.Zuordnungsvereinbarung;
            }
            throw new Exception("Cannot unmarshal type Themengebiet");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Themengebiet)untypedValue;
            switch (value)
            {
                case Themengebiet.AllgemeinerInformationsaustausch:
                    serializer.Serialize(writer, "ALLGEMEINER_INFORMATIONSAUSTAUSCH");
                    return;
                case Themengebiet.Alocat:
                    serializer.Serialize(writer, "ALOCAT");
                    return;
                case Themengebiet.AnsprechpartnerAllgemein:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_ALLGEMEIN");
                    return;
                case Themengebiet.AnsprechpartnerBdewDvgw:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_BDEW_DVGW");
                    return;
                case Themengebiet.AnsprechpartnerItTechnik:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_IT_TECHNIK");
                    return;
                case Themengebiet.AnUndAbmeldung:
                    serializer.Serialize(writer, "AN_UND_ABMELDUNG");
                    return;
                case Themengebiet.Aperak:
                    serializer.Serialize(writer, "APERAK");
                    return;
                case Themengebiet.Bewegungsdaten:
                    serializer.Serialize(writer, "BEWEGUNGSDATEN");
                    return;
                case Themengebiet.Bilanzierung:
                    serializer.Serialize(writer, "BILANZIERUNG");
                    return;
                case Themengebiet.Bilanzkreiskoordinator:
                    serializer.Serialize(writer, "BILANZKREISKOORDINATOR");
                    return;
                case Themengebiet.Bilanzkreisverantwortlicher:
                    serializer.Serialize(writer, "BILANZKREISVERANTWORTLICHER");
                    return;
                case Themengebiet.Contrl:
                    serializer.Serialize(writer, "CONTRL");
                    return;
                case Themengebiet.DatenformateZertifikateVerschluesselungen:
                    serializer.Serialize(writer, "DATENFORMATE_ZERTIFIKATE_VERSCHLUESSELUNGEN");
                    return;
                case Themengebiet.Debitorenmanagement:
                    serializer.Serialize(writer, "DEBITORENMANAGEMENT");
                    return;
                case Themengebiet.DemandSideManagement:
                    serializer.Serialize(writer, "DEMAND_SIDE_MANAGEMENT");
                    return;
                case Themengebiet.Edifact:
                    serializer.Serialize(writer, "EDIFACT");
                    return;
                case Themengebiet.EdiVereinbarung:
                    serializer.Serialize(writer, "EDI_VEREINBARUNG");
                    return;
                case Themengebiet.Einspeisung:
                    serializer.Serialize(writer, "EINSPEISUNG");
                    return;
                case Themengebiet.Energiedatenmanagement:
                    serializer.Serialize(writer, "ENERGIEDATENMANAGEMENT");
                    return;
                case Themengebiet.Fahrplanmanagement:
                    serializer.Serialize(writer, "FAHRPLANMANAGEMENT");
                    return;
                case Themengebiet.Gabi:
                    serializer.Serialize(writer, "GABI");
                    return;
                case Themengebiet.Geli:
                    serializer.Serialize(writer, "GELI");
                    return;
                case Themengebiet.Geraeterueckgabe:
                    serializer.Serialize(writer, "GERAETERUECKGABE");
                    return;
                case Themengebiet.Geraetewechsel:
                    serializer.Serialize(writer, "GERAETEWECHSEL");
                    return;
                case Themengebiet.Gpke:
                    serializer.Serialize(writer, "GPKE");
                    return;
                case Themengebiet.Inbetriebnahme:
                    serializer.Serialize(writer, "INBETRIEBNAHME");
                    return;
                case Themengebiet.Invoic:
                    serializer.Serialize(writer, "INVOIC");
                    return;
                case Themengebiet.Kapazitaetsmanagement:
                    serializer.Serialize(writer, "KAPAZITAETSMANAGEMENT");
                    return;
                case Themengebiet.Klaerfaelle:
                    serializer.Serialize(writer, "KLAERFAELLE");
                    return;
                case Themengebiet.LastgaengeRlm:
                    serializer.Serialize(writer, "LASTGAENGE_RLM");
                    return;
                case Themengebiet.Lieferantenrahmenvertrag:
                    serializer.Serialize(writer, "LIEFERANTENRAHMENVERTRAG");
                    return;
                case Themengebiet.Lieferantenwechsel:
                    serializer.Serialize(writer, "LIEFERANTENWECHSEL");
                    return;
                case Themengebiet.Mabis:
                    serializer.Serialize(writer, "MABIS");
                    return;
                case Themengebiet.Mahnwesen:
                    serializer.Serialize(writer, "MAHNWESEN");
                    return;
                case Themengebiet.Marktgebietsverantwortlicher:
                    serializer.Serialize(writer, "MARKTGEBIETSVERANTWORTLICHER");
                    return;
                case Themengebiet.Marktkommunikation:
                    serializer.Serialize(writer, "MARKTKOMMUNIKATION");
                    return;
                case Themengebiet.MehrMindermengen:
                    serializer.Serialize(writer, "MEHR_MINDERMENGEN");
                    return;
                case Themengebiet.MsbMdl:
                    serializer.Serialize(writer, "MSB_MDL");
                    return;
                case Themengebiet.Mscons:
                    serializer.Serialize(writer, "MSCONS");
                    return;
                case Themengebiet.Netzabrechnung:
                    serializer.Serialize(writer, "NETZABRECHNUNG");
                    return;
                case Themengebiet.Netzentgelte:
                    serializer.Serialize(writer, "NETZENTGELTE");
                    return;
                case Themengebiet.Netzmanagement:
                    serializer.Serialize(writer, "NETZMANAGEMENT");
                    return;
                case Themengebiet.Orders:
                    serializer.Serialize(writer, "ORDERS");
                    return;
                case Themengebiet.Ordersp:
                    serializer.Serialize(writer, "ORDERSP");
                    return;
                case Themengebiet.Recht:
                    serializer.Serialize(writer, "RECHT");
                    return;
                case Themengebiet.Regulierungsmanagement:
                    serializer.Serialize(writer, "REGULIERUNGSMANAGEMENT");
                    return;
                case Themengebiet.Reklamationen:
                    serializer.Serialize(writer, "REKLAMATIONEN");
                    return;
                case Themengebiet.Remadv:
                    serializer.Serialize(writer, "REMADV");
                    return;
                case Themengebiet.SperrenEntsperrenInkasso:
                    serializer.Serialize(writer, "SPERREN_ENTSPERREN_INKASSO");
                    return;
                case Themengebiet.Stammdaten:
                    serializer.Serialize(writer, "STAMMDATEN");
                    return;
                case Themengebiet.Stoerungsfaelle:
                    serializer.Serialize(writer, "STOERUNGSFAELLE");
                    return;
                case Themengebiet.TechnischeFragen:
                    serializer.Serialize(writer, "TECHNISCHE_FRAGEN");
                    return;
                case Themengebiet.UmstellungInvoic:
                    serializer.Serialize(writer, "UMSTELLUNG_INVOIC");
                    return;
                case Themengebiet.Utilmd:
                    serializer.Serialize(writer, "UTILMD");
                    return;
                case Themengebiet.VerschluesselungSignatur:
                    serializer.Serialize(writer, "VERSCHLUESSELUNG_SIGNATUR");
                    return;
                case Themengebiet.Vertragsmanagement:
                    serializer.Serialize(writer, "VERTRAGSMANAGEMENT");
                    return;
                case Themengebiet.Vertrieb:
                    serializer.Serialize(writer, "VERTRIEB");
                    return;
                case Themengebiet.Wim:
                    serializer.Serialize(writer, "WIM");
                    return;
                case Themengebiet.ZaehlerstaendeSlp:
                    serializer.Serialize(writer, "ZAEHLERSTAENDE_SLP");
                    return;
                case Themengebiet.Zahlungsverkehr:
                    serializer.Serialize(writer, "ZAHLUNGSVERKEHR");
                    return;
                case Themengebiet.Zuordnungsvereinbarung:
                    serializer.Serialize(writer, "ZUORDNUNGSVEREINBARUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Themengebiet");
        }

        public static readonly ThemengebietConverter Singleton = new ThemengebietConverter();
    }

    internal class GeschaeftspartnerrolleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geschaeftspartnerrolle) || t == typeof(Geschaeftspartnerrolle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DIENSTLEISTER":
                    return Geschaeftspartnerrolle.Dienstleister;
                case "INTERESSENT":
                    return Geschaeftspartnerrolle.Interessent;
                case "KUNDE":
                    return Geschaeftspartnerrolle.Kunde;
                case "LIEFERANT":
                    return Geschaeftspartnerrolle.Lieferant;
                case "MARKTPARTNER":
                    return Geschaeftspartnerrolle.Marktpartner;
            }
            throw new Exception("Cannot unmarshal type Geschaeftspartnerrolle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geschaeftspartnerrolle)untypedValue;
            switch (value)
            {
                case Geschaeftspartnerrolle.Dienstleister:
                    serializer.Serialize(writer, "DIENSTLEISTER");
                    return;
                case Geschaeftspartnerrolle.Interessent:
                    serializer.Serialize(writer, "INTERESSENT");
                    return;
                case Geschaeftspartnerrolle.Kunde:
                    serializer.Serialize(writer, "KUNDE");
                    return;
                case Geschaeftspartnerrolle.Lieferant:
                    serializer.Serialize(writer, "LIEFERANT");
                    return;
                case Geschaeftspartnerrolle.Marktpartner:
                    serializer.Serialize(writer, "MARKTPARTNER");
                    return;
            }
            throw new Exception("Cannot marshal type Geschaeftspartnerrolle");
        }

        public static readonly GeschaeftspartnerrolleConverter Singleton = new GeschaeftspartnerrolleConverter();
    }

    internal class OrganisationstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Organisationstyp) || t == typeof(Organisationstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KOMMUNALE_EINRICHTUNG":
                    return Organisationstyp.KommunaleEinrichtung;
                case "PRIVATPERSON":
                    return Organisationstyp.Privatperson;
                case "STAATLICHE_BEHOERDE":
                    return Organisationstyp.StaatlicheBehoerde;
                case "UNTERNEHMEN":
                    return Organisationstyp.Unternehmen;
            }
            throw new Exception("Cannot unmarshal type Organisationstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Organisationstyp)untypedValue;
            switch (value)
            {
                case Organisationstyp.KommunaleEinrichtung:
                    serializer.Serialize(writer, "KOMMUNALE_EINRICHTUNG");
                    return;
                case Organisationstyp.Privatperson:
                    serializer.Serialize(writer, "PRIVATPERSON");
                    return;
                case Organisationstyp.StaatlicheBehoerde:
                    serializer.Serialize(writer, "STAATLICHE_BEHOERDE");
                    return;
                case Organisationstyp.Unternehmen:
                    serializer.Serialize(writer, "UNTERNEHMEN");
                    return;
            }
            throw new Exception("Cannot marshal type Organisationstyp");
        }

        public static readonly OrganisationstypConverter Singleton = new OrganisationstypConverter();
    }

    internal class EnergierichtungConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Energierichtung) || t == typeof(Energierichtung?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AUSSP":
                    return Energierichtung.Aussp;
                case "EINSP":
                    return Energierichtung.Einsp;
            }
            throw new Exception("Cannot unmarshal type Energierichtung");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Energierichtung)untypedValue;
            switch (value)
            {
                case Energierichtung.Aussp:
                    serializer.Serialize(writer, "AUSSP");
                    return;
                case Energierichtung.Einsp:
                    serializer.Serialize(writer, "EINSP");
                    return;
            }
            throw new Exception("Cannot marshal type Energierichtung");
        }

        public static readonly EnergierichtungConverter Singleton = new EnergierichtungConverter();
    }

    internal class GasqualitaetConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gasqualitaet) || t == typeof(Gasqualitaet?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "H_GAS":
                    return Gasqualitaet.HGas;
                case "L_GAS":
                    return Gasqualitaet.LGas;
            }
            throw new Exception("Cannot unmarshal type Gasqualitaet");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gasqualitaet)untypedValue;
            switch (value)
            {
                case Gasqualitaet.HGas:
                    serializer.Serialize(writer, "H_GAS");
                    return;
                case Gasqualitaet.LGas:
                    serializer.Serialize(writer, "L_GAS");
                    return;
            }
            throw new Exception("Cannot marshal type Gasqualitaet");
        }

        public static readonly GasqualitaetConverter Singleton = new GasqualitaetConverter();
    }

    internal class GebiettypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gebiettyp) || t == typeof(Gebiettyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AREALNETZ":
                    return Gebiettyp.Arealnetz;
                case "BILANZIERUNGSGEBIET":
                    return Gebiettyp.Bilanzierungsgebiet;
                case "GRUNDVERSORGUNGSGEBIET":
                    return Gebiettyp.Grundversorgungsgebiet;
                case "MARKTGEBIET":
                    return Gebiettyp.Marktgebiet;
                case "REGELZONE":
                    return Gebiettyp.Regelzone;
                case "REGIONALNETZ":
                    return Gebiettyp.Regionalnetz;
                case "TRANSPORTNETZ":
                    return Gebiettyp.Transportnetz;
                case "VERSORGUNGSGEBIET":
                    return Gebiettyp.Versorgungsgebiet;
                case "VERTEILNETZ":
                    return Gebiettyp.Verteilnetz;
            }
            throw new Exception("Cannot unmarshal type Gebiettyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gebiettyp)untypedValue;
            switch (value)
            {
                case Gebiettyp.Arealnetz:
                    serializer.Serialize(writer, "AREALNETZ");
                    return;
                case Gebiettyp.Bilanzierungsgebiet:
                    serializer.Serialize(writer, "BILANZIERUNGSGEBIET");
                    return;
                case Gebiettyp.Grundversorgungsgebiet:
                    serializer.Serialize(writer, "GRUNDVERSORGUNGSGEBIET");
                    return;
                case Gebiettyp.Marktgebiet:
                    serializer.Serialize(writer, "MARKTGEBIET");
                    return;
                case Gebiettyp.Regelzone:
                    serializer.Serialize(writer, "REGELZONE");
                    return;
                case Gebiettyp.Regionalnetz:
                    serializer.Serialize(writer, "REGIONALNETZ");
                    return;
                case Gebiettyp.Transportnetz:
                    serializer.Serialize(writer, "TRANSPORTNETZ");
                    return;
                case Gebiettyp.Versorgungsgebiet:
                    serializer.Serialize(writer, "VERSORGUNGSGEBIET");
                    return;
                case Gebiettyp.Verteilnetz:
                    serializer.Serialize(writer, "VERTEILNETZ");
                    return;
            }
            throw new Exception("Cannot marshal type Gebiettyp");
        }

        public static readonly GebiettypConverter Singleton = new GebiettypConverter();
    }

    internal class KundentypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kundentyp) || t == typeof(Kundentyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BELEUCHTUNG_OEFFENTLICH":
                    return Kundentyp.BeleuchtungOeffentlich;
                case "BELEUCHTUNG_STRASSE":
                    return Kundentyp.BeleuchtungStrasse;
                case "DIREKTHEIZUNG":
                    return Kundentyp.Direktheizung;
                case "GEMEINSCHAFT_MFH":
                    return Kundentyp.GemeinschaftMfh;
                case "GEWERBE":
                    return Kundentyp.Gewerbe;
                case "HAUSHALT":
                    return Kundentyp.Haushalt;
                case "KIRCHE":
                    return Kundentyp.Kirche;
                case "KWK":
                    return Kundentyp.Kwk;
                case "LADESAEULE":
                    return Kundentyp.Ladesaeule;
                case "LANDWIRT":
                    return Kundentyp.Landwirt;
                case "PRIVAT":
                    return Kundentyp.Privat;
                case "SONSTIGE":
                    return Kundentyp.Sonstige;
                case "SPEICHERHEIZUNG":
                    return Kundentyp.Speicherheizung;
                case "UNTERBR_EINRICHTUNG":
                    return Kundentyp.UnterbrEinrichtung;
                case "WAERMEPUMPE":
                    return Kundentyp.Waermepumpe;
            }
            throw new Exception("Cannot unmarshal type Kundentyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kundentyp)untypedValue;
            switch (value)
            {
                case Kundentyp.BeleuchtungOeffentlich:
                    serializer.Serialize(writer, "BELEUCHTUNG_OEFFENTLICH");
                    return;
                case Kundentyp.BeleuchtungStrasse:
                    serializer.Serialize(writer, "BELEUCHTUNG_STRASSE");
                    return;
                case Kundentyp.Direktheizung:
                    serializer.Serialize(writer, "DIREKTHEIZUNG");
                    return;
                case Kundentyp.GemeinschaftMfh:
                    serializer.Serialize(writer, "GEMEINSCHAFT_MFH");
                    return;
                case Kundentyp.Gewerbe:
                    serializer.Serialize(writer, "GEWERBE");
                    return;
                case Kundentyp.Haushalt:
                    serializer.Serialize(writer, "HAUSHALT");
                    return;
                case Kundentyp.Kirche:
                    serializer.Serialize(writer, "KIRCHE");
                    return;
                case Kundentyp.Kwk:
                    serializer.Serialize(writer, "KWK");
                    return;
                case Kundentyp.Ladesaeule:
                    serializer.Serialize(writer, "LADESAEULE");
                    return;
                case Kundentyp.Landwirt:
                    serializer.Serialize(writer, "LANDWIRT");
                    return;
                case Kundentyp.Privat:
                    serializer.Serialize(writer, "PRIVAT");
                    return;
                case Kundentyp.Sonstige:
                    serializer.Serialize(writer, "SONSTIGE");
                    return;
                case Kundentyp.Speicherheizung:
                    serializer.Serialize(writer, "SPEICHERHEIZUNG");
                    return;
                case Kundentyp.UnterbrEinrichtung:
                    serializer.Serialize(writer, "UNTERBR_EINRICHTUNG");
                    return;
                case Kundentyp.Waermepumpe:
                    serializer.Serialize(writer, "WAERMEPUMPE");
                    return;
            }
            throw new Exception("Cannot marshal type Kundentyp");
        }

        public static readonly KundentypConverter Singleton = new KundentypConverter();
    }

    internal class NetzebeneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Netzebene) || t == typeof(Netzebene?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HD":
                    return Netzebene.Hd;
                case "HSP":
                    return Netzebene.Hsp;
                case "HSP_MSP_UMSP":
                    return Netzebene.HspMspUmsp;
                case "HSS":
                    return Netzebene.Hss;
                case "HSS_HSP_UMSP":
                    return Netzebene.HssHspUmsp;
                case "MD":
                    return Netzebene.Md;
                case "MSP":
                    return Netzebene.Msp;
                case "MSP_NSP_UMSP":
                    return Netzebene.MspNspUmsp;
                case "ND":
                    return Netzebene.Nd;
                case "NSP":
                    return Netzebene.Nsp;
            }
            throw new Exception("Cannot unmarshal type Netzebene");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Netzebene)untypedValue;
            switch (value)
            {
                case Netzebene.Hd:
                    serializer.Serialize(writer, "HD");
                    return;
                case Netzebene.Hsp:
                    serializer.Serialize(writer, "HSP");
                    return;
                case Netzebene.HspMspUmsp:
                    serializer.Serialize(writer, "HSP_MSP_UMSP");
                    return;
                case Netzebene.Hss:
                    serializer.Serialize(writer, "HSS");
                    return;
                case Netzebene.HssHspUmsp:
                    serializer.Serialize(writer, "HSS_HSP_UMSP");
                    return;
                case Netzebene.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case Netzebene.Msp:
                    serializer.Serialize(writer, "MSP");
                    return;
                case Netzebene.MspNspUmsp:
                    serializer.Serialize(writer, "MSP_NSP_UMSP");
                    return;
                case Netzebene.Nd:
                    serializer.Serialize(writer, "ND");
                    return;
                case Netzebene.Nsp:
                    serializer.Serialize(writer, "NSP");
                    return;
            }
            throw new Exception("Cannot marshal type Netzebene");
        }

        public static readonly NetzebeneConverter Singleton = new NetzebeneConverter();
    }

    internal class SparteConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Sparte) || t == typeof(Sparte?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABWASSER":
                    return Sparte.Abwasser;
                case "FERNWAERME":
                    return Sparte.Fernwaerme;
                case "GAS":
                    return Sparte.Gas;
                case "NAHWAERME":
                    return Sparte.Nahwaerme;
                case "STROM":
                    return Sparte.Strom;
                case "STROM_UND_GAS":
                    return Sparte.StromUndGas;
                case "WASSER":
                    return Sparte.Wasser;
            }
            throw new Exception("Cannot unmarshal type Sparte");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Sparte)untypedValue;
            switch (value)
            {
                case Sparte.Abwasser:
                    serializer.Serialize(writer, "ABWASSER");
                    return;
                case Sparte.Fernwaerme:
                    serializer.Serialize(writer, "FERNWAERME");
                    return;
                case Sparte.Gas:
                    serializer.Serialize(writer, "GAS");
                    return;
                case Sparte.Nahwaerme:
                    serializer.Serialize(writer, "NAHWAERME");
                    return;
                case Sparte.Strom:
                    serializer.Serialize(writer, "STROM");
                    return;
                case Sparte.StromUndGas:
                    serializer.Serialize(writer, "STROM_UND_GAS");
                    return;
                case Sparte.Wasser:
                    serializer.Serialize(writer, "WASSER");
                    return;
            }
            throw new Exception("Cannot marshal type Sparte");
        }

        public static readonly SparteConverter Singleton = new SparteConverter();
    }

    internal class VerbrauchsartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Verbrauchsart) || t == typeof(Verbrauchsart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KL":
                    return Verbrauchsart.Kl;
                case "KLW":
                    return Verbrauchsart.Klw;
                case "KLWS":
                    return Verbrauchsart.Klws;
                case "W":
                    return Verbrauchsart.W;
                case "WS":
                    return Verbrauchsart.Ws;
            }
            throw new Exception("Cannot unmarshal type Verbrauchsart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Verbrauchsart)untypedValue;
            switch (value)
            {
                case Verbrauchsart.Kl:
                    serializer.Serialize(writer, "KL");
                    return;
                case Verbrauchsart.Klw:
                    serializer.Serialize(writer, "KLW");
                    return;
                case Verbrauchsart.Klws:
                    serializer.Serialize(writer, "KLWS");
                    return;
                case Verbrauchsart.W:
                    serializer.Serialize(writer, "W");
                    return;
                case Verbrauchsart.Ws:
                    serializer.Serialize(writer, "WS");
                    return;
            }
            throw new Exception("Cannot marshal type Verbrauchsart");
        }

        public static readonly VerbrauchsartConverter Singleton = new VerbrauchsartConverter();
    }

    internal class MengeneinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mengeneinheit) || t == typeof(Mengeneinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HALBJAHR":
                    return Mengeneinheit.Halbjahr;
                case "JAHR":
                    return Mengeneinheit.Jahr;
                case "KUBIKMETER":
                    return Mengeneinheit.Kubikmeter;
                case "KVAR":
                    return Mengeneinheit.Kvar;
                case "KVARH":
                    return Mengeneinheit.Kvarh;
                case "KW":
                    return Mengeneinheit.Kw;
                case "KWH":
                    return Mengeneinheit.Kwh;
                case "KWHK":
                    return Mengeneinheit.Kwhk;
                case "MINUTE":
                    return Mengeneinheit.Minute;
                case "MONAT":
                    return Mengeneinheit.Monat;
                case "MW":
                    return Mengeneinheit.Mw;
                case "MWH":
                    return Mengeneinheit.Mwh;
                case "PROZENT":
                    return Mengeneinheit.Prozent;
                case "QUARTAL":
                    return Mengeneinheit.Quartal;
                case "SEKUNDE":
                    return Mengeneinheit.Sekunde;
                case "STUECK":
                    return Mengeneinheit.Stueck;
                case "STUNDE":
                    return Mengeneinheit.Stunde;
                case "TAG":
                    return Mengeneinheit.Tag;
                case "VAR":
                    return Mengeneinheit.Var;
                case "VARH":
                    return Mengeneinheit.Varh;
                case "VIERTEL_STUNDE":
                    return Mengeneinheit.ViertelStunde;
                case "W":
                    return Mengeneinheit.W;
                case "WH":
                    return Mengeneinheit.Wh;
                case "WOCHE":
                    return Mengeneinheit.Woche;
            }
            throw new Exception("Cannot unmarshal type Mengeneinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mengeneinheit)untypedValue;
            switch (value)
            {
                case Mengeneinheit.Halbjahr:
                    serializer.Serialize(writer, "HALBJAHR");
                    return;
                case Mengeneinheit.Jahr:
                    serializer.Serialize(writer, "JAHR");
                    return;
                case Mengeneinheit.Kubikmeter:
                    serializer.Serialize(writer, "KUBIKMETER");
                    return;
                case Mengeneinheit.Kvar:
                    serializer.Serialize(writer, "KVAR");
                    return;
                case Mengeneinheit.Kvarh:
                    serializer.Serialize(writer, "KVARH");
                    return;
                case Mengeneinheit.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Mengeneinheit.Kwh:
                    serializer.Serialize(writer, "KWH");
                    return;
                case Mengeneinheit.Kwhk:
                    serializer.Serialize(writer, "KWHK");
                    return;
                case Mengeneinheit.Minute:
                    serializer.Serialize(writer, "MINUTE");
                    return;
                case Mengeneinheit.Monat:
                    serializer.Serialize(writer, "MONAT");
                    return;
                case Mengeneinheit.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Mengeneinheit.Mwh:
                    serializer.Serialize(writer, "MWH");
                    return;
                case Mengeneinheit.Prozent:
                    serializer.Serialize(writer, "PROZENT");
                    return;
                case Mengeneinheit.Quartal:
                    serializer.Serialize(writer, "QUARTAL");
                    return;
                case Mengeneinheit.Sekunde:
                    serializer.Serialize(writer, "SEKUNDE");
                    return;
                case Mengeneinheit.Stueck:
                    serializer.Serialize(writer, "STUECK");
                    return;
                case Mengeneinheit.Stunde:
                    serializer.Serialize(writer, "STUNDE");
                    return;
                case Mengeneinheit.Tag:
                    serializer.Serialize(writer, "TAG");
                    return;
                case Mengeneinheit.Var:
                    serializer.Serialize(writer, "VAR");
                    return;
                case Mengeneinheit.Varh:
                    serializer.Serialize(writer, "VARH");
                    return;
                case Mengeneinheit.ViertelStunde:
                    serializer.Serialize(writer, "VIERTEL_STUNDE");
                    return;
                case Mengeneinheit.W:
                    serializer.Serialize(writer, "W");
                    return;
                case Mengeneinheit.Wh:
                    serializer.Serialize(writer, "WH");
                    return;
                case Mengeneinheit.Woche:
                    serializer.Serialize(writer, "WOCHE");
                    return;
            }
            throw new Exception("Cannot marshal type Mengeneinheit");
        }

        public static readonly MengeneinheitConverter Singleton = new MengeneinheitConverter();
    }

    internal class MesswertstatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Messwertstatus) || t == typeof(Messwertstatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABGELESEN":
                    return Messwertstatus.Abgelesen;
                case "ANGABE_FUER_LIEFERSCHEIN":
                    return Messwertstatus.AngabeFuerLieferschein;
                case "ENERGIEMENGESUMMIERT":
                    return Messwertstatus.Energiemengesummiert;
                case "ERSATZWERT":
                    return Messwertstatus.Ersatzwert;
                case "FEHLT":
                    return Messwertstatus.Fehlt;
                case "NICHT_VERWENDBAR":
                    return Messwertstatus.NichtVerwendbar;
                case "PROGNOSEWERT":
                    return Messwertstatus.Prognosewert;
                case "VORLAEUFIGERWERT":
                    return Messwertstatus.Vorlaeufigerwert;
                case "VORSCHLAGSWERT":
                    return Messwertstatus.Vorschlagswert;
            }
            throw new Exception("Cannot unmarshal type Messwertstatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Messwertstatus)untypedValue;
            switch (value)
            {
                case Messwertstatus.Abgelesen:
                    serializer.Serialize(writer, "ABGELESEN");
                    return;
                case Messwertstatus.AngabeFuerLieferschein:
                    serializer.Serialize(writer, "ANGABE_FUER_LIEFERSCHEIN");
                    return;
                case Messwertstatus.Energiemengesummiert:
                    serializer.Serialize(writer, "ENERGIEMENGESUMMIERT");
                    return;
                case Messwertstatus.Ersatzwert:
                    serializer.Serialize(writer, "ERSATZWERT");
                    return;
                case Messwertstatus.Fehlt:
                    serializer.Serialize(writer, "FEHLT");
                    return;
                case Messwertstatus.NichtVerwendbar:
                    serializer.Serialize(writer, "NICHT_VERWENDBAR");
                    return;
                case Messwertstatus.Prognosewert:
                    serializer.Serialize(writer, "PROGNOSEWERT");
                    return;
                case Messwertstatus.Vorlaeufigerwert:
                    serializer.Serialize(writer, "VORLAEUFIGERWERT");
                    return;
                case Messwertstatus.Vorschlagswert:
                    serializer.Serialize(writer, "VORSCHLAGSWERT");
                    return;
            }
            throw new Exception("Cannot marshal type Messwertstatus");
        }

        public static readonly MesswertstatusConverter Singleton = new MesswertstatusConverter();
    }

    internal class WertermittlungsverfahrenConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Wertermittlungsverfahren) || t == typeof(Wertermittlungsverfahren?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "MESSUNG":
                    return Wertermittlungsverfahren.Messung;
                case "PROGNOSE":
                    return Wertermittlungsverfahren.Prognose;
            }
            throw new Exception("Cannot unmarshal type Wertermittlungsverfahren");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Wertermittlungsverfahren)untypedValue;
            switch (value)
            {
                case Wertermittlungsverfahren.Messung:
                    serializer.Serialize(writer, "MESSUNG");
                    return;
                case Wertermittlungsverfahren.Prognose:
                    serializer.Serialize(writer, "PROGNOSE");
                    return;
            }
            throw new Exception("Cannot marshal type Wertermittlungsverfahren");
        }

        public static readonly WertermittlungsverfahrenConverter Singleton = new WertermittlungsverfahrenConverter();
    }

    internal class AbgabeArtConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AbgabeArt) || t == typeof(AbgabeArt?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KAS":
                    return AbgabeArt.Kas;
                case "SA":
                    return AbgabeArt.Sa;
                case "SAS":
                    return AbgabeArt.Sas;
                case "TA":
                    return AbgabeArt.Ta;
                case "TAS":
                    return AbgabeArt.Tas;
                case "TK":
                    return AbgabeArt.Tk;
                case "TKS":
                    return AbgabeArt.Tks;
                case "TS":
                    return AbgabeArt.Ts;
                case "TSS":
                    return AbgabeArt.Tss;
            }
            throw new Exception("Cannot unmarshal type AbgabeArt");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AbgabeArt)untypedValue;
            switch (value)
            {
                case AbgabeArt.Kas:
                    serializer.Serialize(writer, "KAS");
                    return;
                case AbgabeArt.Sa:
                    serializer.Serialize(writer, "SA");
                    return;
                case AbgabeArt.Sas:
                    serializer.Serialize(writer, "SAS");
                    return;
                case AbgabeArt.Ta:
                    serializer.Serialize(writer, "TA");
                    return;
                case AbgabeArt.Tas:
                    serializer.Serialize(writer, "TAS");
                    return;
                case AbgabeArt.Tk:
                    serializer.Serialize(writer, "TK");
                    return;
                case AbgabeArt.Tks:
                    serializer.Serialize(writer, "TKS");
                    return;
                case AbgabeArt.Ts:
                    serializer.Serialize(writer, "TS");
                    return;
                case AbgabeArt.Tss:
                    serializer.Serialize(writer, "TSS");
                    return;
            }
            throw new Exception("Cannot marshal type AbgabeArt");
        }

        public static readonly AbgabeArtConverter Singleton = new AbgabeArtConverter();
    }

    internal class MarktrolleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Marktrolle) || t == typeof(Marktrolle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIKO":
                    return Marktrolle.Biko;
                case "BKV":
                    return Marktrolle.Bkv;
                case "BTR":
                    return Marktrolle.Btr;
                case "DP":
                    return Marktrolle.Dp;
                case "EIV":
                    return Marktrolle.Eiv;
                case "ESA":
                    return Marktrolle.Esa;
                case "KN":
                    return Marktrolle.Kn;
                case "LF":
                    return Marktrolle.Lf;
                case "MGV":
                    return Marktrolle.Mgv;
                case "MSB":
                    return Marktrolle.Msb;
                case "NB":
                    return Marktrolle.Nb;
                case "RB":
                    return Marktrolle.Rb;
                case "UENB":
                    return Marktrolle.Uenb;
            }
            throw new Exception("Cannot unmarshal type Marktrolle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Marktrolle)untypedValue;
            switch (value)
            {
                case Marktrolle.Biko:
                    serializer.Serialize(writer, "BIKO");
                    return;
                case Marktrolle.Bkv:
                    serializer.Serialize(writer, "BKV");
                    return;
                case Marktrolle.Btr:
                    serializer.Serialize(writer, "BTR");
                    return;
                case Marktrolle.Dp:
                    serializer.Serialize(writer, "DP");
                    return;
                case Marktrolle.Eiv:
                    serializer.Serialize(writer, "EIV");
                    return;
                case Marktrolle.Esa:
                    serializer.Serialize(writer, "ESA");
                    return;
                case Marktrolle.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case Marktrolle.Lf:
                    serializer.Serialize(writer, "LF");
                    return;
                case Marktrolle.Mgv:
                    serializer.Serialize(writer, "MGV");
                    return;
                case Marktrolle.Msb:
                    serializer.Serialize(writer, "MSB");
                    return;
                case Marktrolle.Nb:
                    serializer.Serialize(writer, "NB");
                    return;
                case Marktrolle.Rb:
                    serializer.Serialize(writer, "RB");
                    return;
                case Marktrolle.Uenb:
                    serializer.Serialize(writer, "UENB");
                    return;
            }
            throw new Exception("Cannot marshal type Marktrolle");
        }

        public static readonly MarktrolleConverter Singleton = new MarktrolleConverter();
    }

    internal class VerwendungszweckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Verwendungszweck) || t == typeof(Verwendungszweck?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BILANZKREISABRECHNUNG":
                    return Verwendungszweck.Bilanzkreisabrechnung;
                case "ENDKUNDENABRECHNUNG":
                    return Verwendungszweck.Endkundenabrechnung;
                case "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS":
                    return Verwendungszweck.ErmittlungAusgeglichenheitBilanzkreis;
                case "MEHRMINDERMENGENABRECHNUNG":
                    return Verwendungszweck.Mehrmindermengenabrechnung;
                case "NETZNUTZUNGSABRECHNUNG":
                    return Verwendungszweck.Netznutzungsabrechnung;
                case "UEBERMITTLUNG_AN_DAS_HKNR":
                    return Verwendungszweck.UebermittlungAnDasHknr;
            }
            throw new Exception("Cannot unmarshal type Verwendungszweck");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Verwendungszweck)untypedValue;
            switch (value)
            {
                case Verwendungszweck.Bilanzkreisabrechnung:
                    serializer.Serialize(writer, "BILANZKREISABRECHNUNG");
                    return;
                case Verwendungszweck.Endkundenabrechnung:
                    serializer.Serialize(writer, "ENDKUNDENABRECHNUNG");
                    return;
                case Verwendungszweck.ErmittlungAusgeglichenheitBilanzkreis:
                    serializer.Serialize(writer, "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS");
                    return;
                case Verwendungszweck.Mehrmindermengenabrechnung:
                    serializer.Serialize(writer, "MEHRMINDERMENGENABRECHNUNG");
                    return;
                case Verwendungszweck.Netznutzungsabrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSABRECHNUNG");
                    return;
                case Verwendungszweck.UebermittlungAnDasHknr:
                    serializer.Serialize(writer, "UEBERMITTLUNG_AN_DAS_HKNR");
                    return;
            }
            throw new Exception("Cannot marshal type Verwendungszweck");
        }

        public static readonly VerwendungszweckConverter Singleton = new VerwendungszweckConverter();
    }

    internal class WaermenutzungConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waermenutzung) || t == typeof(Waermenutzung?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DIREKTHEIZUNG":
                    return Waermenutzung.Direktheizung;
                case "SPEICHERHEIZUNG":
                    return Waermenutzung.Speicherheizung;
                case "WAERMEPUMPE":
                    return Waermenutzung.Waermepumpe;
            }
            throw new Exception("Cannot unmarshal type Waermenutzung");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waermenutzung)untypedValue;
            switch (value)
            {
                case Waermenutzung.Direktheizung:
                    serializer.Serialize(writer, "DIREKTHEIZUNG");
                    return;
                case Waermenutzung.Speicherheizung:
                    serializer.Serialize(writer, "SPEICHERHEIZUNG");
                    return;
                case Waermenutzung.Waermepumpe:
                    serializer.Serialize(writer, "WAERMEPUMPE");
                    return;
            }
            throw new Exception("Cannot marshal type Waermenutzung");
        }

        public static readonly WaermenutzungConverter Singleton = new WaermenutzungConverter();
    }

    internal class ArithmetischeOperationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ArithmetischeOperation) || t == typeof(ArithmetischeOperation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ADDITION":
                    return ArithmetischeOperation.Addition;
                case "DIVISION":
                    return ArithmetischeOperation.Division;
                case "MULTIPLIKATION":
                    return ArithmetischeOperation.Multiplikation;
                case "SUBTRAKTION":
                    return ArithmetischeOperation.Subtraktion;
            }
            throw new Exception("Cannot unmarshal type ArithmetischeOperation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ArithmetischeOperation)untypedValue;
            switch (value)
            {
                case ArithmetischeOperation.Addition:
                    serializer.Serialize(writer, "ADDITION");
                    return;
                case ArithmetischeOperation.Division:
                    serializer.Serialize(writer, "DIVISION");
                    return;
                case ArithmetischeOperation.Multiplikation:
                    serializer.Serialize(writer, "MULTIPLIKATION");
                    return;
                case ArithmetischeOperation.Subtraktion:
                    serializer.Serialize(writer, "SUBTRAKTION");
                    return;
            }
            throw new Exception("Cannot marshal type ArithmetischeOperation");
        }

        public static readonly ArithmetischeOperationConverter Singleton = new ArithmetischeOperationConverter();
    }

    internal class GeraeteklasseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geraeteklasse) || t == typeof(Geraeteklasse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KOMMUNIKATIONSEINRICHTUNG":
                    return Geraeteklasse.Kommunikationseinrichtung;
                case "MENGENUMWERTER":
                    return Geraeteklasse.Mengenumwerter;
                case "SMARTMETER_GATEWAY":
                    return Geraeteklasse.SmartmeterGateway;
                case "STEUERBOX":
                    return Geraeteklasse.Steuerbox;
                case "TECHNISCHE_STEUEREINRICHTUNG":
                    return Geraeteklasse.TechnischeSteuereinrichtung;
                case "WANDLER":
                    return Geraeteklasse.Wandler;
                case "ZAEHLEINRICHTUNG":
                    return Geraeteklasse.Zaehleinrichtung;
            }
            throw new Exception("Cannot unmarshal type Geraeteklasse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geraeteklasse)untypedValue;
            switch (value)
            {
                case Geraeteklasse.Kommunikationseinrichtung:
                    serializer.Serialize(writer, "KOMMUNIKATIONSEINRICHTUNG");
                    return;
                case Geraeteklasse.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case Geraeteklasse.SmartmeterGateway:
                    serializer.Serialize(writer, "SMARTMETER_GATEWAY");
                    return;
                case Geraeteklasse.Steuerbox:
                    serializer.Serialize(writer, "STEUERBOX");
                    return;
                case Geraeteklasse.TechnischeSteuereinrichtung:
                    serializer.Serialize(writer, "TECHNISCHE_STEUEREINRICHTUNG");
                    return;
                case Geraeteklasse.Wandler:
                    serializer.Serialize(writer, "WANDLER");
                    return;
                case Geraeteklasse.Zaehleinrichtung:
                    serializer.Serialize(writer, "ZAEHLEINRICHTUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Geraeteklasse");
        }

        public static readonly GeraeteklasseConverter Singleton = new GeraeteklasseConverter();
    }

    internal class GeraetetypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geraetetyp) || t == typeof(Geraetetyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BLOCKSTROMWANDLER":
                    return Geraetetyp.Blockstromwandler;
                case "DATENLOGGER":
                    return Geraetetyp.Datenlogger;
                case "DSL_KOM":
                    return Geraetetyp.DslKom;
                case "EDL_21":
                    return Geraetetyp.Edl21;
                case "EDL_40":
                    return Geraetetyp.Edl40;
                case "EDL_40_ZAEHLERAUFSATZ":
                    return Geraetetyp.Edl40_Zaehleraufsatz;
                case "ETHERNET_KOM":
                    return Geraetetyp.EthernetKom;
                case "HOECHSTBELASTUNGS_ANZEIGER":
                    return Geraetetyp.HoechstbelastungsAnzeiger;
                case "IMPULSGEBER":
                    return Geraetetyp.Impulsgeber;
                case "INTELLIGENTES_MESSYSTEM":
                    return Geraetetyp.IntelligentesMessystem;
                case "KOMBIMESSWANDLER":
                    return Geraetetyp.Kombimesswandler;
                case "KOMBIMESSWANDLER_IMS_MME":
                    return Geraetetyp.KombimesswandlerImsMme;
                case "KOMMUNIKATIONSANSCHLUSS":
                    return Geraetetyp.Kommunikationsanschluss;
                case "KOMPAKT_MU":
                    return Geraetetyp.KompaktMu;
                case "LTE_KOM":
                    return Geraetetyp.LteKom;
                case "MENGENUMWERTER":
                    return Geraetetyp.Mengenumwerter;
                case "MESSWANDLERSATZ_IMS_MME":
                    return Geraetetyp.MesswandlersatzImsMme;
                case "MODEM":
                    return Geraetetyp.Modem;
                case "MODEM_FESTNETZ":
                    return Geraetetyp.ModemFestnetz;
                case "MODEM_FUNK":
                    return Geraetetyp.ModemFunk;
                case "MODEM_GPRS":
                    return Geraetetyp.ModemGprs;
                case "MODEM_GPRS_M_LG":
                    return Geraetetyp.ModemGprsMLg;
                case "MODEM_GSM":
                    return Geraetetyp.ModemGsm;
                case "MODEM_GSM_M_LG":
                    return Geraetetyp.ModemGsmMLg;
                case "MODEM_GSM_O_LG":
                    return Geraetetyp.ModemGsmOLg;
                case "MODERNE_MESSEINRICHTUNG":
                    return Geraetetyp.ModerneMesseinrichtung;
                case "MULTIPLEXANLAGE":
                    return Geraetetyp.Multiplexanlage;
                case "OPTIONALE_ZUS_ZAEHLEINRICHTUNG":
                    return Geraetetyp.OptionaleZusZaehleinrichtung;
                case "PAUSCHALANLAGE":
                    return Geraetetyp.Pauschalanlage;
                case "PLC_KOM":
                    return Geraetetyp.PlcKom;
                case "RUNDSTEUEREMPFAENGER":
                    return Geraetetyp.Rundsteuerempfaenger;
                case "RUNDSTEUEREMPFAENGER_IMS_MME":
                    return Geraetetyp.RundsteuerempfaengerImsMme;
                case "SONSTIGES_GERAET":
                    return Geraetetyp.SonstigesGeraet;
                case "SPANNUNGSWANDLER":
                    return Geraetetyp.Spannungswandler;
                case "STEUEREINRICHTUNG":
                    return Geraetetyp.Steuereinrichtung;
                case "STROMWANDLER":
                    return Geraetetyp.Stromwandler;
                case "SUMMATIONSGERAET":
                    return Geraetetyp.Summationsgeraet;
                case "SYSTEM_MU":
                    return Geraetetyp.SystemMu;
                case "TARIFSCHALTGERAET":
                    return Geraetetyp.Tarifschaltgeraet;
                case "TARIFSCHALTGERAET_IMS_MME":
                    return Geraetetyp.TarifschaltgeraetImsMme;
                case "TELEFONANSCHLUSS":
                    return Geraetetyp.Telefonanschluss;
                case "TELEKOMMUNIKATIONSEINRICHTUNG":
                    return Geraetetyp.Telekommunikationseinrichtung;
                case "TEMPERATUR_KOMPENSATION":
                    return Geraetetyp.TemperaturKompensation;
                case "TEMPERATUR_MU":
                    return Geraetetyp.TemperaturMu;
                case "VERSTAERKERANLAGE":
                    return Geraetetyp.Verstaerkeranlage;
                case "ZUSTANDS_MU":
                    return Geraetetyp.ZustandsMu;
            }
            throw new Exception("Cannot unmarshal type Geraetetyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geraetetyp)untypedValue;
            switch (value)
            {
                case Geraetetyp.Blockstromwandler:
                    serializer.Serialize(writer, "BLOCKSTROMWANDLER");
                    return;
                case Geraetetyp.Datenlogger:
                    serializer.Serialize(writer, "DATENLOGGER");
                    return;
                case Geraetetyp.DslKom:
                    serializer.Serialize(writer, "DSL_KOM");
                    return;
                case Geraetetyp.Edl21:
                    serializer.Serialize(writer, "EDL_21");
                    return;
                case Geraetetyp.Edl40:
                    serializer.Serialize(writer, "EDL_40");
                    return;
                case Geraetetyp.Edl40_Zaehleraufsatz:
                    serializer.Serialize(writer, "EDL_40_ZAEHLERAUFSATZ");
                    return;
                case Geraetetyp.EthernetKom:
                    serializer.Serialize(writer, "ETHERNET_KOM");
                    return;
                case Geraetetyp.HoechstbelastungsAnzeiger:
                    serializer.Serialize(writer, "HOECHSTBELASTUNGS_ANZEIGER");
                    return;
                case Geraetetyp.Impulsgeber:
                    serializer.Serialize(writer, "IMPULSGEBER");
                    return;
                case Geraetetyp.IntelligentesMessystem:
                    serializer.Serialize(writer, "INTELLIGENTES_MESSYSTEM");
                    return;
                case Geraetetyp.Kombimesswandler:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER");
                    return;
                case Geraetetyp.KombimesswandlerImsMme:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER_IMS_MME");
                    return;
                case Geraetetyp.Kommunikationsanschluss:
                    serializer.Serialize(writer, "KOMMUNIKATIONSANSCHLUSS");
                    return;
                case Geraetetyp.KompaktMu:
                    serializer.Serialize(writer, "KOMPAKT_MU");
                    return;
                case Geraetetyp.LteKom:
                    serializer.Serialize(writer, "LTE_KOM");
                    return;
                case Geraetetyp.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case Geraetetyp.MesswandlersatzImsMme:
                    serializer.Serialize(writer, "MESSWANDLERSATZ_IMS_MME");
                    return;
                case Geraetetyp.Modem:
                    serializer.Serialize(writer, "MODEM");
                    return;
                case Geraetetyp.ModemFestnetz:
                    serializer.Serialize(writer, "MODEM_FESTNETZ");
                    return;
                case Geraetetyp.ModemFunk:
                    serializer.Serialize(writer, "MODEM_FUNK");
                    return;
                case Geraetetyp.ModemGprs:
                    serializer.Serialize(writer, "MODEM_GPRS");
                    return;
                case Geraetetyp.ModemGprsMLg:
                    serializer.Serialize(writer, "MODEM_GPRS_M_LG");
                    return;
                case Geraetetyp.ModemGsm:
                    serializer.Serialize(writer, "MODEM_GSM");
                    return;
                case Geraetetyp.ModemGsmMLg:
                    serializer.Serialize(writer, "MODEM_GSM_M_LG");
                    return;
                case Geraetetyp.ModemGsmOLg:
                    serializer.Serialize(writer, "MODEM_GSM_O_LG");
                    return;
                case Geraetetyp.ModerneMesseinrichtung:
                    serializer.Serialize(writer, "MODERNE_MESSEINRICHTUNG");
                    return;
                case Geraetetyp.Multiplexanlage:
                    serializer.Serialize(writer, "MULTIPLEXANLAGE");
                    return;
                case Geraetetyp.OptionaleZusZaehleinrichtung:
                    serializer.Serialize(writer, "OPTIONALE_ZUS_ZAEHLEINRICHTUNG");
                    return;
                case Geraetetyp.Pauschalanlage:
                    serializer.Serialize(writer, "PAUSCHALANLAGE");
                    return;
                case Geraetetyp.PlcKom:
                    serializer.Serialize(writer, "PLC_KOM");
                    return;
                case Geraetetyp.Rundsteuerempfaenger:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER");
                    return;
                case Geraetetyp.RundsteuerempfaengerImsMme:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER_IMS_MME");
                    return;
                case Geraetetyp.SonstigesGeraet:
                    serializer.Serialize(writer, "SONSTIGES_GERAET");
                    return;
                case Geraetetyp.Spannungswandler:
                    serializer.Serialize(writer, "SPANNUNGSWANDLER");
                    return;
                case Geraetetyp.Steuereinrichtung:
                    serializer.Serialize(writer, "STEUEREINRICHTUNG");
                    return;
                case Geraetetyp.Stromwandler:
                    serializer.Serialize(writer, "STROMWANDLER");
                    return;
                case Geraetetyp.Summationsgeraet:
                    serializer.Serialize(writer, "SUMMATIONSGERAET");
                    return;
                case Geraetetyp.SystemMu:
                    serializer.Serialize(writer, "SYSTEM_MU");
                    return;
                case Geraetetyp.Tarifschaltgeraet:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET");
                    return;
                case Geraetetyp.TarifschaltgeraetImsMme:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET_IMS_MME");
                    return;
                case Geraetetyp.Telefonanschluss:
                    serializer.Serialize(writer, "TELEFONANSCHLUSS");
                    return;
                case Geraetetyp.Telekommunikationseinrichtung:
                    serializer.Serialize(writer, "TELEKOMMUNIKATIONSEINRICHTUNG");
                    return;
                case Geraetetyp.TemperaturKompensation:
                    serializer.Serialize(writer, "TEMPERATUR_KOMPENSATION");
                    return;
                case Geraetetyp.TemperaturMu:
                    serializer.Serialize(writer, "TEMPERATUR_MU");
                    return;
                case Geraetetyp.Verstaerkeranlage:
                    serializer.Serialize(writer, "VERSTAERKERANLAGE");
                    return;
                case Geraetetyp.ZustandsMu:
                    serializer.Serialize(writer, "ZUSTANDS_MU");
                    return;
            }
            throw new Exception("Cannot marshal type Geraetetyp");
        }

        public static readonly GeraetetypConverter Singleton = new GeraetetypConverter();
    }

    internal class DienstleistungstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Dienstleistungstyp) || t == typeof(Dienstleistungstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABLESUNG_HALBJAEHRLICH":
                    return Dienstleistungstyp.AblesungHalbjaehrlich;
                case "ABLESUNG_JAEHRLICH":
                    return Dienstleistungstyp.AblesungJaehrlich;
                case "ABLESUNG_MONATLICH":
                    return Dienstleistungstyp.AblesungMonatlich;
                case "ABLESUNG_VIERTELJAEHRLICH":
                    return Dienstleistungstyp.AblesungVierteljaehrlich;
                case "ABLESUNG_ZUSAETZLICH_KUNDE":
                    return Dienstleistungstyp.AblesungZusaetzlichKunde;
                case "ABLESUNG_ZUSAETZLICH_MSB":
                    return Dienstleistungstyp.AblesungZusaetzlichMsb;
                case "AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG":
                    return Dienstleistungstyp.Auslesung2XTaeglichFernauslesung;
                case "AUSLESUNG_FERNAUSLESUNG":
                    return Dienstleistungstyp.AuslesungFernauslesung;
                case "AUSLESUNG_FERNAUSLESUNG_ZUSAETZLICH_MSB":
                    return Dienstleistungstyp.AuslesungFernauslesungZusaetzlichMsb;
                case "AUSLESUNG_JAEHRLICH_FERNAUSLESUNG":
                    return Dienstleistungstyp.AuslesungJaehrlichFernauslesung;
                case "AUSLESUNG_KOMPAKTMENGENUMWERTER":
                    return Dienstleistungstyp.AuslesungKompaktmengenumwerter;
                case "AUSLESUNG_MANUELL_MSB":
                    return Dienstleistungstyp.AuslesungManuellMsb;
                case "AUSLESUNG_MDE":
                    return Dienstleistungstyp.AuslesungMde;
                case "AUSLESUNG_MOATLICH_FERNAUSLESUNG":
                    return Dienstleistungstyp.AuslesungMoatlichFernauslesung;
                case "AUSLESUNG_MONATLICH_FERNAUSLESUNG":
                    return Dienstleistungstyp.AuslesungMonatlichFernauslesung;
                case "AUSLESUNG_STUENDLICH_FERNAUSLESUNG":
                    return Dienstleistungstyp.AuslesungStuendlichFernauslesung;
                case "AUSLESUNG_SYSTEMMENGENUMWERTER":
                    return Dienstleistungstyp.AuslesungSystemmengenumwerter;
                case "AUSLESUNG_TAEGLICH_FERNAUSLESUNG":
                    return Dienstleistungstyp.AuslesungTaeglichFernauslesung;
                case "AUSLESUNG_TEMPERATURMENGENUMWERTER":
                    return Dienstleistungstyp.AuslesungTemperaturmengenumwerter;
                case "AUSLESUNG_VORGANG":
                    return Dienstleistungstyp.AuslesungVorgang;
                case "AUSLESUNG_ZUSTANDSMENGENUMWERTER":
                    return Dienstleistungstyp.AuslesungZustandsmengenumwerter;
                case "DATENBEREITSTELLUNG_EINMALIG":
                    return Dienstleistungstyp.DatenbereitstellungEinmalig;
                case "DATENBEREITSTELLUNG_HALBJAEHRLICH":
                    return Dienstleistungstyp.DatenbereitstellungHalbjaehrlich;
                case "DATENBEREITSTELLUNG_HISTORISCHE_LG":
                    return Dienstleistungstyp.DatenbereitstellungHistorischeLg;
                case "DATENBEREITSTELLUNG_JAEHRLICH":
                    return Dienstleistungstyp.DatenbereitstellungJaehrlich;
                case "DATENBEREITSTELLUNG_MONATLICH":
                    return Dienstleistungstyp.DatenbereitstellungMonatlich;
                case "DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH":
                    return Dienstleistungstyp.DatenbereitstellungMonatlichZusaetzlich;
                case "DATENBEREITSTELLUNG_STUENDLICH":
                    return Dienstleistungstyp.DatenbereitstellungStuendlich;
                case "DATENBEREITSTELLUNG_TAEGLICH":
                    return Dienstleistungstyp.DatenbereitstellungTaeglich;
                case "DATENBEREITSTELLUNG_VIERTELJAEHRLICH":
                    return Dienstleistungstyp.DatenbereitstellungVierteljaehrlich;
                case "DATENBEREITSTELLUNG_WOECHENTLICH":
                    return Dienstleistungstyp.DatenbereitstellungWoechentlich;
                case "ENTSPERRUNG":
                    return Dienstleistungstyp.Entsperrung;
                case "INKASSOKOSTEN":
                    return Dienstleistungstyp.Inkassokosten;
                case "MAHNKOSTEN":
                    return Dienstleistungstyp.Mahnkosten;
                case "SPERRUNG":
                    return Dienstleistungstyp.Sperrung;
            }
            throw new Exception("Cannot unmarshal type Dienstleistungstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Dienstleistungstyp)untypedValue;
            switch (value)
            {
                case Dienstleistungstyp.AblesungHalbjaehrlich:
                    serializer.Serialize(writer, "ABLESUNG_HALBJAEHRLICH");
                    return;
                case Dienstleistungstyp.AblesungJaehrlich:
                    serializer.Serialize(writer, "ABLESUNG_JAEHRLICH");
                    return;
                case Dienstleistungstyp.AblesungMonatlich:
                    serializer.Serialize(writer, "ABLESUNG_MONATLICH");
                    return;
                case Dienstleistungstyp.AblesungVierteljaehrlich:
                    serializer.Serialize(writer, "ABLESUNG_VIERTELJAEHRLICH");
                    return;
                case Dienstleistungstyp.AblesungZusaetzlichKunde:
                    serializer.Serialize(writer, "ABLESUNG_ZUSAETZLICH_KUNDE");
                    return;
                case Dienstleistungstyp.AblesungZusaetzlichMsb:
                    serializer.Serialize(writer, "ABLESUNG_ZUSAETZLICH_MSB");
                    return;
                case Dienstleistungstyp.Auslesung2XTaeglichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungFernauslesungZusaetzlichMsb:
                    serializer.Serialize(writer, "AUSLESUNG_FERNAUSLESUNG_ZUSAETZLICH_MSB");
                    return;
                case Dienstleistungstyp.AuslesungJaehrlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_JAEHRLICH_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungKompaktmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_KOMPAKTMENGENUMWERTER");
                    return;
                case Dienstleistungstyp.AuslesungManuellMsb:
                    serializer.Serialize(writer, "AUSLESUNG_MANUELL_MSB");
                    return;
                case Dienstleistungstyp.AuslesungMde:
                    serializer.Serialize(writer, "AUSLESUNG_MDE");
                    return;
                case Dienstleistungstyp.AuslesungMoatlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_MOATLICH_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungMonatlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_MONATLICH_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungStuendlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_STUENDLICH_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungSystemmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_SYSTEMMENGENUMWERTER");
                    return;
                case Dienstleistungstyp.AuslesungTaeglichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_TAEGLICH_FERNAUSLESUNG");
                    return;
                case Dienstleistungstyp.AuslesungTemperaturmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_TEMPERATURMENGENUMWERTER");
                    return;
                case Dienstleistungstyp.AuslesungVorgang:
                    serializer.Serialize(writer, "AUSLESUNG_VORGANG");
                    return;
                case Dienstleistungstyp.AuslesungZustandsmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_ZUSTANDSMENGENUMWERTER");
                    return;
                case Dienstleistungstyp.DatenbereitstellungEinmalig:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_EINMALIG");
                    return;
                case Dienstleistungstyp.DatenbereitstellungHalbjaehrlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_HALBJAEHRLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungHistorischeLg:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_HISTORISCHE_LG");
                    return;
                case Dienstleistungstyp.DatenbereitstellungJaehrlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_JAEHRLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungMonatlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_MONATLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungMonatlichZusaetzlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungStuendlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_STUENDLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungTaeglich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_TAEGLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungVierteljaehrlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_VIERTELJAEHRLICH");
                    return;
                case Dienstleistungstyp.DatenbereitstellungWoechentlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_WOECHENTLICH");
                    return;
                case Dienstleistungstyp.Entsperrung:
                    serializer.Serialize(writer, "ENTSPERRUNG");
                    return;
                case Dienstleistungstyp.Inkassokosten:
                    serializer.Serialize(writer, "INKASSOKOSTEN");
                    return;
                case Dienstleistungstyp.Mahnkosten:
                    serializer.Serialize(writer, "MAHNKOSTEN");
                    return;
                case Dienstleistungstyp.Sperrung:
                    serializer.Serialize(writer, "SPERRUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Dienstleistungstyp");
        }

        public static readonly DienstleistungstypConverter Singleton = new DienstleistungstypConverter();
    }

    internal class BefestigungsartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Befestigungsart) || t == typeof(Befestigungsart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DREIPUNKT":
                    return Befestigungsart.Dreipunkt;
                case "EINSTUTZEN":
                    return Befestigungsart.Einstutzen;
                case "HUTSCHIENE":
                    return Befestigungsart.Hutschiene;
                case "STECKTECHNIK":
                    return Befestigungsart.Stecktechnik;
                case "ZWEISTUTZEN":
                    return Befestigungsart.Zweistutzen;
            }
            throw new Exception("Cannot unmarshal type Befestigungsart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Befestigungsart)untypedValue;
            switch (value)
            {
                case Befestigungsart.Dreipunkt:
                    serializer.Serialize(writer, "DREIPUNKT");
                    return;
                case Befestigungsart.Einstutzen:
                    serializer.Serialize(writer, "EINSTUTZEN");
                    return;
                case Befestigungsart.Hutschiene:
                    serializer.Serialize(writer, "HUTSCHIENE");
                    return;
                case Befestigungsart.Stecktechnik:
                    serializer.Serialize(writer, "STECKTECHNIK");
                    return;
                case Befestigungsart.Zweistutzen:
                    serializer.Serialize(writer, "ZWEISTUTZEN");
                    return;
            }
            throw new Exception("Cannot marshal type Befestigungsart");
        }

        public static readonly BefestigungsartConverter Singleton = new BefestigungsartConverter();
    }

    internal class MesswerterfassungConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Messwerterfassung) || t == typeof(Messwerterfassung?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FERNAUSLESBAR":
                    return Messwerterfassung.Fernauslesbar;
                case "MANUELL_AUSGELESENE":
                    return Messwerterfassung.ManuellAusgelesene;
            }
            throw new Exception("Cannot unmarshal type Messwerterfassung");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Messwerterfassung)untypedValue;
            switch (value)
            {
                case Messwerterfassung.Fernauslesbar:
                    serializer.Serialize(writer, "FERNAUSLESBAR");
                    return;
                case Messwerterfassung.ManuellAusgelesene:
                    serializer.Serialize(writer, "MANUELL_AUSGELESENE");
                    return;
            }
            throw new Exception("Cannot marshal type Messwerterfassung");
        }

        public static readonly MesswerterfassungConverter Singleton = new MesswerterfassungConverter();
    }

    internal class RegisteranzahlConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Registeranzahl) || t == typeof(Registeranzahl?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EINTARIF":
                    return Registeranzahl.Eintarif;
                case "MEHRTARIF":
                    return Registeranzahl.Mehrtarif;
                case "ZWEITARIF":
                    return Registeranzahl.Zweitarif;
            }
            throw new Exception("Cannot unmarshal type Registeranzahl");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Registeranzahl)untypedValue;
            switch (value)
            {
                case Registeranzahl.Eintarif:
                    serializer.Serialize(writer, "EINTARIF");
                    return;
                case Registeranzahl.Mehrtarif:
                    serializer.Serialize(writer, "MEHRTARIF");
                    return;
                case Registeranzahl.Zweitarif:
                    serializer.Serialize(writer, "ZWEITARIF");
                    return;
            }
            throw new Exception("Cannot marshal type Registeranzahl");
        }

        public static readonly RegisteranzahlConverter Singleton = new RegisteranzahlConverter();
    }

    internal class ZaehlerauspraegungConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Zaehlerauspraegung) || t == typeof(Zaehlerauspraegung?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EINRICHTUNGSZAEHLER":
                    return Zaehlerauspraegung.Einrichtungszaehler;
                case "ZWEIRICHTUNGSZAEHLER":
                    return Zaehlerauspraegung.Zweirichtungszaehler;
            }
            throw new Exception("Cannot unmarshal type Zaehlerauspraegung");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Zaehlerauspraegung)untypedValue;
            switch (value)
            {
                case Zaehlerauspraegung.Einrichtungszaehler:
                    serializer.Serialize(writer, "EINRICHTUNGSZAEHLER");
                    return;
                case Zaehlerauspraegung.Zweirichtungszaehler:
                    serializer.Serialize(writer, "ZWEIRICHTUNGSZAEHLER");
                    return;
            }
            throw new Exception("Cannot marshal type Zaehlerauspraegung");
        }

        public static readonly ZaehlerauspraegungConverter Singleton = new ZaehlerauspraegungConverter();
    }

    internal class ZaehlergroesseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Zaehlergroesse) || t == typeof(Zaehlergroesse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "G10":
                    return Zaehlergroesse.G10;
                case "G100":
                    return Zaehlergroesse.G100;
                case "G1000":
                    return Zaehlergroesse.G1000;
                case "G10000":
                    return Zaehlergroesse.G10000;
                case "G12500":
                    return Zaehlergroesse.G12500;
                case "G16":
                    return Zaehlergroesse.G16;
                case "G160":
                    return Zaehlergroesse.G160;
                case "G1600":
                    return Zaehlergroesse.G1600;
                case "G16000":
                    return Zaehlergroesse.G16000;
                case "G25":
                    return Zaehlergroesse.G25;
                case "G250":
                    return Zaehlergroesse.G250;
                case "G2500":
                    return Zaehlergroesse.G2500;
                case "G2KOMMA5":
                    return Zaehlergroesse.G2Komma5;
                case "G4":
                    return Zaehlergroesse.G4;
                case "G40":
                    return Zaehlergroesse.G40;
                case "G400":
                    return Zaehlergroesse.G400;
                case "G4000":
                    return Zaehlergroesse.G4000;
                case "G6":
                    return Zaehlergroesse.G6;
                case "G65":
                    return Zaehlergroesse.G65;
                case "G650":
                    return Zaehlergroesse.G650;
                case "G6500":
                    return Zaehlergroesse.G6500;
            }
            throw new Exception("Cannot unmarshal type Zaehlergroesse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Zaehlergroesse)untypedValue;
            switch (value)
            {
                case Zaehlergroesse.G10:
                    serializer.Serialize(writer, "G10");
                    return;
                case Zaehlergroesse.G100:
                    serializer.Serialize(writer, "G100");
                    return;
                case Zaehlergroesse.G1000:
                    serializer.Serialize(writer, "G1000");
                    return;
                case Zaehlergroesse.G10000:
                    serializer.Serialize(writer, "G10000");
                    return;
                case Zaehlergroesse.G12500:
                    serializer.Serialize(writer, "G12500");
                    return;
                case Zaehlergroesse.G16:
                    serializer.Serialize(writer, "G16");
                    return;
                case Zaehlergroesse.G160:
                    serializer.Serialize(writer, "G160");
                    return;
                case Zaehlergroesse.G1600:
                    serializer.Serialize(writer, "G1600");
                    return;
                case Zaehlergroesse.G16000:
                    serializer.Serialize(writer, "G16000");
                    return;
                case Zaehlergroesse.G25:
                    serializer.Serialize(writer, "G25");
                    return;
                case Zaehlergroesse.G250:
                    serializer.Serialize(writer, "G250");
                    return;
                case Zaehlergroesse.G2500:
                    serializer.Serialize(writer, "G2500");
                    return;
                case Zaehlergroesse.G2Komma5:
                    serializer.Serialize(writer, "G2KOMMA5");
                    return;
                case Zaehlergroesse.G4:
                    serializer.Serialize(writer, "G4");
                    return;
                case Zaehlergroesse.G40:
                    serializer.Serialize(writer, "G40");
                    return;
                case Zaehlergroesse.G400:
                    serializer.Serialize(writer, "G400");
                    return;
                case Zaehlergroesse.G4000:
                    serializer.Serialize(writer, "G4000");
                    return;
                case Zaehlergroesse.G6:
                    serializer.Serialize(writer, "G6");
                    return;
                case Zaehlergroesse.G65:
                    serializer.Serialize(writer, "G65");
                    return;
                case Zaehlergroesse.G650:
                    serializer.Serialize(writer, "G650");
                    return;
                case Zaehlergroesse.G6500:
                    serializer.Serialize(writer, "G6500");
                    return;
            }
            throw new Exception("Cannot marshal type Zaehlergroesse");
        }

        public static readonly ZaehlergroesseConverter Singleton = new ZaehlergroesseConverter();
    }

    internal class ZaehlertypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Zaehlertyp) || t == typeof(Zaehlertyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BALGENGASZAEHLER":
                    return Zaehlertyp.Balgengaszaehler;
                case "DREHKOLBENZAEHLER":
                    return Zaehlertyp.Drehkolbenzaehler;
                case "DREHSTROMZAEHLER":
                    return Zaehlertyp.Drehstromzaehler;
                case "ELEKTRONISCHER_ZAEHLER":
                    return Zaehlertyp.ElektronischerZaehler;
                case "INTELLIGENTES_MESSSYSTEM":
                    return Zaehlertyp.IntelligentesMesssystem;
                case "LEISTUNGSZAEHLER":
                    return Zaehlertyp.Leistungszaehler;
                case "MAXIMUMZAEHLER":
                    return Zaehlertyp.Maximumzaehler;
                case "MODERNE_MESSEINRICHTUNG":
                    return Zaehlertyp.ModerneMesseinrichtung;
                case "TURBINENRADGASZAEHLER":
                    return Zaehlertyp.Turbinenradgaszaehler;
                case "ULTRASCHALLGASZAEHLER":
                    return Zaehlertyp.Ultraschallgaszaehler;
                case "WECHSELSTROMZAEHLER":
                    return Zaehlertyp.Wechselstromzaehler;
                case "WIRBELGASZAEHLER":
                    return Zaehlertyp.Wirbelgaszaehler;
            }
            throw new Exception("Cannot unmarshal type Zaehlertyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Zaehlertyp)untypedValue;
            switch (value)
            {
                case Zaehlertyp.Balgengaszaehler:
                    serializer.Serialize(writer, "BALGENGASZAEHLER");
                    return;
                case Zaehlertyp.Drehkolbenzaehler:
                    serializer.Serialize(writer, "DREHKOLBENZAEHLER");
                    return;
                case Zaehlertyp.Drehstromzaehler:
                    serializer.Serialize(writer, "DREHSTROMZAEHLER");
                    return;
                case Zaehlertyp.ElektronischerZaehler:
                    serializer.Serialize(writer, "ELEKTRONISCHER_ZAEHLER");
                    return;
                case Zaehlertyp.IntelligentesMesssystem:
                    serializer.Serialize(writer, "INTELLIGENTES_MESSSYSTEM");
                    return;
                case Zaehlertyp.Leistungszaehler:
                    serializer.Serialize(writer, "LEISTUNGSZAEHLER");
                    return;
                case Zaehlertyp.Maximumzaehler:
                    serializer.Serialize(writer, "MAXIMUMZAEHLER");
                    return;
                case Zaehlertyp.ModerneMesseinrichtung:
                    serializer.Serialize(writer, "MODERNE_MESSEINRICHTUNG");
                    return;
                case Zaehlertyp.Turbinenradgaszaehler:
                    serializer.Serialize(writer, "TURBINENRADGASZAEHLER");
                    return;
                case Zaehlertyp.Ultraschallgaszaehler:
                    serializer.Serialize(writer, "ULTRASCHALLGASZAEHLER");
                    return;
                case Zaehlertyp.Wechselstromzaehler:
                    serializer.Serialize(writer, "WECHSELSTROMZAEHLER");
                    return;
                case Zaehlertyp.Wirbelgaszaehler:
                    serializer.Serialize(writer, "WIRBELGASZAEHLER");
                    return;
            }
            throw new Exception("Cannot marshal type Zaehlertyp");
        }

        public static readonly ZaehlertypConverter Singleton = new ZaehlertypConverter();
    }

    internal class ZaehlertypSpezifikationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ZaehlertypSpezifikation) || t == typeof(ZaehlertypSpezifikation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EDL21":
                    return ZaehlertypSpezifikation.Edl21;
                case "EDL40":
                    return ZaehlertypSpezifikation.Edl40;
                case "MME_MEDA":
                    return ZaehlertypSpezifikation.MmeMeda;
                case "MME_STANDARD":
                    return ZaehlertypSpezifikation.MmeStandard;
                case "SONSTIGER_EHZ":
                    return ZaehlertypSpezifikation.SonstigerEhz;
            }
            throw new Exception("Cannot unmarshal type ZaehlertypSpezifikation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ZaehlertypSpezifikation)untypedValue;
            switch (value)
            {
                case ZaehlertypSpezifikation.Edl21:
                    serializer.Serialize(writer, "EDL21");
                    return;
                case ZaehlertypSpezifikation.Edl40:
                    serializer.Serialize(writer, "EDL40");
                    return;
                case ZaehlertypSpezifikation.MmeMeda:
                    serializer.Serialize(writer, "MME_MEDA");
                    return;
                case ZaehlertypSpezifikation.MmeStandard:
                    serializer.Serialize(writer, "MME_STANDARD");
                    return;
                case ZaehlertypSpezifikation.SonstigerEhz:
                    serializer.Serialize(writer, "SONSTIGER_EHZ");
                    return;
            }
            throw new Exception("Cannot marshal type ZaehlertypSpezifikation");
        }

        public static readonly ZaehlertypSpezifikationConverter Singleton = new ZaehlertypSpezifikationConverter();
    }

    internal class NetznutzungRechnungsartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NetznutzungRechnungsart) || t == typeof(NetznutzungRechnungsart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HANDELSRECHNUNG":
                    return NetznutzungRechnungsart.Handelsrechnung;
                case "SELBSTAUSGESTELLT":
                    return NetznutzungRechnungsart.Selbstausgestellt;
            }
            throw new Exception("Cannot unmarshal type NetznutzungRechnungsart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NetznutzungRechnungsart)untypedValue;
            switch (value)
            {
                case NetznutzungRechnungsart.Handelsrechnung:
                    serializer.Serialize(writer, "HANDELSRECHNUNG");
                    return;
                case NetznutzungRechnungsart.Selbstausgestellt:
                    serializer.Serialize(writer, "SELBSTAUSGESTELLT");
                    return;
            }
            throw new Exception("Cannot marshal type NetznutzungRechnungsart");
        }

        public static readonly NetznutzungRechnungsartConverter Singleton = new NetznutzungRechnungsartConverter();
    }

    internal class NetznutzungRechnungstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NetznutzungRechnungstyp) || t == typeof(NetznutzungRechnungstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABSCHLAGSRECHNUNG":
                    return NetznutzungRechnungstyp.Abschlagsrechnung;
                case "ABSCHLUSSRECHNUNG":
                    return NetznutzungRechnungstyp.Abschlussrechnung;
                case "INTEGRIERTE_13TE_RECHNUNG":
                    return NetznutzungRechnungstyp.Integrierte13TeRechnung;
                case "MEHRMINDERMENGENRECHNUNG":
                    return NetznutzungRechnungstyp.Mehrmindermengenrechnung;
                case "MONATSRECHNUNG":
                    return NetznutzungRechnungstyp.Monatsrechnung;
                case "TURNUSRECHNUNG":
                    return NetznutzungRechnungstyp.Turnusrechnung;
                case "WIMRECHNUNG":
                    return NetznutzungRechnungstyp.Wimrechnung;
                case "ZUSAETZLICHE_13TE_RECHNUNG":
                    return NetznutzungRechnungstyp.Zusaetzliche13TeRechnung;
                case "ZWISCHENRECHNUNG":
                    return NetznutzungRechnungstyp.Zwischenrechnung;
            }
            throw new Exception("Cannot unmarshal type NetznutzungRechnungstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NetznutzungRechnungstyp)untypedValue;
            switch (value)
            {
                case NetznutzungRechnungstyp.Abschlagsrechnung:
                    serializer.Serialize(writer, "ABSCHLAGSRECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Abschlussrechnung:
                    serializer.Serialize(writer, "ABSCHLUSSRECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Integrierte13TeRechnung:
                    serializer.Serialize(writer, "INTEGRIERTE_13TE_RECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Mehrmindermengenrechnung:
                    serializer.Serialize(writer, "MEHRMINDERMENGENRECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Monatsrechnung:
                    serializer.Serialize(writer, "MONATSRECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Turnusrechnung:
                    serializer.Serialize(writer, "TURNUSRECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Wimrechnung:
                    serializer.Serialize(writer, "WIMRECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Zusaetzliche13TeRechnung:
                    serializer.Serialize(writer, "ZUSAETZLICHE_13TE_RECHNUNG");
                    return;
                case NetznutzungRechnungstyp.Zwischenrechnung:
                    serializer.Serialize(writer, "ZWISCHENRECHNUNG");
                    return;
            }
            throw new Exception("Cannot marshal type NetznutzungRechnungstyp");
        }

        public static readonly NetznutzungRechnungstypConverter Singleton = new NetznutzungRechnungstypConverter();
    }

    internal class BdewArtikelnummerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BdewArtikelnummer) || t == typeof(BdewArtikelnummer?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABGABE_KWKG":
                    return BdewArtikelnummer.AbgabeKwkg;
                case "ABSCHLAG":
                    return BdewArtikelnummer.Abschlag;
                case "AUSGLEICHSENERGIE":
                    return BdewArtikelnummer.Ausgleichsenergie;
                case "AUSGLEICHSENERGIE_UNTERDECKUNG":
                    return BdewArtikelnummer.AusgleichsenergieUnterdeckung;
                case "BEFESTIGUNGSEINRICHTUNG":
                    return BdewArtikelnummer.Befestigungseinrichtung;
                case "BLINDMEHRARBEIT":
                    return BdewArtikelnummer.Blindmehrarbeit;
                case "BLINDMEHRLEISTUNG":
                    return BdewArtikelnummer.Blindmehrleistung;
                case "ENERGIESTEUER":
                    return BdewArtikelnummer.Energiesteuer;
                case "ENTGELT_ABRECHNUNG":
                    return BdewArtikelnummer.EntgeltAbrechnung;
                case "ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK":
                    return BdewArtikelnummer.EntgeltEinbauBetriebWartungMesstechnik;
                case "ENTGELT_FERNAUSLESUNG":
                    return BdewArtikelnummer.EntgeltFernauslesung;
                case "ENTGELT_MESSUNG_ABLESUNG":
                    return BdewArtikelnummer.EntgeltMessungAblesung;
                case "ENTSPERRKOSTEN":
                    return BdewArtikelnummer.Entsperrkosten;
                case "FIXE_ARBEITSENTGELTKOMPONENTE":
                    return BdewArtikelnummer.FixeArbeitsentgeltkomponente;
                case "FIXE_LEISTUNGSENTGELTKOMPONENTE":
                    return BdewArtikelnummer.FixeLeistungsentgeltkomponente;
                case "GRUNDPREIS":
                    return BdewArtikelnummer.Grundpreis;
                case "INKASSOKOSTEN":
                    return BdewArtikelnummer.Inkassokosten;
                case "KOMMUNIKATIONSEINRICHTUNG":
                    return BdewArtikelnummer.Kommunikationseinrichtung;
                case "KONZESSIONSABGABE":
                    return BdewArtikelnummer.Konzessionsabgabe;
                case "LEISTUNG":
                    return BdewArtikelnummer.Leistung;
                case "LEISTUNG_PAUSCHAL":
                    return BdewArtikelnummer.LeistungPauschal;
                case "MAHNKOSTEN":
                    return BdewArtikelnummer.Mahnkosten;
                case "MEHRMENGE":
                    return BdewArtikelnummer.Mehrmenge;
                case "MEHR_MINDERMENGEN":
                    return BdewArtikelnummer.MehrMindermengen;
                case "MINDERMENGE":
                    return BdewArtikelnummer.Mindermenge;
                case "MSB_INKL_MESSUNG":
                    return BdewArtikelnummer.MsbInklMessung;
                case "NOTSTROMLIEFERUNG_ARBEIT":
                    return BdewArtikelnummer.NotstromlieferungArbeit;
                case "NOTSTROMLIEFERUNG_LEISTUNG":
                    return BdewArtikelnummer.NotstromlieferungLeistung;
                case "OFFSHORE_HAFTUNGSUMLAGE":
                    return BdewArtikelnummer.OffshoreHaftungsumlage;
                case "PARAGRAF_19_STROM_NEV_UMLAGE":
                    return BdewArtikelnummer.Paragraf19_StromNevUmlage;
                case "PRUEFGEBUEHREN_AUSSERPLANMAESSIG":
                    return BdewArtikelnummer.PruefgebuehrenAusserplanmaessig;
                case "REGELENERGIE_ARBEIT":
                    return BdewArtikelnummer.RegelenergieArbeit;
                case "REGELENERGIE_LEISTUNG":
                    return BdewArtikelnummer.RegelenergieLeistung;
                case "RESERVELEISTUNG":
                    return BdewArtikelnummer.Reserveleistung;
                case "RESERVENETZKAPAZITAET":
                    return BdewArtikelnummer.Reservenetzkapazitaet;
                case "SINGULAER_GENUTZTE_BETRIEBSMITTEL":
                    return BdewArtikelnummer.SingulaerGenutzteBetriebsmittel;
                case "SMARTMETER_GATEWAY":
                    return BdewArtikelnummer.SmartmeterGateway;
                case "SPERRKOSTEN":
                    return BdewArtikelnummer.Sperrkosten;
                case "STEUERBOX":
                    return BdewArtikelnummer.Steuerbox;
                case "TECHNISCHE_STEUEREINRICHTUNG":
                    return BdewArtikelnummer.TechnischeSteuereinrichtung;
                case "UMLAGE_ABSCHALTBARE_LASTEN":
                    return BdewArtikelnummer.UmlageAbschaltbareLasten;
                case "UNTERMESSUNG":
                    return BdewArtikelnummer.Untermessung;
                case "WANDLER_MENGENUMWERTER":
                    return BdewArtikelnummer.WandlerMengenumwerter;
                case "WIRKARBEIT":
                    return BdewArtikelnummer.Wirkarbeit;
                case "ZAEHLEINRICHTUNG":
                    return BdewArtikelnummer.Zaehleinrichtung;
                case "ZUSAETZLICHE_ABLESUNG":
                    return BdewArtikelnummer.ZusaetzlicheAblesung;
            }
            throw new Exception("Cannot unmarshal type BdewArtikelnummer");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BdewArtikelnummer)untypedValue;
            switch (value)
            {
                case BdewArtikelnummer.AbgabeKwkg:
                    serializer.Serialize(writer, "ABGABE_KWKG");
                    return;
                case BdewArtikelnummer.Abschlag:
                    serializer.Serialize(writer, "ABSCHLAG");
                    return;
                case BdewArtikelnummer.Ausgleichsenergie:
                    serializer.Serialize(writer, "AUSGLEICHSENERGIE");
                    return;
                case BdewArtikelnummer.AusgleichsenergieUnterdeckung:
                    serializer.Serialize(writer, "AUSGLEICHSENERGIE_UNTERDECKUNG");
                    return;
                case BdewArtikelnummer.Befestigungseinrichtung:
                    serializer.Serialize(writer, "BEFESTIGUNGSEINRICHTUNG");
                    return;
                case BdewArtikelnummer.Blindmehrarbeit:
                    serializer.Serialize(writer, "BLINDMEHRARBEIT");
                    return;
                case BdewArtikelnummer.Blindmehrleistung:
                    serializer.Serialize(writer, "BLINDMEHRLEISTUNG");
                    return;
                case BdewArtikelnummer.Energiesteuer:
                    serializer.Serialize(writer, "ENERGIESTEUER");
                    return;
                case BdewArtikelnummer.EntgeltAbrechnung:
                    serializer.Serialize(writer, "ENTGELT_ABRECHNUNG");
                    return;
                case BdewArtikelnummer.EntgeltEinbauBetriebWartungMesstechnik:
                    serializer.Serialize(writer, "ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK");
                    return;
                case BdewArtikelnummer.EntgeltFernauslesung:
                    serializer.Serialize(writer, "ENTGELT_FERNAUSLESUNG");
                    return;
                case BdewArtikelnummer.EntgeltMessungAblesung:
                    serializer.Serialize(writer, "ENTGELT_MESSUNG_ABLESUNG");
                    return;
                case BdewArtikelnummer.Entsperrkosten:
                    serializer.Serialize(writer, "ENTSPERRKOSTEN");
                    return;
                case BdewArtikelnummer.FixeArbeitsentgeltkomponente:
                    serializer.Serialize(writer, "FIXE_ARBEITSENTGELTKOMPONENTE");
                    return;
                case BdewArtikelnummer.FixeLeistungsentgeltkomponente:
                    serializer.Serialize(writer, "FIXE_LEISTUNGSENTGELTKOMPONENTE");
                    return;
                case BdewArtikelnummer.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
                case BdewArtikelnummer.Inkassokosten:
                    serializer.Serialize(writer, "INKASSOKOSTEN");
                    return;
                case BdewArtikelnummer.Kommunikationseinrichtung:
                    serializer.Serialize(writer, "KOMMUNIKATIONSEINRICHTUNG");
                    return;
                case BdewArtikelnummer.Konzessionsabgabe:
                    serializer.Serialize(writer, "KONZESSIONSABGABE");
                    return;
                case BdewArtikelnummer.Leistung:
                    serializer.Serialize(writer, "LEISTUNG");
                    return;
                case BdewArtikelnummer.LeistungPauschal:
                    serializer.Serialize(writer, "LEISTUNG_PAUSCHAL");
                    return;
                case BdewArtikelnummer.Mahnkosten:
                    serializer.Serialize(writer, "MAHNKOSTEN");
                    return;
                case BdewArtikelnummer.Mehrmenge:
                    serializer.Serialize(writer, "MEHRMENGE");
                    return;
                case BdewArtikelnummer.MehrMindermengen:
                    serializer.Serialize(writer, "MEHR_MINDERMENGEN");
                    return;
                case BdewArtikelnummer.Mindermenge:
                    serializer.Serialize(writer, "MINDERMENGE");
                    return;
                case BdewArtikelnummer.MsbInklMessung:
                    serializer.Serialize(writer, "MSB_INKL_MESSUNG");
                    return;
                case BdewArtikelnummer.NotstromlieferungArbeit:
                    serializer.Serialize(writer, "NOTSTROMLIEFERUNG_ARBEIT");
                    return;
                case BdewArtikelnummer.NotstromlieferungLeistung:
                    serializer.Serialize(writer, "NOTSTROMLIEFERUNG_LEISTUNG");
                    return;
                case BdewArtikelnummer.OffshoreHaftungsumlage:
                    serializer.Serialize(writer, "OFFSHORE_HAFTUNGSUMLAGE");
                    return;
                case BdewArtikelnummer.Paragraf19_StromNevUmlage:
                    serializer.Serialize(writer, "PARAGRAF_19_STROM_NEV_UMLAGE");
                    return;
                case BdewArtikelnummer.PruefgebuehrenAusserplanmaessig:
                    serializer.Serialize(writer, "PRUEFGEBUEHREN_AUSSERPLANMAESSIG");
                    return;
                case BdewArtikelnummer.RegelenergieArbeit:
                    serializer.Serialize(writer, "REGELENERGIE_ARBEIT");
                    return;
                case BdewArtikelnummer.RegelenergieLeistung:
                    serializer.Serialize(writer, "REGELENERGIE_LEISTUNG");
                    return;
                case BdewArtikelnummer.Reserveleistung:
                    serializer.Serialize(writer, "RESERVELEISTUNG");
                    return;
                case BdewArtikelnummer.Reservenetzkapazitaet:
                    serializer.Serialize(writer, "RESERVENETZKAPAZITAET");
                    return;
                case BdewArtikelnummer.SingulaerGenutzteBetriebsmittel:
                    serializer.Serialize(writer, "SINGULAER_GENUTZTE_BETRIEBSMITTEL");
                    return;
                case BdewArtikelnummer.SmartmeterGateway:
                    serializer.Serialize(writer, "SMARTMETER_GATEWAY");
                    return;
                case BdewArtikelnummer.Sperrkosten:
                    serializer.Serialize(writer, "SPERRKOSTEN");
                    return;
                case BdewArtikelnummer.Steuerbox:
                    serializer.Serialize(writer, "STEUERBOX");
                    return;
                case BdewArtikelnummer.TechnischeSteuereinrichtung:
                    serializer.Serialize(writer, "TECHNISCHE_STEUEREINRICHTUNG");
                    return;
                case BdewArtikelnummer.UmlageAbschaltbareLasten:
                    serializer.Serialize(writer, "UMLAGE_ABSCHALTBARE_LASTEN");
                    return;
                case BdewArtikelnummer.Untermessung:
                    serializer.Serialize(writer, "UNTERMESSUNG");
                    return;
                case BdewArtikelnummer.WandlerMengenumwerter:
                    serializer.Serialize(writer, "WANDLER_MENGENUMWERTER");
                    return;
                case BdewArtikelnummer.Wirkarbeit:
                    serializer.Serialize(writer, "WIRKARBEIT");
                    return;
                case BdewArtikelnummer.Zaehleinrichtung:
                    serializer.Serialize(writer, "ZAEHLEINRICHTUNG");
                    return;
                case BdewArtikelnummer.ZusaetzlicheAblesung:
                    serializer.Serialize(writer, "ZUSAETZLICHE_ABLESUNG");
                    return;
            }
            throw new Exception("Cannot marshal type BdewArtikelnummer");
        }

        public static readonly BdewArtikelnummerConverter Singleton = new BdewArtikelnummerConverter();
    }

    internal class WaehrungseinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungseinheit) || t == typeof(Waehrungseinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CT":
                    return Waehrungseinheit.Ct;
                case "EUR":
                    return Waehrungseinheit.Eur;
            }
            throw new Exception("Cannot unmarshal type Waehrungseinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungseinheit)untypedValue;
            switch (value)
            {
                case Waehrungseinheit.Ct:
                    serializer.Serialize(writer, "CT");
                    return;
                case Waehrungseinheit.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungseinheit");
        }

        public static readonly WaehrungseinheitConverter Singleton = new WaehrungseinheitConverter();
    }

    internal class PreisstatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Preisstatus) || t == typeof(Preisstatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ENDGUELTIG":
                    return Preisstatus.Endgueltig;
                case "VORLAEUFIG":
                    return Preisstatus.Vorlaeufig;
            }
            throw new Exception("Cannot unmarshal type Preisstatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Preisstatus)untypedValue;
            switch (value)
            {
                case Preisstatus.Endgueltig:
                    serializer.Serialize(writer, "ENDGUELTIG");
                    return;
                case Preisstatus.Vorlaeufig:
                    serializer.Serialize(writer, "VORLAEUFIG");
                    return;
            }
            throw new Exception("Cannot marshal type Preisstatus");
        }

        public static readonly PreisstatusConverter Singleton = new PreisstatusConverter();
    }

    internal class SteuerkennzeichenConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Steuerkennzeichen) || t == typeof(Steuerkennzeichen?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "RCV":
                    return Steuerkennzeichen.Rcv;
                case "UST_0":
                    return Steuerkennzeichen.Ust0;
                case "UST_16":
                    return Steuerkennzeichen.Ust16;
                case "UST_19":
                    return Steuerkennzeichen.Ust19;
                case "UST_7":
                    return Steuerkennzeichen.Ust7;
                case "VST_0":
                    return Steuerkennzeichen.Vst0;
                case "VST_16":
                    return Steuerkennzeichen.Vst16;
                case "VST_19":
                    return Steuerkennzeichen.Vst19;
                case "VST_7":
                    return Steuerkennzeichen.Vst7;
            }
            throw new Exception("Cannot unmarshal type Steuerkennzeichen");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Steuerkennzeichen)untypedValue;
            switch (value)
            {
                case Steuerkennzeichen.Rcv:
                    serializer.Serialize(writer, "RCV");
                    return;
                case Steuerkennzeichen.Ust0:
                    serializer.Serialize(writer, "UST_0");
                    return;
                case Steuerkennzeichen.Ust16:
                    serializer.Serialize(writer, "UST_16");
                    return;
                case Steuerkennzeichen.Ust19:
                    serializer.Serialize(writer, "UST_19");
                    return;
                case Steuerkennzeichen.Ust7:
                    serializer.Serialize(writer, "UST_7");
                    return;
                case Steuerkennzeichen.Vst0:
                    serializer.Serialize(writer, "VST_0");
                    return;
                case Steuerkennzeichen.Vst16:
                    serializer.Serialize(writer, "VST_16");
                    return;
                case Steuerkennzeichen.Vst19:
                    serializer.Serialize(writer, "VST_19");
                    return;
                case Steuerkennzeichen.Vst7:
                    serializer.Serialize(writer, "VST_7");
                    return;
            }
            throw new Exception("Cannot marshal type Steuerkennzeichen");
        }

        public static readonly SteuerkennzeichenConverter Singleton = new SteuerkennzeichenConverter();
    }

    internal class RechnungsstatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rechnungsstatus) || t == typeof(Rechnungsstatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BEZAHLT":
                    return Rechnungsstatus.Bezahlt;
                case "GEBUCHT":
                    return Rechnungsstatus.Gebucht;
                case "GEPRUEFT_FEHLERHAFT":
                    return Rechnungsstatus.GeprueftFehlerhaft;
                case "GEPRUEFT_OK":
                    return Rechnungsstatus.GeprueftOk;
                case "UNGEPRUEFT":
                    return Rechnungsstatus.Ungeprueft;
            }
            throw new Exception("Cannot unmarshal type Rechnungsstatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rechnungsstatus)untypedValue;
            switch (value)
            {
                case Rechnungsstatus.Bezahlt:
                    serializer.Serialize(writer, "BEZAHLT");
                    return;
                case Rechnungsstatus.Gebucht:
                    serializer.Serialize(writer, "GEBUCHT");
                    return;
                case Rechnungsstatus.GeprueftFehlerhaft:
                    serializer.Serialize(writer, "GEPRUEFT_FEHLERHAFT");
                    return;
                case Rechnungsstatus.GeprueftOk:
                    serializer.Serialize(writer, "GEPRUEFT_OK");
                    return;
                case Rechnungsstatus.Ungeprueft:
                    serializer.Serialize(writer, "UNGEPRUEFT");
                    return;
            }
            throw new Exception("Cannot marshal type Rechnungsstatus");
        }

        public static readonly RechnungsstatusConverter Singleton = new RechnungsstatusConverter();
    }

    internal class RechnungstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rechnungstyp) || t == typeof(Rechnungstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AUSGLEICHSENERGIERECHNUNG":
                    return Rechnungstyp.Ausgleichsenergierechnung;
                case "BESCHAFFUNGSRECHNUNG":
                    return Rechnungstyp.Beschaffungsrechnung;
                case "ENDKUNDENRECHNUNG":
                    return Rechnungstyp.Endkundenrechnung;
                case "MEHRMINDERMENGENRECHNUNG":
                    return Rechnungstyp.Mehrmindermengenrechnung;
                case "MESSSTELLENBETRIEBSRECHNUNG":
                    return Rechnungstyp.Messstellenbetriebsrechnung;
                case "NETZNUTZUNGSRECHNUNG":
                    return Rechnungstyp.Netznutzungsrechnung;
            }
            throw new Exception("Cannot unmarshal type Rechnungstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rechnungstyp)untypedValue;
            switch (value)
            {
                case Rechnungstyp.Ausgleichsenergierechnung:
                    serializer.Serialize(writer, "AUSGLEICHSENERGIERECHNUNG");
                    return;
                case Rechnungstyp.Beschaffungsrechnung:
                    serializer.Serialize(writer, "BESCHAFFUNGSRECHNUNG");
                    return;
                case Rechnungstyp.Endkundenrechnung:
                    serializer.Serialize(writer, "ENDKUNDENRECHNUNG");
                    return;
                case Rechnungstyp.Mehrmindermengenrechnung:
                    serializer.Serialize(writer, "MEHRMINDERMENGENRECHNUNG");
                    return;
                case Rechnungstyp.Messstellenbetriebsrechnung:
                    serializer.Serialize(writer, "MESSSTELLENBETRIEBSRECHNUNG");
                    return;
                case Rechnungstyp.Netznutzungsrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Rechnungstyp");
        }

        public static readonly RechnungstypConverter Singleton = new RechnungstypConverter();
    }
}
